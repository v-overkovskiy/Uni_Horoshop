"""
–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –¥–ª—è –ø–∞—Ä RU/UA
"""
import re
import logging
from urllib.parse import urlparse, urlunparse, quote, unquote
from typing import Tuple, Dict

logger = logging.getLogger(__name__)

HOST = "prorazko.com"

def _fix_scheme(u: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã URL"""
    original = u
    u = u.strip()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
    u = re.sub(r'ht+t+p+s*://', 'https://', u)  # htttps://, httttps:// ‚Üí https://
    u = re.sub(r'ht+t+p://', 'http://', u)      # htttp://, httttp:// ‚Üí http://
    u = re.sub(r'ht+p+s*://', 'https://', u)    # htp://, htps:// ‚Üí https://
    u = re.sub(r'ht+p://', 'http://', u)        # htp:// ‚Üí http://
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –¥–æ–º–µ–Ω–µ
    u = re.sub(r'prorazkko\.com', 'prorazko.com', u)  # prorazkko.com ‚Üí prorazko.com
    u = re.sub(r'prorazko\.co\.', 'prorazko.com', u)  # prorazko.co. ‚Üí prorazko.com
    u = re.sub(r'prorazko\.comm', 'prorazko.com', u)  # prorazko.comm ‚Üí prorazko.com
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ https –¥–ª—è prorazko.com
    if u.startswith("http://") and "prorazko.com" in u:
        u = "https://" + u[len("http://"):]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if original != u:
        logger.info(f"üîß URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: '{original}' ‚Üí '{u}'")
    
    return u

def _fix_path_issues(u: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—É—Ç–∏ URL –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ñ–∏—Å–æ–≤"""
    original = u
    
    # –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–µ—Ñ–∏—Å–æ–≤
    u = re.sub(r'dllia', 'dlia', u)  # dllia ‚Üí dlia (–æ–ø–µ—á–∞—Ç–∫–∞)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if original != u:
        logger.info(f"üîß –ü—É—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: '{original}' ‚Üí '{u}'")
    
    return u

def _norm_path(path: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ URL –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ñ–∏—Å–æ–≤"""
    if not path:
        return "/"
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    decoded = unquote(path)
    
    # –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    decoded = decoded.replace('‚Äî', '-').replace('‚Äì', '-')  # —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å
    decoded = re.sub(r'/+', '/', decoded)                   # // ‚Üí /
    decoded = re.sub(r'\s*-\s*', '-', decoded)             # –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–µ—Ñ–∏—Å–∞
    
    # –í–ê–ñ–ù–û: –ù–ï —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã! –ù–ï –∑–∞–º–µ–Ω—è–µ–º [^a-z0-9-]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
    parts = [seg for seg in decoded.split("/") if seg]
    safe = "/" + "/".join(quote(seg, safe='-._~') for seg in parts)
    
    return safe or "/"

def to_canonical_pair(ua_url: str) -> Tuple[str, Dict[str, str]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ UA URL –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫—É—é –ø–∞—Ä—É (slug, {ua, ru})"""
    try:
        ua_url = _fix_scheme(ua_url)
        ua_url = _fix_path_issues(ua_url)
        u = urlparse(ua_url)
        path = _norm_path(u.path)
        ua = urlunparse(("https", HOST, path, "", "", ""))
        ru = urlunparse(("https", HOST, "/ru" + (path if path.startswith("/") else "/" + path), "", "", ""))
        slug = path  # –±–µ–∑ /ru
        return slug, {"ua": ua, "ru": ru}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL {ua_url}: {e}")
        return ua_url, {"ua": ua_url, "ru": ua_url}

def validate_url(url: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
    try:
        fixed_url = _fix_scheme(url)
        parsed = urlparse(fixed_url)
        return (
            parsed.scheme in ['http', 'https'] and
            parsed.netloc == HOST
        )
    except Exception:
        return False

def get_canonical_slug(url: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ slug –∏–∑ URL"""
    try:
        parsed = urlparse(url)
        path = parsed.path
        
        # –£–±–∏—Ä–∞–µ–º /ru/ –µ—Å–ª–∏ –µ—Å—Ç—å
        if path.startswith('/ru/'):
            path = path[4:]  # –£–±–∏—Ä–∞–µ–º '/ru/'
        
        return path or '/'
    except Exception:
        return url
