"""
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM –ø—Ä–∏ —Å–±–æ—è—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π recovery –º–µ—Ö–∞–Ω–∏–∑–º –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞
"""
import json
import logging
from typing import Dict, List, Optional, Any
import re

logger = logging.getLogger(__name__)

class LLMRecovery:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM –ø—Ä–∏ —Å–±–æ—è—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self, llm_client=None):
        self.llm = llm_client
        self.model = "gpt-4o-mini"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    
    async def extract_characteristics_from_raw_html(
        self, 
        html: str, 
        product_name: str
    ) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ LLM –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        
        try:
            logger.info(f"ü§ñ LLM Recovery: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è '{product_name}'")
            
            # –û–±—Ä–µ–∑–∞–µ–º HTML –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            html_sample = html[:3000] if len(html) > 3000 else html
            
            prompt = f"""–ò–∑–≤–ª–µ–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ HTML.

–¢–û–í–ê–†: {product_name}

HTML (–ø–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤):
{html_sample}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–∞–π–¥–∏ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ HTML
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ö–∞–∂–¥–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {{"label": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "value": "–∑–Ω–∞—á–µ–Ω–∏–µ"}}
- –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
[
  {{"label": "–¢–∏–ø –∫–æ–∂–∏", "value": "–ñ–∏—Ä–Ω–∞—è, –°—É—Ö–∞—è"}},
  {{"label": "–û–±—ä–µ–º", "value": "30 –º–ª"}}
]"""

            response = await self._call_llm(prompt)
            characteristics = self._parse_characteristics_response(response)
            
            logger.info(f"‚úÖ LLM Recovery: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(characteristics)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            return characteristics
            
        except Exception as e:
            logger.error(f"‚ùå LLM Recovery: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            return []
    
    async def find_image_from_raw_html(
        self, 
        html: str, 
        product_name: str
    ) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        
        try:
            logger.info(f"ü§ñ LLM Recovery: –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{product_name}'")
            
            # –û–±—Ä–µ–∑–∞–µ–º HTML –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            html_sample = html[:2000] if len(html) > 2000 else html
            
            prompt = f"""–ù–∞–π–¥–∏ URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ HTML.

–¢–û–í–ê–†: {product_name}

HTML (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):
{html_sample}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–∞–π–¥–∏ URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û URL –∏–ª–∏ "NOT_FOUND"
- –ò—â–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö src, data-src, data-lazy-src
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (600x600, 800x800)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û URL):
https://example.com/image.jpg

–ò–õ–ò –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:
NOT_FOUND"""

            response = await self._call_llm(prompt)
            image_url = self._parse_image_response(response)
            
            if image_url:
                logger.info(f"‚úÖ LLM Recovery: –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            else:
                logger.warning(f"‚ö†Ô∏è LLM Recovery: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            return image_url
            
        except Exception as e:
            logger.error(f"‚ùå LLM Recovery: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    async def extract_title_from_raw_html(
        self, 
        html: str
    ) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ LLM"""
        
        try:
            logger.info(f"ü§ñ LLM Recovery: –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            
            html_sample = html[:1500] if len(html) > 1500 else html
            
            prompt = f"""–ù–∞–π–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ HTML.

HTML (–ø–µ—Ä–≤—ã–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤):
{html_sample}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–∞–π–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–±—ã—á–Ω–æ –≤ h1, h2, title)
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ "NOT_FOUND"

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ):
–ü–∏–ª–∏–Ω–≥ —Å–∞–ª–∏—Ü–∏–ª–æ–≤—ã–π 20% —Ä–ù 2.8 Esti Professional, 30 –º–ª"""

            response = await self._call_llm(prompt)
            title = self._parse_title_response(response)
            
            if title:
                logger.info(f"‚úÖ LLM Recovery: –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{title}'")
            else:
                logger.warning(f"‚ö†Ô∏è LLM Recovery: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            return title
            
        except Exception as e:
            logger.error(f"‚ùå LLM Recovery: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
            return None
    
    async def fix_language_issues(
        self, 
        characteristics: List[Dict[str, str]], 
        target_locale: str = 'ru'
    ) -> List[Dict[str, str]]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º —á–µ—Ä–µ–∑ LLM"""
        
        try:
            logger.info(f"ü§ñ LLM Recovery: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è {target_locale}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç
            chars_text = "\n".join([
                f"- {char.get('label', '')}: {char.get('value', '')}"
                for char in characteristics
            ])
            
            locale_name = "—Ä—É—Å—Å–∫–∏–π" if target_locale == 'ru' else "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π"
            
            prompt = f"""–ò—Å–ø—Ä–∞–≤—å —è–∑—ã–∫–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞.

–¶–ï–õ–ï–í–û–ô –Ø–ó–´–ö: {locale_name}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
{chars_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ü–µ—Ä–µ–≤–µ–¥–∏ –≤—Å–µ –Ω–∞ {locale_name} —è–∑—ã–∫
- –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ —è–∑—ã–∫–∞
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
[
  {{"label": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞", "value": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ"}}
]"""

            response = await self._call_llm(prompt)
            fixed_characteristics = self._parse_characteristics_response(response)
            
            logger.info(f"‚úÖ LLM Recovery: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {len(fixed_characteristics)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            return fixed_characteristics
            
        except Exception as e:
            logger.error(f"‚ùå LLM Recovery: –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            return characteristics  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def generate_fallback_content(
        self, 
        product_name: str, 
        characteristics: List[Dict[str, str]], 
        locale: str = 'ru'
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ LLM –µ—Å–ª–∏ –æ–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"""
        
        try:
            logger.info(f"ü§ñ LLM Recovery: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è '{product_name}'")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç
            chars_text = "\n".join([
                f"- {char.get('label', '')}: {char.get('value', '')}"
                for char in characteristics[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
            ])
            
            locale_name = "—Ä—É—Å—Å–∫–æ–º" if locale == 'ru' else "—É–∫—Ä–∞–∏–Ω—Å–∫–æ–º"
            
            prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ {locale_name} —è–∑—ã–∫–µ.

–¢–û–í–ê–†: {product_name}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
{chars_text}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ù–ê–†–£–®–ï–ù–ò–ï –í–õ–ï–ß–ï–¢ –û–®–ò–ë–ö–£:
- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã: "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä", "–∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "—è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç"
- –ó–ê–ü–†–ï–©–ï–ù–û —É–ø–æ–º–∏–Ω–∞—Ç—å: —Ü–µ–Ω—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å, UAH, –≥—Ä–Ω, –¥–æ—Å—Ç–∞–≤–∫—É, –º–∞–≥–∞–∑–∏–Ω, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
- –û–ø–∏—Å–∞–Ω–∏–µ –î–û–õ–ñ–ù–û —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
- –ü–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–û: –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏/–≤–æ–ª–æ—Å, –∫–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –°–æ–∑–¥–∞–π 5 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
- –°–æ–∑–¥–∞–π 6 FAQ
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
{{
  "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
  "advantages": ["–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", ...],
  "faq": [
    {{"question": "–≤–æ–ø—Ä–æ—Å 1", "answer": "–æ—Ç–≤–µ—Ç 1"}},
    {{"question": "–≤–æ–ø—Ä–æ—Å 2", "answer": "–æ—Ç–≤–µ—Ç 2"}}
  ]
}}"""

            response = await self._call_llm(prompt)
            content = self._parse_content_response(response)
            
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            from src.validation.content_validator import ContentValidator
            validator = ContentValidator()
            
            if not validator.validate_all_content(content, locale):
                logger.error("‚ùå LLM Recovery: fallback –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                return {
                    "description": f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ {product_name} –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.",
                    "advantages": ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–£–¥–æ–±–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"],
                    "faq": [
                        {"question": "–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä?", "answer": "–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."},
                        {"question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", "answer": "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è."}
                    ]
                }
            
            logger.info(f"‚úÖ LLM Recovery: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
            return content
            
        except Exception as e:
            logger.error(f"‚ùå LLM Recovery: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {}
    
    async def _call_llm(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenAI –∏ Anthropic)"""
        if not self.llm:
            raise Exception("LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
            client_type = type(self.llm).__name__
            
            if client_type == "Anthropic":
                # Claude API
                system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º."
                full_prompt = f"{system_prompt}\n\n{prompt}"
                
                response = self.llm.messages.create(
                    model=self.model,
                    max_tokens=2000,
                    temperature=0.3,
                    messages=[
                        {"role": "user", "content": full_prompt}
                    ]
                )
                
                return response.content[0].text.strip()
                
            else:
                # OpenAI API
                response = self.llm.chat.completions.create(
                    model=self.model,
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=2000
                )
                
                return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM ({client_type}): {e}")
            raise
    
    def _parse_characteristics_response(self, response: str) -> List[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\[.*?\]', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                characteristics = json.loads(json_str)
                
                if isinstance(characteristics, list):
                    return characteristics
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {response[:200]}")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            return []
    
    def _parse_image_response(self, response: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        response = response.strip()
        
        if response == "NOT_FOUND" or not response:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL
        if response.startswith(('http://', 'https://')):
            return response
        
        return None
    
    def _parse_title_response(self, response: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        response = response.strip()
        
        if response == "NOT_FOUND" or not response:
            return None
        
        # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
        if response and len(response) > 0:
            response = response[0].upper() + response[1:]
        
        return response
    
    def _parse_content_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*?\}', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                content = json.loads(json_str)
                
                if isinstance(content, dict):
                    return content
            
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {response[:200]}")
            return {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {}
