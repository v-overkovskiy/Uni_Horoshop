"""
–î–≤–∏–∂–æ–∫ —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
"""
import logging
import asyncio
from typing import Dict, List, Any, Optional
from src.llm.content_generator import LLMContentGenerator
from src.fetcher.fallback_fetcher import FallbackFetcher
from src.core.two_pass_processor import TwoPassProcessor
from src.processing.conditional_exporter import ConditionalExporter
from src.repair.diagnostic_engine import DiagnosticEngine

logger = logging.getLogger(__name__)

class RepairEngine:
    """–î–≤–∏–∂–æ–∫ —Ä–µ–º–æ–Ω—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π"""
    
    def __init__(self, llm_budget: int = 3):
        self.llm_budget = llm_budget
        self.diagnostic_engine = DiagnosticEngine()
        self.llm_generator = LLMContentGenerator()
        self.repair_results = []
    
    async def repair_failed_locales(self, repair_report_path: str, urls: List[str]) -> Dict[str, Any]:
        """
        –†–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª–∏ –∏–∑ repair_report
        """
        logger.info(f"üîß –ó–∞–ø—É—Å–∫ —Ä–µ–º–æ–Ω—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π")
        logger.info(f"üí∞ –ë—é–¥–∂–µ—Ç LLM: {self.llm_budget} –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        diagnosis = self.diagnostic_engine.batch_diagnose_repair_report(repair_report_path)
        logger.info(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {diagnosis}")
        
        repair_stats = {
            'total_urls': len(urls),
            'repaired_urls': 0,
            'failed_urls': 0,
            'llm_calls_used': 0,
            'repair_results': []
        }
        
        for url in urls:
            logger.info(f"üîß –†–µ–º–æ–Ω—Ç URL: {url}")
            
            try:
                # –†–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ª–æ–∫–∞–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
                ru_result = await self._repair_locale(url, 'ru')
                ua_result = await self._repair_locale(url, 'ua')
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                combined_result = self._combine_locale_results(url, ru_result, ua_result)
                repair_stats['repair_results'].append(combined_result)
                
                if combined_result['both_valid']:
                    repair_stats['repaired_urls'] += 1
                    logger.info(f"‚úÖ –†–µ–º–æ–Ω—Ç —É—Å–ø–µ—à–µ–Ω: {url}")
                else:
                    repair_stats['failed_urls'] += 1
                    logger.warning(f"‚ùå –†–µ–º–æ–Ω—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {url}")
                
                repair_stats['llm_calls_used'] += ru_result.get('llm_calls', 0) + ua_result.get('llm_calls', 0)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ {url}: {e}")
                repair_stats['failed_urls'] += 1
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞: {repair_stats}")
        return repair_stats
    
    async def _repair_locale(self, url: str, locale: str) -> Dict[str, Any]:
        """
        –†–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–æ–∫–∞–ª—å –¥–ª—è URL
        """
        logger.info(f"üîß –†–µ–º–æ–Ω—Ç {locale} –¥–ª—è {url}")
        
        result = {
            'locale': locale,
            'success': False,
            'llm_calls': 0,
            'error': None,
            'content': None
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –¥–ª—è –ª–æ–∫–∞–ª–∏
            async with FallbackFetcher(timeout=15, retries=2) as fetcher:
                html = await fetcher.fetch_single(url, locale)
                
                if not html:
                    result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML –¥–ª—è {locale}"
                    return result
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                from src.processing.safe_facts import SafeFactsExtractor
                from src.adapters.horoshop_pro_razko_v1 import HoroshopProRazkoV1
                
                # –ü–∞—Ä—Å–∏–º HTML —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
                adapter = HoroshopProRazkoV1()
                parsed_data = adapter.parse(html, url)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                extractor = SafeFactsExtractor()
                product_data = extractor.extract_safe_facts(
                    parsed_data.specs,
                    parsed_data.h1,
                    [],  # mass_facts - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    []   # volume_facts - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
                llm_content = self.llm_generator.generate_content(product_data, locale)
                result['llm_calls'] += 1
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                content = self._build_full_content_structure(llm_content, parsed_data, locale)
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                diagnosis = self.diagnostic_engine.diagnose_content(content, locale)
                
                if diagnosis['status'] == 'valid':
                    result['success'] = True
                    result['content'] = content
                    logger.info(f"‚úÖ {locale} –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω")
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    logger.warning(f"‚ö†Ô∏è {locale} –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {diagnosis['first_failing_guard']}")
                    
                    # –û–¥–∏–Ω —Ä–µ—Ç—Ä–∞–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                    if result['llm_calls'] < self.llm_budget:
                        try:
                            fixed_content = self._fix_content(content, diagnosis, product_data, locale)
                            result['llm_calls'] += 1
                            
                            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                            fixed_diagnosis = self.diagnostic_engine.diagnose_content(fixed_content, locale)
                            
                            if fixed_diagnosis['status'] == 'valid':
                                result['success'] = True
                                result['content'] = fixed_content
                                logger.info(f"‚úÖ {locale} –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                            else:
                                result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å {locale}: {fixed_diagnosis['first_failing_guard']}"
                        except Exception as fix_e:
                            result['error'] = f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {locale}: {fix_e}"
                    else:
                        result['error'] = f"–ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç LLM –¥–ª—è {locale}"
                
        except Exception as e:
            result['error'] = f"–û—à–∏–±–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ {locale}: {e}"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ {locale} –¥–ª—è {url}: {e}")
        
        return result
    
    def _fix_content(self, content: Dict[str, Any], diagnosis: Dict[str, Any], product_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        guard_name = diagnosis['first_failing_guard']
        
        if guard_name == 'FAQ':
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º FAQ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ 6 Q&A
            content['faq'] = self._generate_fixed_faq(product_data, locale)
        elif guard_name == 'DESCRIPTION':
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2√ó3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            content['description'] = self._generate_fixed_description(product_data, locale)
        elif guard_name == 'SPECS_RANGE':
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3-8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            content['specs'] = self._generate_fixed_specs(product_data, locale)
        elif guard_name == 'PLACEHOLDER':
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            content = self._remove_placeholders(content, product_data, locale)
        elif guard_name == 'LOCALE':
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π
            content = self._fix_locale_mixing(content, locale)
        
        return content
    
    def _generate_fixed_faq(self, product_data: Dict[str, Any], locale: str) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π FAQ"""
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 6 Q&A –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        faq = []
        for i in range(6):
            faq.append({
                'question': f"–í–æ–ø—Ä–æ—Å {i+1} –æ –ø—Ä–æ–¥—É–∫—Ç–µ",
                'answer': f"–û—Ç–≤–µ—Ç {i+1} –æ –ø—Ä–æ–¥—É–∫—Ç–µ"
            })
        return faq
    
    def _generate_fixed_description(self, product_data: Dict[str, Any], locale: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ 2√ó3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if locale == 'ru':
            return "–≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏. –û–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–ª–∞–¥–∫–æ—Å—Ç—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –õ–µ–≥–∫–æ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –∏ —É–¥–∞–ª—è–µ—Ç—Å—è. –ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        else:
            return "–¶–µ —è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ–ø—ñ–ª—è—Ü—ñ—ó. –í—ñ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏. –ó–∞–±–µ–∑–ø–µ—á—É—î –≥–ª–∞–¥–∫—ñ—Å—Ç—å –Ω–∞ –¥–æ–≤–≥–∏–π —á–∞—Å. –õ–µ–≥–∫–æ –Ω–∞–Ω–æ—Å–∏—Ç—å—Å—è —Ç–∞ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è. –ù–µ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ–¥—Ä–∞–∑–Ω–µ–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."
    
    def _generate_fixed_specs(self, product_data: Dict[str, Any], locale: str) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        specs = []
        for i in range(5):  # 5 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            specs.append({
                'name': f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ {i+1}",
                'value': f"–ó–Ω–∞—á–µ–Ω–∏–µ {i+1}"
            })
        return specs
    
    def _remove_placeholders(self, content: Dict[str, Any], product_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–£–±–∏—Ä–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if not content.get('description') or content['description'].strip() in ['.', '...', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ']:
            content['description'] = self._generate_fixed_description(product_data, locale)
        
        if not content.get('note_buy') or '<strong>–∫—É–ø–∏—Ç–∏ </strong>' in content['note_buy']:
            content['note_buy'] = f"<strong>–∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä</strong> –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ" if locale == 'ua' else f"<strong>–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä</strong> –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"
        
        return content
    
    def _fix_locale_mixing(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ RU —Å–ª–æ–≤ –Ω–∞ UA –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        if locale == 'ua':
            # –ó–∞–º–µ–Ω—è–µ–º RU —Å–ª–æ–≤–∞ –Ω–∞ UA
            content['description'] = content['description'].replace('–ì–æ—Ä—è—á–∏–π', '–ì–∞—Ä—è—á–∏–π')
            content['description'] = content['description'].replace('–õ–∏—Ü–µ', '–û–±–ª–∏—á—á—è')
        else:
            # –ó–∞–º–µ–Ω—è–µ–º UA —Å–ª–æ–≤–∞ –Ω–∞ RU
            content['description'] = content['description'].replace('–ì–∞—Ä—è—á–∏–π', '–ì–æ—Ä—è—á–∏–π')
            content['description'] = content['description'].replace('–û–±–ª–∏—á—á—è', '–õ–∏—Ü–µ')
        
        return content
    
    def _build_full_content_structure(self, llm_content: Dict[str, Any], parsed_data, locale: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º note_buy —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
        from src.morph.case_engine import decline_title_for_buy
        
        title = parsed_data.h1
        declined_title = decline_title_for_buy(title, locale)
        
        if locale == 'ua':
            note_buy = f"<strong>–∫—É–ø–∏—Ç–∏ {declined_title}</strong> –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ"
        else:
            note_buy = f"<strong>–∫—É–ø–∏—Ç—å {declined_title}</strong> –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"
        
        # –°–æ–∑–¥–∞–µ–º hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        hero = {
            'url': parsed_data.hero.get('url', '') if parsed_data.hero else '',
            'alt': f"{title} ‚Äî –∫—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –£–∫—Ä–∞–∏–Ω–µ" if locale == 'ru' else f"{title} ‚Äî –∫—É–ø–∏—Ç–∏ –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –ø–æ –£–∫—Ä–∞—ó–Ω—ñ"
        }
        
        return {
            'title': title,  # –¥–ª—è structure_guard
            'description': llm_content.get('description', ''),
            'note_buy': note_buy,
            'faq': llm_content.get('faq', []),
            'specs': llm_content.get('specs', []),
            'advantages': llm_content.get('advantages', []),
            'hero': hero,
            'h1': title,  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'locale': locale
        }
    
    def _combine_locale_results(self, url: str, ru_result: Dict[str, Any], ua_result: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–º–æ–Ω—Ç–∞ RU –∏ UA –ª–æ–∫–∞–ª–µ–π"""
        return {
            'url': url,
            'ru_success': ru_result['success'],
            'ua_success': ua_result['success'],
            'both_valid': ru_result['success'] and ua_result['success'],
            'ru_content': ru_result.get('content'),
            'ua_content': ua_result.get('content'),
            'total_llm_calls': ru_result.get('llm_calls', 0) + ua_result.get('llm_calls', 0),
            'ru_error': ru_result.get('error'),
            'ua_error': ua_result.get('error')
        }
