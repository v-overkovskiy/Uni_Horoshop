"""
Repair Runner - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞
"""
import logging
from typing import Dict, List, Any, Optional
from src.repair.repair_queue import RepairQueue, RepairItem, RepairReason
from src.repair.sanity_fixer import SanityFixer

logger = logging.getLogger(__name__)

class RepairRunner:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞"""
    
    def __init__(self, conditional_exporter):
        self.conditional_exporter = conditional_exporter
        self.sanity_fixer = SanityFixer()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.repair_stats = {
            'processed': 0,
            'successful': 0,
            'failed': 0,
            'sanity_fixes_applied': 0,
            'llm_specs_localized_count': 0,
            'deterministic_specs_drop_count': 0,
            'reasons': {}
        }
    
    def run_repairs(self, repair_queue: RepairQueue) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞
        
        Args:
            repair_queue: –û—á–µ—Ä–µ–¥—å —Ä–µ–º–æ–Ω—Ç–∞
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not repair_queue.has_pending_items():
            logger.info("üîß –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞")
            return self.repair_stats
        
        pending_items = repair_queue.get_pending_items()
        initial_queue_length = len(pending_items)
        logger.info(f"üîß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞: {initial_queue_length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.initial_queue_length = initial_queue_length
        
        for item in pending_items:
            try:
                self._process_repair_item(item, repair_queue)
                self.repair_stats['processed'] += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞ {item.url}: {e}")
                repair_queue.mark_failed(item, str(e))
                self.repair_stats['failed'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏—á–∏–Ω
        self._update_reason_stats(repair_queue)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.repair_stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        self._validate_repair_completion(repair_queue)
        
        return self.repair_stats
    
    def _process_repair_item(self, item: RepairItem, repair_queue: RepairQueue) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–º–æ–Ω—Ç–∞"""
        logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞: {item.url} (–ª–æ–∫–∞–ª—å: {item.failing_locale}, –ø—Ä–∏—á–∏–Ω–∞: {item.reason.value})")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–∫—Å
        if item.reason == RepairReason.DESC_TOO_SHORT:
            repaired_result = self._fix_description(item)
        elif item.reason == RepairReason.VOLUME_CONFLICT:
            repaired_result = self._fix_volume_conflict(item)
        elif item.reason == RepairReason.MASS_CONFLICT:
            repaired_result = self._fix_mass_conflict(item)
        elif item.reason == RepairReason.LOCALE_MIXING:
            repaired_result = self._fix_locale_mixing(item)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–∏—á–∏–Ω –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ–∏–∫—Å
            repaired_result = self._fix_generic(item)
        
        # –í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ sanity-—Ñ–∏–∫—Å–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞
        if repaired_result.get('sanity_fix_applied'):
            self.repair_stats['sanity_fixes_applied'] += 1
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞
        if repaired_result.get('llm_specs_localized'):
            self.repair_stats['llm_specs_localized_count'] += 1
        if repaired_result.get('deterministic_specs_dropped'):
            self.repair_stats['deterministic_specs_drop_count'] += 1
        
        if repaired_result['success']:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self._validate_repaired_result(repaired_result, item):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ
                self._update_exporter_result(item, repaired_result)
                repair_queue.mark_completed(item, repaired_result)
                self.repair_stats['successful'] += 1
                
                logger.info(f"‚úÖ –†–µ–º–æ–Ω—Ç —É—Å–ø–µ—à–µ–Ω: {item.url} (–ª–æ–∫–∞–ª—å: {item.failing_locale})")
            else:
                logger.error(f"‚ùå –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {item.url}")
                repair_queue.mark_failed(item, "validation_failed_after_repair")
                self.repair_stats['failed'] += 1
        else:
            logger.error(f"‚ùå –†–µ–º–æ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è: {item.url} - {repaired_result.get('reason', 'unknown')}")
            repair_queue.mark_failed(item, repaired_result.get('reason', 'unknown'))
            self.repair_stats['failed'] += 1
    
    def _fix_description(self, item: RepairItem) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–∏–∫–ª –¥–æ-—Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ LLM-–¥–æ–∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        logger.info(f"üîß –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–æ-—Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è {item.failing_locale}")
        
        original_content = item.original_result
        current_content = original_content.copy()
        previous_attempts = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–º–æ–Ω—Ç–µ
        preserved_fields = {
            'title': current_content.get('title', ''),  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'note_buy': current_content.get('note_buy', ''),
            'faq': current_content.get('faq', []),
            'specs': current_content.get('specs', []),
            'advantages': current_content.get('advantages', []),
            'steps': current_content.get('steps', [])
        }
        
        # –î–ª—è UA –¥–µ–ª–∞–µ–º –¥–æ 4 –ø–æ–ø—ã—Ç–æ–∫ (2 LLM + 2 sanity-—Ñ–∏–∫—Å), –¥–ª—è RU - –¥–æ 3
        max_attempts = 4 if item.failing_locale == 'ua' else 3
        
        # –¶–∏–∫–ª –¥–æ max_attempts –ø–æ–ø—ã—Ç–æ–∫ LLM + sanity-—Ñ–∏–∫—Å
        for attempt in range(max_attempts):
            logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} —Ü–∏–∫–ª–∞ –¥–æ-—Ä–µ–º–æ–Ω—Ç–∞")
            
            current_description = current_content.get('description', '')
            current_sentences = self.sanity_fixer._count_sentences(current_description)
            current_chars = len(current_description.strip())
            
            logger.info(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_sentences} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {current_chars} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            if current_sentences >= 5 and current_chars >= 450:
                logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                break
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ LLM-–ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            if attempt == 0 or len(previous_attempts) > 0:
                # –ü–æ–ø—ã—Ç–∫–∞ LLM-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                logger.info(f"üîß LLM-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
                product_data = {
                    'url': item.url,
                    'title': current_content.get('title', ''),
                    'specs': current_content.get('specs', [])
                }
                
                llm_result = self.sanity_fixer.generate_strict_description_with_llm(
                    product_data, item.failing_locale, previous_attempts
                )
                
                if llm_result['success']:
                    logger.info(f"‚úÖ LLM-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {llm_result['sentences']} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {llm_result['chars']} —Å–∏–º–≤–æ–ª–æ–≤")
                    current_content['description'] = llm_result['description']
                    previous_attempts.append(llm_result['description'])
                    continue
                else:
                    logger.warning(f"‚ö†Ô∏è LLM-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {llm_result.get('reason', 'unknown')}")
                    if llm_result.get('description'):
                        previous_attempts.append(llm_result['description'])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º sanity-—Ñ–∏–∫—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ sanity-—Ñ–∏–∫—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            
            # –°–Ω–∞—á–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            sentences_result = self.sanity_fixer.ensure_min_sentences(
                current_description, item.failing_locale, target=5
            )
            
            if sentences_result['success']:
                current_content['description'] = sentences_result['fixed_description']
                current_description = sentences_result['fixed_description']
            
            # –ó–∞—Ç–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            chars_result = self.sanity_fixer.ensure_min_chars(
                current_description, item.failing_locale, target=450
            )
            
            if chars_result['success']:
                current_content['description'] = chars_result['fixed_description']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç/–∫–æ—Ä–æ—Ç–∫–∏–π (–¥–ª—è UA –∏ RU)
        current_content = self.sanity_fixer.normalize_title(
            current_content, item.failing_locale, {'url': item.url}
        )
        
        # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ —Ä–µ–º–æ–Ω—Ç–µ
        for field_name, field_value in preserved_fields.items():
            if field_name not in current_content or not current_content[field_name]:
                if field_value:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                    current_content[field_name] = field_value
                    logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {field_name} –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞")
        
        # –ï—Å–ª–∏ note_buy –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
        if not current_content.get('note_buy') or len(current_content.get('note_buy', '').strip()) < 20:
            logger.warning(f"‚ö†Ô∏è Note_buy –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ")
            try:
                from src.processing.enhanced_note_buy_generator import EnhancedNoteBuyGenerator
                note_buy_generator = EnhancedNoteBuyGenerator()
                note_buy_result = note_buy_generator.generate_enhanced_note_buy(
                    current_content.get('title', ''), item.failing_locale
                )
                if note_buy_result['content']:
                    current_content['note_buy'] = note_buy_result['content']
                    logger.info(f"‚úÖ Note_buy —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ: {note_buy_result['content'][:50]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ note_buy: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_description = current_content.get('description', '')
        final_sentences = self.sanity_fixer._count_sentences(final_description)
        final_chars = len(final_description.strip())
        final_title = current_content.get('title', '')
        final_note_buy = current_content.get('note_buy', '')
        
        logger.info(f"üîç –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_sentences} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {final_chars} —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–æ–ª–æ–≤–æ–∫: {len(final_title)} —Å–∏–º–≤–æ–ª–æ–≤, note_buy: {len(final_note_buy)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if final_sentences >= 5 and final_chars >= 450 and len(final_title.strip()) >= 10 and len(final_note_buy.strip()) >= 20:
            logger.info(f"‚úÖ –¶–∏–∫–ª –¥–æ-—Ä–µ–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–µ–Ω")
            current_content['sanity_fix_applied'] = True
            current_content['sanity_fix_details'] = {
                'attempts_made': len(previous_attempts) + 1,
                'final_sentences': final_sentences,
                'final_chars': final_chars,
                'reason': 'desc_too_short_cycle'
            }
            
            return {
                'success': True,
                'repaired_content': current_content,
                'sanity_fix_applied': True,
                'fix_type': 'description_repair_cycle',
                'attempts_made': len(previous_attempts) + 1
            }
        else:
            logger.error(f"‚ùå –¶–∏–∫–ª –¥–æ-—Ä–µ–º–æ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏: {final_sentences} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {final_chars} —Å–∏–º–≤–æ–ª–æ–≤")
            return {
                'success': False,
                'reason': 'repair_cycle_failed',
                'fix_type': 'description_repair_cycle',
                'attempts_made': len(previous_attempts) + 1,
                'final_state': {
                    'sentences': final_sentences,
                    'chars': final_chars,
                    'title_length': len(final_title.strip())
                }
            }
    
    def _fix_volume_conflict(self, item: RepairItem) -> Dict[str, Any]:
        """–§–∏–∫—Å–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –î–ª—è volume_conflict –ø—Ä–∏–º–µ–Ω—è–µ–º sanity-—Ñ–∏–∫—Å –æ–ø–∏—Å–∞–Ω–∏—è
        # —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—ã—á–Ω–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö —á–∏—Å–µ–ª
        return self._fix_description(item)
    
    def _fix_mass_conflict(self, item: RepairItem) -> Dict[str, Any]:
        """–§–∏–∫—Å–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–∞—Å—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ volume_conflict
        return self._fix_description(item)
    
    def _fix_locale_mixing(self, item: RepairItem) -> Dict[str, Any]:
        """–§–∏–∫—Å–∏—Ç —Å–º–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π"""
        logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è locale_mixing –≤ {item.failing_locale}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ LLM
        specs = item.original_result.get('specs', [])
        if specs:
            normalize_result = self.sanity_fixer.deterministic_specs_normalize(specs, item.failing_locale)
            
            if normalize_result['success']:
                logger.info(f"‚úÖ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π —É—Å–ø–µ—à–Ω–∞")
                repaired_content = item.original_result.copy()
                repaired_content['specs'] = normalize_result['normalized_specs']
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                url = item.url.lower()
                is_service_product = any(word in url for word in ['ochysnyk', 'ochistitel', 'cleaner'])
                
                if is_service_product and item.failing_locale == 'ru':
                    product_data = {'url': item.url, 'title': item.original_result.get('title', '')}
                    repaired_content = self.sanity_fixer.apply_service_product_fix(
                        repaired_content, item.failing_locale, product_data
                    )
                
                return {
                    'success': True,
                    'repaired_content': repaired_content,
                    'sanity_fix_applied': True,
                    'fix_type': 'deterministic_specs_normalize',
                    'deterministic_specs_normalized': True,
                    'fixed_count': normalize_result.get('fixed_count', 0),
                    'dropped_count': normalize_result.get('dropped_count', 0)
                }
            else:
                logger.warning(f"‚ö†Ô∏è –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {normalize_result['reason']}")
        
        # Fallback: –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥—Ä–æ–ø –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
        logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ fallback")
        repaired_content = item.original_result.copy()
        repaired_content['specs'] = self.sanity_fixer.deterministic_specs_drop(
            specs, item.failing_locale
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        url = item.url.lower()
        is_service_product = any(word in url for word in ['ochysnyk', 'ochistitel', 'cleaner'])
        
        if is_service_product and item.failing_locale == 'ru':
            product_data = {'url': item.url, 'title': item.original_result.get('title', '')}
            repaired_content = self.sanity_fixer.apply_service_product_fix(
                repaired_content, item.failing_locale, product_data
            )
        
        return {
            'success': True,
            'repaired_content': repaired_content,
            'sanity_fix_applied': True,
            'fix_type': 'deterministic_specs_drop',
            'deterministic_specs_dropped': True
        }
    
    def _fix_generic(self, item: RepairItem) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±—â–∏–π —Ñ–∏–∫—Å –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å sanity-—Ñ–∏–∫—Å –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        return self._fix_description(item)
    
    def _validate_repaired_result(self, repaired_result: Dict[str, Any], item: RepairItem) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            repaired_content = repaired_result['repaired_content']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ guards
            from src.validation.guards import (
                description_guard, specs_guard, locale_title_guard, 
                faq_guard, anti_placeholders_guard, note_buy_guard
            )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            description = repaired_content.get('description', '')
            if not description or len(description.strip()) < 100:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            sentences = self.sanity_fixer._count_sentences(description)
            if sentences < 4:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sentences}")
                return False
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            specs = repaired_content.get('specs', [])
            if not specs or len(specs) < 3:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(specs)}")
                return False
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = repaired_content.get('title', '')
            if not title or len(title.strip()) < 10:
                logger.warning(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(title)} —Å–∏–º–≤–æ–ª–æ–≤")
                return False
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è note_buy
            note_buy = repaired_content.get('note_buy', '')
            if not note_buy or len(note_buy.strip()) < 20:
                logger.warning(f"‚ö†Ô∏è Note_buy —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(note_buy)} —Å–∏–º–≤–æ–ª–æ–≤")
                return False
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è note_buy —á–µ—Ä–µ–∑ guard
            try:
                note_buy_guard(note_buy, item.failing_locale)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Note_buy –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {e}")
                return False
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è FAQ
            faq = repaired_content.get('faq', [])
            if not faq or len(faq) < 4:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FAQ: {len(faq)}")
                return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            if repaired_result.get('fix_type') == 'service_product_fix':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è
                if '–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å' not in title.lower() and '–æ—á–∏—Å–Ω–∏–∫' not in title.lower():
                    logger.warning(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è: {title}")
                    return False
            
            logger.info(f"‚úÖ –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {sentences} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
    
    def _update_exporter_result(self, item: RepairItem, repaired_result: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ"""
        try:
            repaired_content = repaired_result['repaired_content']
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            updated_result = {
                'url': item.url,
                'input_index': item.input_index,
                'failing_locale': item.failing_locale,
                'repair_applied': True,
                'repair_reason': item.reason.value,
                'sanity_fix_applied': repaired_result.get('sanity_fix_applied', False),
                'repaired_content': repaired_content
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–º–æ–Ω—Ç–µ –≤ Issues
            if item.failing_locale == 'ru':
                issues_key = 'RU_Issues'
            else:
                issues_key = 'UA_Issues'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è Issues
            fix_type = repaired_result.get('fix_type', '')
            repair_info_parts = []
            
            if fix_type == 'llm_specs_localization':
                repair_info_parts.append("repair: specs_localized_llm")
            elif fix_type == 'deterministic_specs_drop':
                repair_info_parts.append("repair: specs_dropped_deterministic")
            elif fix_type == 'service_product_fix':
                repair_info_parts.append("repair: title_sanitized_safe_constructor")
            else:
                repair_info_parts.append("repair: sanity_fix(desc_len<4 after number_sanitize)")
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            repair_info = " + ".join(repair_info_parts)
            updated_result[issues_key] = repair_info
            
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            from src.processing.fragment_renderer import ProductFragmentRenderer
            fragment_renderer = ProductFragmentRenderer()
            
            # –°–æ–∑–¥–∞–µ–º safe_blocks —Å –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            safe_blocks = {
                'title': repaired_content.get('title', ''),
                'description': repaired_content.get('description', ''),
                'specs': repaired_content.get('specs', []),
                'note_buy': repaired_content.get('note_buy', ''),
                'faq': repaired_content.get('faq', []),
                'faq_data': repaired_content.get('faq', [])
            }
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ specs - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if safe_blocks['specs'] and isinstance(safe_blocks['specs'][0], list):
                # –ï—Å–ª–∏ specs —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
                fixed_specs = []
                for spec in safe_blocks['specs']:
                    if isinstance(spec, list) and len(spec) >= 2:
                        fixed_specs.append({'name': spec[0], 'value': spec[1]})
                    elif isinstance(spec, dict):
                        fixed_specs.append(spec)
                safe_blocks['specs'] = fixed_specs
            
            repaired_html = fragment_renderer.render_product_fragment(safe_blocks, item.failing_locale)
            
            # –û—á–∏—â–∞–µ–º HTML –æ—Ç inline-—Å—Ç–∏–ª–µ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-LD
            repaired_html = fragment_renderer.clean_html(repaired_html)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ
            self.conditional_exporter.upsert_repair_result(
                input_index=item.input_index,
                repaired_result={
                    'failing_locale': item.failing_locale,
                    'repaired_html': repaired_html,
                    'issues': repair_info,
                    'repair_reason': item.reason.value
                }
            )
            
            logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ –¥–ª—è {item.url} (–ª–æ–∫–∞–ª—å: {item.failing_locale})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–µ: {e}")
    
    def _update_reason_stats(self, repair_queue: RepairQueue) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º"""
        stats = repair_queue.get_stats()
        self.repair_stats['reasons'] = stats.get('reason_distribution', {})
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–º–æ–Ω—Ç–∞"""
        total_processed = self.repair_stats['processed']
        success_rate = self.repair_stats['successful'] / total_processed if total_processed > 0 else 0
        sanity_fix_rate = self.repair_stats['sanity_fixes_applied'] / total_processed if total_processed > 0 else 0
        
        llm_localization_rate = self.repair_stats['llm_specs_localized_count'] / total_processed if total_processed > 0 else 0
        deterministic_drop_rate = self.repair_stats['deterministic_specs_drop_count'] / total_processed if total_processed > 0 else 0
        
        return {
            'repair_processed_count': self.repair_stats['processed'],
            'repair_successful_count': self.repair_stats['successful'],
            'repair_failed_count': self.repair_stats['failed'],
            'repair_success_rate': f"{success_rate:.1%}",
            'sanity_fix_applied_count': self.repair_stats['sanity_fixes_applied'],
            'sanity_fix_rate': f"{sanity_fix_rate:.1%}",
            'llm_specs_localized_count': self.repair_stats['llm_specs_localized_count'],
            'llm_localization_rate': f"{llm_localization_rate:.1%}",
            'deterministic_specs_drop_count': self.repair_stats['deterministic_specs_drop_count'],
            'deterministic_drop_rate': f"{deterministic_drop_rate:.1%}",
            'repair_reason_distribution': self.repair_stats['reasons']
        }

    def _validate_repair_completion(self, repair_queue: RepairQueue) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"""
        processed = self.repair_stats['processed']
        initial_length = getattr(self, 'initial_queue_length', 0)
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –∏–∑ {initial_length}")
        
        if processed != initial_length:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {processed}/{initial_length}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
            pending_items = repair_queue.get_pending_items()
            if pending_items:
                logger.warning(f"‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(pending_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                for item in pending_items:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {item.url} ({item.failing_locale})")
            else:
                logger.info("‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        else:
            logger.info("‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–º–æ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
