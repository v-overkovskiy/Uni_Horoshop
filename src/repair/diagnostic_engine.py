"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞–¥–∞—é—â–µ–≥–æ guard per-locale
"""
import logging
from typing import Dict, List, Any, Tuple, Optional
from src.validation.guards import (
    faq_guard, specs_guard, description_guard, ValidationError,
    anti_placeholders_guard, locale_content_guard, structure_guard
)
from src.validation.locale_validator import LocaleValidator

logger = logging.getLogger(__name__)

class DiagnosticEngine:
    """–î–≤–∏–∂–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    
    def __init__(self):
        self.locale_validator = LocaleValidator()
    
    def diagnose_content(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø–∞–¥–∞—é—â–∏–π guard
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {
            'status': 'valid'|'failed',
            'first_failing_guard': 'GUARD_NAME',
            'error_message': '–æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏',
            'suggested_fix': '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é'
        }
        """
        try:
            # 1. STRUCTURE GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            try:
                structure_guard(content, locale)
                logger.debug(f"‚úÖ STRUCTURE guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('STRUCTURE', str(e), f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ h2.prod-title, note-buy, FAQ=6, specs‚â•3")
            
            # 2. FAQ GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º FAQ
            try:
                faq_guard(content.get('faq', []))
                logger.debug(f"‚úÖ FAQ guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('FAQ', str(e), f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–≤–Ω–æ 6 Q&A –¥–ª—è {locale}")
            
            # 3. SPECS GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            try:
                specs_guard(content.get('specs', []), locale)
                logger.debug(f"‚úÖ SPECS guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('SPECS_RANGE', str(e), f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 3-8 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è {locale}")
            
            # 4. DESCRIPTION GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            try:
                description_guard(content.get('description', ''))
                logger.debug(f"‚úÖ DESCRIPTION guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('DESCRIPTION', str(e), f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ 2√ó3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {locale}")
            
            # 5. ANTI-PLACEHOLDERS GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
            try:
                anti_placeholders_guard(content.get('description', ''), 'description')
                anti_placeholders_guard(content.get('note_buy', ''), 'note_buy')
                logger.debug(f"‚úÖ ANTI-PLACEHOLDERS guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('PLACEHOLDER', str(e), f"–£–±—Ä–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {locale}")
            
            # 6. LOCALE GUARD - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π
            try:
                locale_content_guard(content.get('description', ''), locale, 'description')
                locale_content_guard(content.get('note_buy', ''), locale, 'note_buy')
                logger.debug(f"‚úÖ LOCALE guard passed for {locale}")
            except ValidationError as e:
                return self._create_diagnosis('LOCALE', str(e), f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–º–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π –≤ {locale} –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
            
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏
            return self._create_diagnosis('VALID', '', '')
            
        except Exception as e:
            return self._create_diagnosis('UNKNOWN', str(e), f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ {locale}")
    
    def _create_diagnosis(self, guard_name: str, error_message: str, suggested_fix: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return {
            'status': 'failed' if guard_name != 'VALID' else 'valid',
            'first_failing_guard': guard_name,
            'error_message': error_message,
            'suggested_fix': suggested_fix
        }
    
    def batch_diagnose_repair_report(self, repair_report_path: str) -> Dict[str, Any]:
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ repair_report
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
        """
        import pandas as pd
        
        try:
            df = pd.read_excel(repair_report_path)
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω repair_report: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            diagnosis_summary = {
                'total_records': len(df),
                'guards_failing': {},
                'locales_failing': {'ru': 0, 'ua': 0},
                'recommendations': []
            }
            
            for index, row in df.iterrows():
                url = row.get('url', '')
                ru_valid = row.get('ru_valid', False)
                ua_valid = row.get('ua_valid', False)
                
                logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ {index + 1}: {url}")
                
                if not ru_valid:
                    diagnosis_summary['locales_failing']['ru'] += 1
                    logger.warning(f"   ‚ùå RU –ª–æ–∫–∞–ª—å –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                
                if not ua_valid:
                    diagnosis_summary['locales_failing']['ua'] += 1
                    logger.warning(f"   ‚ùå UA –ª–æ–∫–∞–ª—å –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if diagnosis_summary['locales_failing']['ru'] > 0:
                diagnosis_summary['recommendations'].append("–†–µ–º–æ–Ω—Ç RU –ª–æ–∫–∞–ª–∏: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            if diagnosis_summary['locales_failing']['ua'] > 0:
                diagnosis_summary['recommendations'].append("–†–µ–º–æ–Ω—Ç UA –ª–æ–∫–∞–ª–∏: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            
            return diagnosis_summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ repair_report: {e}")
            return {'error': str(e)}

