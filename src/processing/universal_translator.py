"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ FAQ –∏ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SmartLLMClient –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
"""

import logging
from typing import List, Dict, Any, TYPE_CHECKING

if TYPE_CHECKING:
    from src.llm.smart_llm_client import SmartLLMClient

logger = logging.getLogger(__name__)

class UniversalTranslator:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ FAQ –∏ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SmartLLMClient –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    
    def __init__(self, llm_client: 'SmartLLMClient' = None):
        self.llm_client = llm_client
    
    async def translate_faq_list(self, faq_list: List[Dict[str, str]], target_lang: str) -> List[Dict[str, str]]:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ FAQ –ü–ê–ö–ï–¢–ù–û –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            faq_list: –°–ø–∏—Å–æ–∫ FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('uk' –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ)
            
        Returns:
            List[Dict[str, str]]: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ FAQ
        """
        if not faq_list:
            return []
        
        if target_lang == 'ru':
            return faq_list  # –£–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        
        logger.info(f"üîÑ –ü–ê–ö–ï–¢–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ {len(faq_list)} FAQ –Ω–∞ {target_lang}")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            texts_to_translate = []
            for item in faq_list:
                texts_to_translate.append(item['question'])
                texts_to_translate.append(item['answer'])
            
            # –û–î–ò–ù –ø–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
            translated_texts = await self._translate_batch(texts_to_translate, target_lang)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π FAQ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            translated_faq = []
            for i in range(len(faq_list)):
                translated_faq.append({
                    'question': translated_texts[i * 2],
                    'answer': translated_texts[i * 2 + 1]
                })
            
            logger.info(f"‚úÖ –ü–ê–ö–ï–¢–ù–û –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(translated_faq)} FAQ –Ω–∞ {target_lang}")
            return translated_faq
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            return faq_list
    
    def _build_translation_context(self, faq_list: List[Dict[str, str]], target_lang: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö FAQ."""
        context_parts = []
        
        for faq in faq_list:
            context_parts.append(f"–í–æ–ø—Ä–æ—Å: {faq.get('question', '')}")
            context_parts.append(f"–û—Ç–≤–µ—Ç: {faq.get('answer', '')}")
        
        context = "\n".join(context_parts)
        
        if target_lang == 'uk':
            return f"""
–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫:

{context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É:
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
4. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
"""
        return context
    
    async def _translate_single_faq(self, faq_item: Dict[str, str], context: str, target_lang: str) -> Dict[str, str]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–¥–∏–Ω FAQ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        
        if target_lang == 'uk':
            prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π FAQ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å:

–í–æ–ø—Ä–æ—Å: {faq_item.get('question', '')}
–û—Ç–≤–µ—Ç: {faq_item.get('answer', '')}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "question": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
    "answer": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
}}
"""
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ - –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
            prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π FAQ –Ω–∞ {target_lang}:

–í–æ–ø—Ä–æ—Å: {faq_item.get('question', '')}
–û—Ç–≤–µ—Ç: {faq_item.get('answer', '')}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "question": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å", 
    "answer": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
}}
"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            full_prompt = f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ—á–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.\n\n{prompt}"
            
            response_text = await self.llm_client.generate(
                prompt=full_prompt,
                context={},
                max_tokens=1000,
                temperature=0.3,
                locale=target_lang
            )
            
            import json
            result = json.loads(response_text)
            
            return {
                "question": result.get("question", faq_item.get('question', '')),
                "answer": result.get("answer", faq_item.get('answer', ''))
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ FAQ: {e}")
            return faq_item  # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    
    async def _translate_batch(self, texts: List[str], target_lang: str) -> List[str]:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –û–î–ù–ò–ú –ø–∞–∫–µ—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ LLM.
        –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å 12 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ 1.
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
            
        Returns:
            List[str]: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        """
        if target_lang == 'ru':
            return texts
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
            texts_text = "\n".join([f"{i+1}. {text}" for i, text in enumerate(texts)])
            
            if target_lang == 'uk':
                prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å:

{texts_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é (1., 2., 3., ...)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π:
1. –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 1
2. –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 2
...
"""
            else:
                prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ {target_lang}:\n\n{texts_text}\n\n–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π."
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            full_prompt = f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ—á–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.\n\n{prompt}"
            
            translated_response = await self.llm_client.generate(
                prompt=full_prompt,
                context={},
                max_tokens=2000,
                temperature=0.3,
                locale=target_lang
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            translated_response = translated_response.strip()
            translated_lines = translated_response.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–æ–≤
            translated_texts = []
            for line in translated_lines:
                if line.strip() and (line.strip()[0].isdigit() or line.strip().startswith('-')):
                    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–æ—á–∫—É/—Ç–∏—Ä–µ
                    text = line.strip()
                    if text[0].isdigit():
                        text = text.split('.', 1)[1].strip() if '.' in text else text[1:].strip()
                    elif text.startswith('-'):
                        text = text[1:].strip()
                    translated_texts.append(text)
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if len(translated_texts) != len(texts):
                logger.warning(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ ({len(translated_texts)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º ({len(texts)})")
                # Fallback - –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ –æ–¥–Ω–æ–º—É
                return await self._translate_individual_fallback(texts, target_lang)
            
            logger.info(f"‚úÖ –ü–ê–ö–ï–¢–ù–û –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(translated_texts)} —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å")
            return translated_texts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            # Fallback - –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ –æ–¥–Ω–æ–º—É
            return await self._translate_individual_fallback(texts, target_lang)
    
    async def _translate_individual_fallback(self, texts: List[str], target_lang: str) -> List[str]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É."""
        logger.info("üîÑ Fallback: –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ –æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É")
        translated_texts = []
        for text in texts:
            try:
                translated = await self.translate_text(text, target_lang)
                translated_texts.append(translated)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
                translated_texts.append(text)  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        return translated_texts
    
    async def translate_text(self, text: str, target_lang: str) -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if target_lang == 'ru':
            return text
        
        try:
            if target_lang == 'uk':
                prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å:

{text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –°–æ—Ö—Ä–∞–Ω–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
"""
            else:
                prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}:\n\n{text}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            full_prompt = f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n{prompt}"
            
            response_text = await self.llm_client.generate(
                prompt=full_prompt,
                context={},
                max_tokens=1000,
                temperature=0.3,
                locale=target_lang
            )
            
            return response_text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text  # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
