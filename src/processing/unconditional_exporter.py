"""
–ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç - –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏—Ç–æ–≥
"""
import logging
import pandas as pd
import os
from typing import Dict, Any, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class UnconditionalExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π 100% –ø–æ–∫—Ä—ã—Ç–∏—è"""
    
    def __init__(self, output_file: str = "descriptions.xlsx"):
        self.output_file = output_file
        self.results = []
    
    def add_result(self, result: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ—à—Ç—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å)"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        normalized = self._normalize_result(result)
        self.results.append(normalized)
        
        # –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        self._append_to_file(normalized)
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('url', 'unknown')}")
    
    def _normalize_result(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ - —Ç–æ–ª—å–∫–æ 3 –ø–æ–ª—è"""
        return {
            'URL': result.get('url', ''),
            'RU_HTML': result.get('ru_html', ''),
            'UA_HTML': result.get('ua_html', '')
        }
    
    def _append_to_file(self, row: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª (–ø–æ—à—Ç—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(self.output_file):
                # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                df_existing = pd.read_excel(self.output_file)
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                df_new = pd.DataFrame([row])
                df_combined = pd.concat([df_existing, df_new], ignore_index=True)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                df_combined = pd.DataFrame([row])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
            df_combined.to_excel(self.output_file, index=False)
            logger.debug(f"üìù –°—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {self.output_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
            if "Permission denied" in str(e) or "in use" in str(e).lower():
                backup_file = f"descriptions_backup_{int(datetime.now().timestamp())}.xlsx"
                try:
                    df_backup = pd.DataFrame([row])
                    df_backup.to_excel(backup_file, index=False)
                    logger.info(f"üìã –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª (—Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): {backup_file}")
                except Exception as backup_e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_e}")
            else:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
    
    def write_final_file(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π - —Ç–æ–ª—å–∫–æ Excel"""
        try:
            if not self.results:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            df = pd.DataFrame(self.results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ Excel (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
            df.to_excel(self.output_file, index=False)
            logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: {self.output_file}")
            logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {list(df.columns)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
            if "Permission denied" in str(e) or "in use" in str(e).lower():
                backup_file = f"descriptions_final_backup_{int(datetime.now().timestamp())}.xlsx"
                try:
                    df = pd.DataFrame(self.results)
                    df.to_excel(backup_file, index=False)
                    logger.info(f"üìã –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª (—Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): {backup_file}")
                except Exception as backup_e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_e}")
            else:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ - —Ç–æ–ª—å–∫–æ Excel"""
        if not self.results:
            return {
                'total_rows': 0,
                'ru_html_count': 0,
                'ua_html_count': 0,
                'avg_ru_html_length': 0,
                'avg_ua_html_length': 0
            }
        
        df = pd.DataFrame(self.results)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        ru_html_lengths = df['RU_HTML'].str.len()
        ua_html_lengths = df['UA_HTML'].str.len()
        
        return {
            'total_rows': len(df),
            'ru_html_count': (df['RU_HTML'] != '').sum(),
            'ua_html_count': (df['UA_HTML'] != '').sum(),
            'avg_ru_html_length': ru_html_lengths.mean(),
            'avg_ua_html_length': ua_html_lengths.mean(),
            'total_ru_html_length': ru_html_lengths.sum(),
            'total_ua_html_length': ua_html_lengths.sum()
        }
    
    def create_safe_result(self, url: str, locale: str, h1: str, 
                          facts: Dict[str, Any], reason: str = "safe_fallback") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        from src.processing.safe_templates import SafeTemplates
        
        templates = SafeTemplates()
        safe_blocks = templates.render_safe_blocks(h1, facts, locale)
        
        return {
            'url': url,
            'locale': locale,
            'export_mode': 'safe_full',
            'flags': [reason],
            'needs_review': True,
            'consistency_fixes': [],
            'html_length': 0,  # –ë–µ–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            'processed': True,
            'retries': 0,
            'network_errors': 1,
            'budget_violation': False,
            'fallback_reason': reason,
            'safe_facts_only': True,
            'controversial_data_removed': True,
            'safe_blocks': safe_blocks
        }
    
    def create_specs_only_result(self, url: str, locale: str, h1: str, 
                                facts: Dict[str, Any], reason: str = "network_failed") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        from src.processing.safe_templates import SafeTemplates
        
        templates = SafeTemplates()
        safe_blocks = templates.render_safe_blocks(h1, facts, locale)
        
        return {
            'url': url,
            'locale': locale,
            'export_mode': 'specs_only',
            'flags': [reason],
            'needs_review': True,
            'consistency_fixes': [],
            'html_length': 0,
            'processed': True,
            'retries': 1,
            'network_errors': 1,
            'budget_violation': False,
            'fallback_reason': reason,
            'safe_facts_only': True,
            'controversial_data_removed': True,
            'safe_blocks': safe_blocks
        }
