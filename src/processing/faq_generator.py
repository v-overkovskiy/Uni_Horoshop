"""
–£—Å–∏–ª–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä FAQ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ UnifiedParser
"""
import json
import logging
from typing import List, Dict, Any, Optional
import re
from src.llm.smart_llm_client import SmartLLMClient

logger = logging.getLogger(__name__)

class FaqGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–¥—É–º—á–∏–≤—ã—Ö FAQ, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞.
    –î–µ–ª–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π, —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π LLM-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    
    def __init__(self, llm_client=None):
        self.llm = llm_client or SmartLLMClient()
        self.fallback_questions = [
            "–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
            "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?",
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?",
            "–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä?",
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–∏?"
        ]
    
    async def generate(self, product_data: Dict[str, Any], locale: str = 'ru', num_questions: int = 6) -> List[Dict[str, str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–¥—É–º—á–∏–≤—ã–µ FAQ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞.
        –í–°–ï–ì–î–ê –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Args:
            product_data: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ UnifiedParser
            locale: –õ–æ–∫–∞–ª—å (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            num_questions: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ FAQ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        try:
            logger.info(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ –¥–ª—è {locale} —Å {num_questions} –≤–æ–ø—Ä–æ—Å–∞–º–∏")
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –î–ê–ù–ù–´–•
            if not isinstance(product_data, dict):
                logger.error(f"‚ùå product_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict, –ø–æ–ª—É—á–µ–Ω {type(product_data)}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict
                if isinstance(product_data, list):
                    logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —Å–ª–æ–≤–∞—Ä—å")
                    product_data_dict = {}
                    for item in product_data:
                        if isinstance(item, dict):
                            if 'label' in item and 'value' in item:
                                product_data_dict[item['label']] = item['value']
                            elif 'key' in item and 'value' in item:
                                product_data_dict[item['key']] = item['value']
                    product_data = product_data_dict
                    logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å: {len(product_data)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–æ–æ–±—â–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
                    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç product_data: {type(product_data)}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            context = self._build_context(product_data)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            prompt = self._create_prompt(context, locale, num_questions)
            
            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'title': product_data.get('title', ''),
                'locale': locale,
                'type': 'faq'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏ retry –ø—Ä–∏ null –æ—Ç–≤–µ—Ç–∞—Ö
            for attempt in range(3):
                try:
                    system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö FAQ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                    full_prompt = f"{system_prompt}\n\n{prompt}"
                    
                    response_text = await self.llm.generate(
                        prompt=full_prompt,
                        context=context,
                        max_tokens=1500,
                        temperature=0.7,
                        validate_content=True,  # ‚úÖ –í–ö–õ–Æ–ß–ò–¢–¨ –í–ê–õ–ò–î–ê–¶–ò–Æ
                        locale=locale  # ‚úÖ –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    )
                    
                    logger.info(f"üîç DEBUG: LLM –æ—Ç–≤–µ—Ç –¥–ª—è FAQ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response_text[:500]}...")
                    faq_list = self._parse_llm_response(response_text)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ null –æ—Ç–≤–µ—Ç–æ–≤
                    null_count = sum(1 for item in faq_list if not item.get('answer') or item.get('answer') == 'null')
                    
                    if null_count == 0 and faq_list and len(faq_list) >= 3:
                        logger.info(f"‚úÖ LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(faq_list)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö FAQ –±–µ–∑ null")
                        return self._post_process_faq(faq_list, locale)
                    
                    elif null_count < 3 and faq_list and len(faq_list) >= 3:
                        # –ï—Å–ª–∏ null –º–∞–ª–æ - –∑–∞–º–µ–Ω—è–µ–º placeholder
                        logger.warning(f"‚ö†Ô∏è {null_count} FAQ —Å null –æ—Ç–≤–µ—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder")
                        for item in faq_list:
                            if not item.get('answer') or item.get('answer') == 'null':
                                item['answer'] = (
                                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è." 
                                    if locale == 'ru' 
                                    else "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è."
                                )
                        logger.info(f"‚úÖ FAQ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å placeholder: {len(faq_list)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                        return self._post_process_faq(faq_list, locale)
                    
                    else:
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ null –∏–ª–∏ –º–∞–ª–æ FAQ - –ø–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                        logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ null ({null_count}) –∏–ª–∏ –º–∞–ª–æ FAQ ({len(faq_list) if faq_list else 0}), –ø–æ–≤—Ç–æ—Ä {attempt+1}/3")
                        if attempt < 2:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            continue
                        else:
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ FAQ –ø–æ—Å–ª–µ {attempt+1} –ø–æ–ø—ã—Ç–æ–∫")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –¥–ª—è FAQ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                    if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise ValueError(f"–û—à–∏–±–∫–∞ LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ –¥–ª—è {locale} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    continue
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å FAQ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {e}")
            raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    
    def _build_context(self, data: Dict[str, Any]) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è LLM"""
        context_parts = []
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        title = data.get('title', '') or data.get('title_ru', '') or data.get('title_ua', '')
        if title:
            context_parts.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = data.get('description', '') or data.get('description_ru', '') or data.get('description_ua', '')
        if description:
            context_parts.append(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}")
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        specs = data.get('specs', {})
        if specs:
            if isinstance(specs, dict):
                specs_text = ', '.join([f'{k}: {v}' for k, v in specs.items()])
            else:
                specs_text = str(specs)
            context_parts.append(f"**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {specs_text}")
        
        # –°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞
        bundle = data.get('bundle', []) or data.get('bundle_components', [])
        if bundle:
            bundle_text = ', '.join(bundle) if isinstance(bundle, list) else str(bundle)
            context_parts.append(f"**–°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞:** {bundle_text}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        volume = data.get('volume', '')
        if volume:
            context_parts.append(f"**–û–±—ä—ë–º:** {volume}")
        
        purpose = data.get('purpose', '')
        if purpose:
            context_parts.append(f"**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** {purpose}")
        
        return '\n'.join(context_parts)
    
    def _create_prompt(self, context: str, locale: str, num_questions: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM"""
        if locale == 'ua':
            return f"""
–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä, –∑–≥–µ–Ω–µ—Ä—É–π {num_questions} –≤–¥—É–º–ª–∏–≤–∏—Ö —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è FAQ.

**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä—É:**
{context}

**–í–∏–º–æ–≥–∏ –¥–æ –ø–∏—Ç–∞–Ω—å:**
1. **–ì–ª–∏–±–∏–Ω–∞:** –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î –µ—Ñ–µ–∫—Ç?", "–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –ø–æ–¥—Ä–∞–∑–Ω–µ–Ω–Ω—ñ?", "–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?").
2. **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å:** –ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ç–∏–ø–æ–º —Ç–æ–≤–∞—Ä—É (–¥–µ–ø—ñ–ª—è—Ü—ñ—è, –¥–æ–≥–ª—è–¥ –∑–∞ —à–∫—ñ—Ä–æ—é —Ç–æ—â–æ).
3. **–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:** –ö–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –∑–Ω–∞–∫–æ–º –ø–∏—Ç–∞–Ω–Ω—è.
4. **–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å:** –ù–µ –≥–µ–Ω–µ—Ä—É–π –ø—Ä–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —è–∫—ñ –≤–∂–µ —î –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–Ø–∫–∏–π –æ–±'—î–º?").

**–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û:**
- –ö–û–ñ–ù–ï –ø–∏—Ç–∞–Ω–Ω—è –û–ë–û–í'–Ø–ó–ö–û–í–û –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏ –ø–æ–≤–Ω—É, —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
- –ù–Ü–ö–û–õ–ò –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π null, –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –∞–±–æ placeholder —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
- –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–∏–ø —Ç–æ–≤–∞—Ä—É
- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ (–º—ñ–Ω—ñ–º—É–º 2-3 —Ä–µ—á–µ–Ω–Ω—è)

**–§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É:**
–ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON, –¥–µ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç ‚Äî —Ü–µ –æ–±'—î–∫—Ç –∑ –∫–ª—é—á–∞–º–∏ "question" —Ç–∞ "answer".
–ü—Ä–∏–∫–ª–∞–¥: [{{"question": "–Ø–∫ –¥–æ–≤–≥–æ —Ç—Ä–∏–≤–∞—î –µ—Ñ–µ–∫—Ç?", "answer": "–ï—Ñ–µ–∫—Ç –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –≤—ñ–¥ 3 –¥–æ 6 —Ç–∏–∂–Ω—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π —Ç–∞ —Ç–∏–ø—É –≤–æ–ª–æ—Å—Å—è. –ü—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –≤–æ–ª–æ—Å—Å—è —Å—Ç–∞—î —Ç–æ–Ω—à–∏–º —Ç–∞ —Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ."}}, ...]

–ì–µ–Ω–µ—Ä—É–π —Ç—ñ–ª—å–∫–∏ JSON, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
"""
        else:
            return f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π {num_questions} –≤–¥—É–º—á–∏–≤—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è FAQ.

**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞:**
{context}

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º:**
1. **–ì–ª—É–±–∏–Ω–∞:** –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–µ—Ä–∂–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç?", "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–∏?", "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?").
2. **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã —Å —Ç–∏–ø–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º (–¥–µ–ø–∏–ª—è—Ü–∏—è, —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –∏ —Ç.–¥.).
3. **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º.
4. **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:** –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–æ–±—ä—ë–º, –≤–µ—Å, —Å–æ—Å—Ç–∞–≤) - –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏, —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
5. **–ö–∞—á–µ—Å—Ç–≤–æ:** –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –æ —Ç–æ–≤–∞—Ä–µ.

**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:**
- –ö–ê–ñ–î–´–ô –≤–æ–ø—Ä–æ—Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π, —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π null, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ placeholder –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–æ–≤–∞—Ä–∞
- –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ (–º–∏–Ω–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

**–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:**
–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ "question" –∏ "answer".
–ü—Ä–∏–º–µ—Ä: [{{"question": "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–µ—Ä–∂–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç?", "answer": "–≠—Ñ—Ñ–µ–∫—Ç –º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç 3 –¥–æ 6 –Ω–µ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ç–∏–ø–∞ –≤–æ–ª–æ—Å. –ü—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–æ–ª–æ—Å—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ç–æ–Ω—å—à–µ –∏ —Ä–∞—Å—Ç—É—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ."}}, ...]

–ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
    
    def _parse_llm_response(self, response: str) -> List[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç FAQ"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            response = response.strip()
            if response.startswith('```json'):
                response = response[7:]
            if response.endswith('```'):
                response = response[:-3]
            
            # –ü–∞—Ä—Å–∏–º JSON
            parsed_response = json.loads(response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if isinstance(parsed_response, list):
                return parsed_response
            elif isinstance(parsed_response, dict):
                # –ò—â–µ–º FAQ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞—Ö
                for key in ['faqs', 'faq', 'questions', 'items']:
                    if key in parsed_response and isinstance(parsed_response[key], list):
                        return parsed_response[key]
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ FAQ –≤ –∫–ª—é—á–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                logger.warning(f"‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç –±–µ–∑ FAQ: {list(parsed_response.keys())}")
                return []
            else:
                logger.warning("‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –æ–±—ä–µ–∫—Ç FAQ")
                return []
                
        except json.JSONDecodeError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å FAQ –≤—Ä—É—á–Ω—É—é
            return self._extract_faq_from_text(response)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return []
    
    def _extract_faq_from_text(self, text: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç FAQ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ JSON –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å"""
        faq_list = []
        
        # –ò—â–µ–º –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        lines = text.split('\n')
        current_question = None
        current_answer = None
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ?, —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
            if line.endswith('?'):
                if current_question and current_answer:
                    faq_list.append({
                        'question': current_question,
                        'answer': current_answer
                    })
                current_question = line
                current_answer = None
            # –ò–Ω–∞—á–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ç
            elif current_question and not current_answer:
                current_answer = line
            elif current_question and current_answer:
                current_answer += ' ' + line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É
        if current_question and current_answer:
            faq_list.append({
                'question': current_question,
                'answer': current_answer
            })
        
        return faq_list
    
    def _post_process_faq(self, faq_list: List[Dict[str, str]], locale: str) -> List[Dict[str, str]]:
        """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ FAQ: –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        processed = []
        
        for item in faq_list:
            if not isinstance(item, dict) or 'question' not in item or 'answer' not in item:
                continue
                
            question = str(item['question']).strip()
            answer = str(item['answer']).strip()
            
            if not question or not answer:
                continue
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            question = question.capitalize()
            if not question.endswith('?'):
                question += '?'
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = answer.strip()
            if answer:
                processed.append({
                    'question': question,
                    'answer': answer
                })
        
        return processed
    
    def _generate_hybrid_faq(self, product_data: Dict[str, Any], locale: str, num_questions: int) -> List[Dict[str, str]]:
        """‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–ª—É—à–µ–∫! –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback FAQ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏!")
        logger.error(f"‚ùå –≠—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–∞–≤–∏–ª - –ù–ò–ö–ê–ö–ò–• –∑–∞–≥–ª—É—à–µ–∫ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!")
        
        # –í–û–ó–í–†–ê–©–ê–ï–ú –ü–£–°–¢–û–ô –°–ü–ò–°–û–ö –í–ú–ï–°–¢–û –ó–ê–ì–õ–£–®–ï–ö
        return []
    
    def _generate_answer_for_question(self, question: str, specs: Dict, bundle: List, locale: str) -> str:
        """‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏!")
        raise ValueError("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
    