"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä FAQ —Å —Å—Ö–µ–º–æ–π "10 ‚Üí 6" –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –µ–¥–∏–Ω–∏—Ü
"""
import re
import logging
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class FAQCandidate:
    """–ö–∞–Ω–¥–∏–¥–∞—Ç FAQ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    question: str
    answer: str
    topic: str
    unit_type: str  # 'volume', 'weight', 'other'
    score: float = 0.0
    is_valid: bool = True
    issues: List[str] = None

    def __post_init__(self):
        if self.issues is None:
            self.issues = []

class EnhancedFAQGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä FAQ —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–±–æ—Ä–æ–º –ª—É—á—à–∏—Ö 6"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –µ–¥–∏–Ω–∏—Ü
        self.volume_patterns = {
            'ru': [r'\d+\s*–º–ª', r'\d+\s*–ª', r'–º–∏–ª–ª–∏–ª–∏—Ç—Ä', r'–ª–∏—Ç—Ä'],
            'ua': [r'\d+\s*–º–ª', r'\d+\s*–ª', r'–º—ñ–ª—ñ–ª—ñ—Ç—Ä', r'–ª—ñ—Ç—Ä']
        }
        
        self.weight_patterns = {
            'ru': [r'\d+\s*–≥(?:—Ä–∞–º–º)?', r'\d+\s*–∫–≥', r'–≥—Ä–∞–º–º', r'–∫–∏–ª–æ–≥—Ä–∞–º–º'],
            'ua': [r'\d+\s*–≥(?:—Ä–∞–º)?', r'\d+\s*–∫–≥', r'–≥—Ä–∞–º', r'–∫—ñ–ª–æ–≥—Ä–∞–º']
        }
        
        # –¢–µ–º—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
        self.topics = {
            'ru': [
                '—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª', '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', '–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', 
                '—Å–≤–æ–π—Å—Ç–≤–∞/—ç—Ñ—Ñ–µ–∫—Ç', '–æ–±—ä—ë–º –∏–ª–∏ –≥–æ—Ä–µ–Ω–∏–µ/—Å—Ä–æ–∫', '–∞—Ä–æ–º–∞—Ç/–∑–∞–ø–∞—Ö', 
                '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å/–≥–∏–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–æ', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è', '–∫–∞—á–µ—Å—Ç–≤–æ',
                '—É–ø–∞–∫–æ–≤–∫–∞', '—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            ],
            'ua': [
                '—Å–∫–ª–∞–¥/–º–∞—Ç–µ—Ä—ñ–∞–ª', '—è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏', '–æ–±–ª–∞—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
                '–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ/–µ—Ñ–µ–∫—Ç', '–æ–±\'—î–º –∞–±–æ –≥–æ—Ä—ñ–Ω–Ω—è/—Ç–µ—Ä–º—ñ–Ω', '–∞—Ä–æ–º–∞—Ç/–∑–∞–ø–∞—Ö',
                '–±–µ–∑–ø–µ–∫–∞/–≥—ñ–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–æ', '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è', '–ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è', '—è–∫—ñ—Å—Ç—å',
                '—É–ø–∞–∫–æ–≤–∫–∞', '—Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ', '–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü
        self.unit_question_templates = {
            'ru': {
                'volume': [
                    "–ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞?",
                    "–°–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ –≤ —É–ø–∞–∫–æ–≤–∫–µ?",
                    "–ö–∞–∫–æ–π –æ–±—ä—ë–º —É–ø–∞–∫–æ–≤–∫–∏?",
                    "–ö–∞–∫–æ–π –æ–±—ä—ë–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ?"
                ],
                'weight': [
                    "–ö–∞–∫–æ–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞?",
                    "–°–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç —É–ø–∞–∫–æ–≤–∫–∞?",
                    "–ö–∞–∫–æ–π –≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏?",
                    "–ö–∞–∫–æ–π –≤–µ—Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ?"
                ]
            },
            'ua': {
                'volume': [
                    "–Ø–∫–∏–π –æ–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É?",
                    "–°–∫—ñ–ª—å–∫–∏ –º—ñ–ª—ñ–ª—ñ—Ç—Ä—ñ–≤ –≤ —É–ø–∞–∫–æ–≤—Ü—ñ?",
                    "–Ø–∫–∏–π –æ–±'—î–º —É–ø–∞–∫–æ–≤–∫–∏?",
                    "–Ø–∫–∏–π –æ–±'—î–º –≤–º—ñ—Å—Ç—É?"
                ],
                'weight': [
                    "–Ø–∫–∞ –≤–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É?",
                    "–°–∫—ñ–ª—å–∫–∏ –≤–∞–∂–∏—Ç—å —É–ø–∞–∫–æ–≤–∫–∞?",
                    "–Ø–∫–∞ –≤–∞–≥–∞ —É–ø–∞–∫–æ–≤–∫–∏?",
                    "–Ø–∫–∞ –≤–∞–≥–∞ –≤–º—ñ—Å—Ç—É?"
                ]
            }
        }
        
        # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã)
        self.forbidden_answers = {
            'ru': ['–¥–∞', '–Ω–µ—Ç', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ', '–ø—Ä–∏–º–µ—Ä–Ω–æ', '–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ', 
                   '–æ–±—ã—á–Ω–æ', '–∑–∞–∑–≤–∏—á–∞–π', '–Ω–µ—Å–∫–æ–ª—å–∫–æ', '–∫—ñ–ª—å–∫–∞', '–æ–∫–æ–ª–æ', '–±–ª–∏–∑—å–∫–æ'],
            'ua': ['—Ç–∞–∫', '–Ω—ñ', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ', '–ø—Ä–∏–±–ª–∏–∑–Ω–æ', '–ø—Ä–∏–±–ª–∏–∑–Ω–æ',
                   '–∑–∞–∑–≤–∏—á–∞–π', '–∑–∞–∑–≤–∏—á–∞–π', '–∫—ñ–ª—å–∫–∞', '–∫—ñ–ª—å–∫–∞', '–±–ª–∏–∑—å–∫–æ', '–±–ª–∏–∑—å–∫–æ']
        }

    def generate_enhanced_faq(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                            locale: str, title: str) -> List[Dict[str, str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π FAQ –ø–æ —Å—Ö–µ–º–µ "10 ‚Üí 6"
        """
        logger.info(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ FAQ –¥–ª—è {locale}")
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = self._generate_10_candidates(facts, specs, locale, title)
        
        # 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        validated_candidates = self._validate_and_normalize_candidates(candidates, locale)
        
        # 3. –û—Ç–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ 6
        selected_faq = self._select_best_6(validated_candidates, locale)
        
        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (HTMLBuilder –æ–∂–∏–¥–∞–µ—Ç 'question' –∏ 'answer')
        result = []
        for candidate in selected_faq:
            result.append({
                'question': candidate.question,
                'answer': candidate.answer
            })
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} FAQ –¥–ª—è {locale}")
        return result

    def _generate_10_candidates(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                               locale: str, title: str) -> List[FAQCandidate]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω—ã—Ö FAQ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤"""
        candidates = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ specs
        spec_info = self._extract_spec_info(specs, locale)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º
        topics = self.topics[locale]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10
        for topic in topics:
            if len(candidates) >= 10:
                break
            question, answer = self._generate_qa_for_topic(topic, facts, spec_info, locale, title)
            
            if question and answer:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü –≤ –æ—Ç–≤–µ—Ç–µ
                unit_type = self._detect_unit_type(answer, locale)
                
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic=topic,
                    unit_type=unit_type
                )
                candidates.append(candidate)
        
        # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–µ–Ω—å—à–µ 10, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        additional_topics = [
            '–∫–∞—á–µ—Å—Ç–≤–æ', '—è–∫—ñ—Å—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–±–µ–∑–ø–µ–∫–∞', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è',
            '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—É–ø–∞–∫–æ–≤–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞', '—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '—Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ'
        ]
        
        for topic in additional_topics:
            if len(candidates) >= 10:
                break
            question, answer = self._generate_qa_for_topic(topic, facts, spec_info, locale, title)
            if question and answer:
                unit_type = self._detect_unit_type(answer, locale)
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic=topic,
                    unit_type=unit_type
                )
                candidates.append(candidate)
        
        # –ñ–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = candidates[:10]
        
        return candidates

    def _extract_spec_info(self, specs: List[Dict[str, str]], locale: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        info = {
            'volume': None,
            'weight': None,
            'material': None,
            'brand': None,
            'color': None,
            'purpose': None
        }
        
        for spec in specs:
            name = spec.get('name', '').lower()
            value = spec.get('value', '')
            
            if any(word in name for word in ['–æ–±—ä—ë–º', '–æ–±\'—î–º', '–æ–±—ä–µ–º', 'volume']):
                info['volume'] = value
            elif any(word in name for word in ['–≤–µ—Å', '–≤–∞–≥–∞', 'weight']):
                info['weight'] = value
            elif any(word in name for word in ['–º–∞—Ç–µ—Ä–∏–∞–ª', '–º–∞—Ç–µ—Ä—ñ–∞–ª', 'material']):
                info['material'] = value
            elif any(word in name for word in ['–±—Ä–µ–Ω–¥', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–≤–∏—Ä–æ–±–Ω–∏–∫']):
                info['brand'] = value
            elif any(word in name for word in ['—Ü–≤–µ—Ç', '–∫–æ–ª—ñ—Ä', 'color']):
                info['color'] = value
            elif any(word in name for word in ['–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è', 'purpose']):
                info['purpose'] = value
        
        return info

    def _generate_qa_for_topic(self, topic: str, facts: Dict[str, Any], 
                              spec_info: Dict[str, Any], locale: str, title: str) -> Tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""
        
        if topic in ['—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª', '—Å–∫–ª–∞–¥/–º–∞—Ç–µ—Ä—ñ–∞–ª']:
            if spec_info['material']:
                if locale == 'ru':
                    return "–ò–∑ –∫–∞–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç?", spec_info['material']
                else:
                    return "–ó —è–∫–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?", spec_info['material']
            else:
                if locale == 'ru':
                    return "–ò–∑ –∫–∞–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
                else:
                    return "–ó —è–∫–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –∑ —è–∫—ñ—Å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤"
        
        elif topic in ['–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', '—è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏']:
            if locale == 'ru':
                return "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ"
            else:
                return "–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ"
        
        elif topic in ['–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', '–æ–±–ª–∞—Å—Ç—å –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è']:
            if spec_info['purpose']:
                if locale == 'ru':
                    return "–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç?", spec_info['purpose']
                else:
                    return "–î–ª—è —á–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?", spec_info['purpose']
            else:
                if locale == 'ru':
                    return "–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                else:
                    return "–î–ª—è —á–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
        
        elif topic in ['—Å–≤–æ–π—Å—Ç–≤–∞/—ç—Ñ—Ñ–µ–∫—Ç', '–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ/–µ—Ñ–µ–∫—Ç']:
            if locale == 'ru':
                return "–ö–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–º–µ–µ—Ç –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"
            else:
                return "–Ø–∫—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º–∞—î –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–æ–¥—É–∫—Ç –º–∞—î –≤–∏—Å–æ–∫—ñ —è–∫—ñ—Å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
        
        elif topic in ['–æ–±—ä—ë–º –∏–ª–∏ –≥–æ—Ä–µ–Ω–∏–µ/—Å—Ä–æ–∫', '–æ–±\'—î–º –∞–±–æ –≥–æ—Ä—ñ–Ω–Ω—è/—Ç–µ—Ä–º—ñ–Ω']:
            if spec_info['volume']:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞?", spec_info['volume']
                else:
                    return "–Ø–∫–∏–π –æ–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É?", spec_info['volume']
            elif spec_info['weight']:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞?", spec_info['weight']
                else:
                    return "–Ø–∫–∞ –≤–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É?", spec_info['weight']
            else:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞?", "–û–±—ä—ë–º —É–∫–∞–∑–∞–Ω –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ"
                else:
                    return "–Ø–∫–∏–π –æ–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É?", "–û–±'—î–º –≤–∫–∞–∑–∞–Ω–æ –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ"
        
        elif topic in ['–∞—Ä–æ–º–∞—Ç/–∑–∞–ø–∞—Ö', '–∞—Ä–æ–º–∞—Ç/–∑–∞–ø–∞—Ö']:
            if spec_info['color']:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç —É –ø—Ä–æ–¥—É–∫—Ç–∞?", f"–ü—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç {spec_info['color']}"
                else:
                    return "–Ø–∫–∏–π –∞—Ä–æ–º–∞—Ç —É –ø—Ä–æ–¥—É–∫—Ç—É?", f"–ü—Ä–æ–¥—É–∫—Ç –º–∞—î –ø—Ä–∏—î–º–Ω–∏–π –∞—Ä–æ–º–∞—Ç {spec_info['color']}"
            else:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç —É –ø—Ä–æ–¥—É–∫—Ç–∞?", "–ü—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç"
                else:
                    return "–Ø–∫–∏–π –∞—Ä–æ–º–∞—Ç —É –ø—Ä–æ–¥—É–∫—Ç—É?", "–ü—Ä–æ–¥—É–∫—Ç –º–∞—î –ø—Ä–∏—î–º–Ω–∏–π –∞—Ä–æ–º–∞—Ç"
        
        elif topic in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å/–≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ', '–±–µ–∑–ø–µ–∫–∞/–≥—ñ–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–æ']:
            if locale == 'ru':
                return "–ë–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–æ–∂–∏?", "–ü—Ä–æ–¥—É–∫—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏"
            else:
                return "–ß–∏ –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —à–∫—ñ—Ä–∏?", "–ü—Ä–æ–¥—É–∫—Ç –±–µ–∑–ø–µ—á–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏"
        
        elif topic in ['—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è']:
            if locale == 'ru':
                return "–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ"
            else:
                return "–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ —Å—É—Ö–æ–º—É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ"
        
        elif topic in ['–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è', '–ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è']:
            if locale == 'ru':
                return "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?", "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
            else:
                return "–ß–∏ —î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è?", "–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º"
        
        elif topic in ['–∫–∞—á–µ—Å—Ç–≤–æ', '—è–∫—ñ—Å—Ç—å']:
            if spec_info['brand']:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∞?", spec_info['brand']
                else:
                    return "–Ø–∫–∏–π –±—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç—É?", spec_info['brand']
            else:
                if locale == 'ru':
                    return "–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∞?", "–ü—Ä–æ–¥—É–∫—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"
                else:
                    return "–Ø–∫–∏–π –±—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç—É?", "–ü—Ä–æ–¥—É–∫—Ç –≤—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ FAQ
        elif topic in ['—É–ø–∞–∫–æ–≤–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞']:
            if locale == 'ru':
                return "–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ —É –ø—Ä–æ–¥—É–∫—Ç–∞?", "–ü—Ä–æ–¥—É–∫—Ç –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —É–¥–æ–±–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ"
            else:
                return "–Ø–∫–∞ —É–ø–∞–∫–æ–≤–∫–∞ —É –ø—Ä–æ–¥—É–∫—Ç—É?", "–ü—Ä–æ–¥—É–∫—Ç –ø–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –≤ –∑—Ä—É—á–Ω—ñ–π —É–ø–∞–∫–æ–≤—Ü—ñ"
        
        elif topic in ['—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '—Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ']:
            if locale == 'ru':
                return "–ö–∞–∫–æ–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏?", "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ"
            else:
                return "–Ø–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ?", "–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ"
        
        elif topic in ['–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è']:
            if locale == 'ru':
                return "–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
            else:
                return "–Ø–∫ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–ó–∞—Å—Ç–æ—Å–æ–≤—É–π—Ç–µ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é"
        
        elif topic in ['—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']:
            if locale == 'ru':
                return "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?", "–ü—Ä–æ–¥—É–∫—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            else:
                return "–Ø–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è?", "–ü—Ä–æ–¥—É–∫—Ç –∑–∞–±–µ–∑–ø–µ—á—É—î –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        
        return None, None

    def _detect_unit_type(self, text: str, locale: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü –≤ —Ç–µ–∫—Å—Ç–µ"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—ë–º
        for pattern in self.volume_patterns[locale]:
            if re.search(pattern, text_lower):
                return 'volume'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å
        for pattern in self.weight_patterns[locale]:
            if re.search(pattern, text_lower):
                return 'weight'
        
        return 'other'

    def _validate_and_normalize_candidates(self, candidates: List[FAQCandidate], locale: str) -> List[FAQCandidate]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        validated = []
        
        for candidate in candidates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
            if len(candidate.question.strip()) < 6:
                candidate.is_valid = False
                candidate.issues.append('question_too_short')
            
            if len(candidate.answer.strip()) < 40:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä–æ–≥ 40 —Å–∏–º–≤–æ–ª–æ–≤
                candidate.is_valid = False
                candidate.issues.append('answer_too_short')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
            answer_lower = candidate.answer.lower().strip()
            if answer_lower in self.forbidden_answers[locale]:
                candidate.is_valid = False
                candidate.issues.append('placeholder_answer')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –≤–µ—Å
            if self._is_weight_stub_question(candidate.question, locale):
                candidate.is_valid = False
                candidate.issues.append('weight_stub_question')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å (–∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞)
            candidate.question = self._normalize_question(candidate.question, locale)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü
            if not self._validate_unit_consistency(candidate, locale):
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                fixed_question = self._fix_unit_consistency(candidate, locale)
                if fixed_question:
                    candidate.question = fixed_question
                    candidate.issues.append('unit_consistency_fixed')
                else:
                    candidate.is_valid = False
                    candidate.issues.append('unit_consistency_error')
            
            if candidate.is_valid:
                validated.append(candidate)
        
        return validated

    def _normalize_question(self, question: str, locale: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–æ–ø—Ä–æ—Å: –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞"""
        question = question.strip()
        
        if not question:
            return question
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
        if question.endswith('?'):
            question = question[:-1]
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        question = question[0].upper() + question[1:] if len(question) > 1 else question.upper()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
        question += '?'
        
        return question

    def _is_weight_stub_question(self, question: str, locale: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∑–∞–≥–ª—É—à–∫–æ–π –ø—Ä–æ –≤–µ—Å"""
        question_lower = question.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–æ –≤–µ—Å
        weight_stubs = [
            '–∫–∞–∫–æ–π –≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏',
            '–∫–∞–∫–æ–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞',
            '–∫–∞–∫–æ–π –≤–µ—Å',
            '—è–∫–∞ –≤–∞–≥–∞ —É–ø–∞–∫–æ–≤–∫–∏',
            '—è–∫–∞ –≤–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É',
            '—è–∫–∞ –≤–∞–≥–∞'
        ]
        
        for stub in weight_stubs:
            if stub in question_lower:
                return True
        
        return False

    def _validate_unit_consistency(self, candidate: FAQCandidate, locale: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –≤ –≤–æ–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ"""
        if candidate.unit_type == 'other':
            return True
        
        question_lower = candidate.question.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–∏–ø—É –µ–¥–∏–Ω–∏—Ü –≤ –æ—Ç–≤–µ—Ç–µ
        if candidate.unit_type == 'volume':
            volume_words = ['–æ–±—ä—ë–º', '–æ–±\'—î–º', '–º–∏–ª–ª–∏–ª–∏—Ç—Ä', '–º—ñ–ª—ñ–ª—ñ—Ç—Ä', '–ª–∏—Ç—Ä', '–ª—ñ—Ç—Ä']
            return any(word in question_lower for word in volume_words)
        elif candidate.unit_type == 'weight':
            weight_words = ['–≤–µ—Å', '–≤–∞–≥–∞', '–≥—Ä–∞–º–º', '–≥—Ä–∞–º', '–∫–∏–ª–æ–≥—Ä–∞–º–º', '–∫—ñ–ª–æ–≥—Ä–∞–º']
            return any(word in question_lower for word in weight_words)
        
        return True

    def _fix_unit_consistency(self, candidate: FAQCandidate, locale: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –≤ –≤–æ–ø—Ä–æ—Å–µ"""
        if candidate.unit_type == 'other':
            return candidate.question
        
        question_lower = candidate.question.lower()
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –≤–µ—Å, –∞ –æ—Ç–≤–µ—Ç –ø—Ä–æ –æ–±—ä—ë–º
        if candidate.unit_type == 'volume' and '–≤–µ—Å' in question_lower:
            if locale == 'ru':
                return question_lower.replace('–≤–µ—Å', '–æ–±—ä—ë–º').capitalize() + '?'
            else:
                return question_lower.replace('–≤–∞–≥–∞', '–æ–±\'—î–º').capitalize() + '?'
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –æ–±—ä—ë–º, –∞ –æ—Ç–≤–µ—Ç –ø—Ä–æ –≤–µ—Å
        elif candidate.unit_type == 'weight' and ('–æ–±—ä—ë–º' in question_lower or '–æ–±\'—î–º' in question_lower):
            if locale == 'ru':
                return question_lower.replace('–æ–±—ä—ë–º', '–≤–µ—Å').capitalize() + '?'
            else:
                return question_lower.replace('–æ–±\'—î–º', '–≤–∞–≥–∞').capitalize() + '?'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–∞–∫ fallback
        templates = self.unit_question_templates[locale][candidate.unit_type]
        for template in templates:
            if template not in candidate.question:
                return template
        
        return candidate.question

    def _select_best_6(self, candidates: List[FAQCandidate], locale: str) -> List[FAQCandidate]:
        """–û—Ç–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ 6 FAQ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ç–µ–º"""
        if len(candidates) <= 6:
            return candidates
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
        topic_groups = {}
        for candidate in candidates:
            topic = candidate.topic
            if topic not in topic_groups:
                topic_groups[topic] = []
            topic_groups[topic].append(candidate)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π —Ç–µ–º—ã (–º–∏–Ω–∏–º—É–º 4 —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã)
        selected = []
        used_topics = set()
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        for topic, group in topic_groups.items():
            if len(selected) < 6 and group:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≥—Ä—É–ø–ø—ã (–æ–Ω–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
                best_candidate = group[0]
                selected.append(best_candidate)
                used_topics.add(topic)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        remaining_candidates = [c for c in candidates if c not in selected]
        
        while len(selected) < 6 and remaining_candidates:
            selected.append(remaining_candidates.pop(0))
        
        return selected[:6]

    def get_diagnostic_info(self, candidates: List[FAQCandidate], selected: List[FAQCandidate]) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        lowercase_count = sum(1 for c in candidates if c.question and c.question[0].islower())
        unit_mismatch_count = sum(1 for c in candidates if 'unit_consistency_error' in c.issues)
        weight_stub_count = sum(1 for c in candidates if 'weight_stub_question' in c.issues)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        repair_actions = []
        for c in selected:
            if c.issues:
                repair_actions.extend(c.issues)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç
        first_slot_repaired = False
        if selected and len(selected) > 0:
            first_candidate = selected[0]
            if any(action in ['unit_consistency_fixed', 'q_capitalized'] for action in first_candidate.issues):
                first_slot_repaired = True
        
        return {
            'faq_q_lowercase_count': lowercase_count,
            'faq_unit_mismatch_count': unit_mismatch_count,
            'faq_weight_stub_count': weight_stub_count,
            'faq_first_slot_repaired': first_slot_repaired,
            'faq_repaired': any('unit_consistency_fixed' in c.issues for c in selected),
            'faq_repair_actions': repair_actions,
            'faq_candidates_total': len(candidates),
            'faq_selected_count': len(selected),
            'topics_covered': len(set(c.topic for c in selected))
        }
