"""
–ñ—ë—Å—Ç–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""
import re
import logging
from typing import Dict, Any, List, Optional, Set

logger = logging.getLogger(__name__)

class SafeFactsExtractor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –±–µ–∑ —Å–ø–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.SAFE_KEYS = {
            'brand', 'category', 'color', 'country', 'series', 
            'form_factor', 'pack_mass', 'pack_volume', 'title',
            'type', 'application', 'material'
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.CONTROVERSIAL_PATTERNS = [
            # –ü–ª–∞–≤–∞—é—â–∏–µ –≥—Ä–∞–º–º—ã –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
            (r'\b\d+[\s\u00A0]*(–≥|–≥—Ä|–≥—Ä–∞–º|–≥—Ä–∞–º–º)\b(?!\s*(–≤\s+—É–ø–∞–∫–æ–≤–∫–µ|–≤\s+–ø–∞–∫–µ—Ç–µ|–Ω–∞\s+–ø–æ—Ä—Ü–∏—é|–Ω–∞\s+–ø—Ä–æ—Ü–µ–¥—É—Ä—É))', ''),
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            (r'\d+\s*[‚Äì-]\s*\d+\s*¬∞\s*C', ''),
            (r'\d+\s*¬∞\s*C(?!\s*(—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–Ω–∞–≥—Ä–µ–≤))', ''),
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            (r'\d+\s*%', ''),
            # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
            (r'\d+\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å)', ''),
            # –ü–æ—Ä—Ü–∏–∏ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            (r'\b\d+\s*(–ø–æ—Ä—Ü–∏—è|–ø–æ—Ä—Ü–∏–∏|–ø–æ—Ä—Ü–∏–π)\b', ''),
        ]
    
    def extract_safe_facts(self, specs: List[Dict[str, str]], h1: str, 
                          mass_facts: List[str], volume_facts: List[str]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã"""
        safe = {'title': h1}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        for spec in specs:
            name = spec.get('name', '').lower()
            value = spec.get('value', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
            for safe_key in self.SAFE_KEYS:
                if safe_key in name:
                    safe[safe_key] = value
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–æ–Ω —É–ø–∞–∫–æ–≤–∫–∏
        safe['pack'] = self._canon_pack(mass_facts, volume_facts)
        
        return safe
    
    def _canon_pack(self, mass_facts: List[str], volume_facts: List[str]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–æ–Ω —É–ø–∞–∫–æ–≤–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Å—Å—ã/–æ–±—ä—ë–º–∞ —É–ø–∞–∫–æ–≤–∫–∏)"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –º–∞—Å—Å–∞ —É–ø–∞–∫–æ–≤–∫–∏ > –æ–±—ä—ë–º —É–ø–∞–∫–æ–≤–∫–∏
        if mass_facts:
            return mass_facts[0]
        elif volume_facts:
            return volume_facts[0]
        return None
    
    def strip_controversial_numbers(self, html: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç —Å–ø–æ—Ä–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ HTML"""
        if not html:
            return html
        
        original_html = html
        
        for pattern, replacement in self.CONTROVERSIAL_PATTERNS:
            html = re.sub(pattern, replacement, html, flags=re.I)
        
        if original_html != html:
            logger.info("üßπ –£–¥–∞–ª–µ–Ω—ã —Å–ø–æ—Ä–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ HTML")
        
        return html
    
    def is_safe_fact(self, key: str, value: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–∫—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º"""
        key_lower = key.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        if not any(safe_key in key_lower for safe_key in self.SAFE_KEYS):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for pattern, _ in self.CONTROVERSIAL_PATTERNS:
            if re.search(pattern, value, flags=re.I):
                return False
        
        return True
    
    def get_safe_specs(self, specs: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ"""
        safe_specs = []
        
        for spec in specs:
            name = spec.get('name', '')
            value = spec.get('value', '')
            
            if self.is_safe_fact(name, value):
                safe_specs.append(spec)
            else:
                logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω —Å–ø–æ—Ä–Ω—ã–π —Ñ–∞–∫—Ç: {name}: {value}")
        
        return safe_specs

