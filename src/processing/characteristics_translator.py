# src/processing/characteristics_translator.py

import logging
from typing import Dict
from src.llm.smart_llm_client import SmartLLMClient

logger = logging.getLogger(__name__)

class CharacteristicsTranslator:
    """
    –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    
    def __init__(self):
        self.llm = SmartLLMClient()
    
    # ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π! –¢–æ–ª—å–∫–æ LLM –ø–µ—Ä–µ–≤–æ–¥

    async def translate(self, ru_key: str) -> str:
        """
        ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LLM - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–´–• —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        
        Args:
            ru_key: –ö–ª—é—á —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        if not ru_key:
            return ru_key
        
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_key = ru_key.replace(':', '').strip()
        
        # ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LLM
        try:
            import httpx
            import os
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫:
–ù–∞–∑–≤–∞–Ω–∏–µ: {clean_key}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç):
[–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]"""

            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'title': clean_key,
                'type': 'translation'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
            translated_text = await self.llm.generate(
                prompt=prompt,
                context=context,
                max_tokens=50,
                temperature=0.3,
                validate_content=False,  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                locale='ua'  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
            )
            
            # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
            if translated_text and len(translated_text) > 0:
                translated_text = translated_text[0].upper() + translated_text[1:]
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
            if ru_key.endswith(':'):
                translated_text += ':'
            
            logger.info(f"‚úÖ LLM –ø–µ—Ä–µ–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: '{clean_key}' ‚Üí '{translated_text}'")
            return translated_text
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return ru_key  # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

    def translate_characteristics(self, specs: Dict[str, str]) -> Dict[str, str]:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ –∫–ª—é—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
        
        Args:
            specs: –°–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        """
        if not specs:
            return specs
            
        translated_specs = {}
        for key, value in specs.items():
            translated_key = self.translate(key)
            translated_specs[translated_key] = value
            
        logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(translated_specs)} –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        return translated_specs
    
    async def translate_text(self, text: str, target_lang: str = 'ru') -> str:
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LLM
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('ru' –∏–ª–∏ 'ua')
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return text
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        simple_translation = self._simple_translate(text, target_lang)
        if simple_translation != text:
            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω: {text} ‚Üí {simple_translation}")
            return simple_translation
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
        logger.info(f"üîÑ –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è: {text}")
        return await self._llm_translate(text, target_lang)
    
    def _simple_translate(self, text: str, target_lang: str) -> str:
        """‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ LLM
        –ë–ï–ó —Å–ª–æ–≤–∞—Ä–µ–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–´–• —Ç–æ–≤–∞—Ä–æ–≤"""
        
        if target_lang == 'ua':
            return text  # UA - –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        
        # –î–ª—è RU –ø–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ LLM
        prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:
–¢–µ–∫—Å—Ç: {text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç):
[–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]"""

        try:
            import httpx
            import os
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            api_key = os.getenv('OPENAI_API_KEY')
            with httpx.Client() as client:
                response = client.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "gpt-4o-mini",
                        "messages": [
                            {"role": "user", "content": prompt}
                        ],
                        "temperature": 0.3,
                        "max_tokens": 100
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    translated_text = result['choices'][0]['message']['content'].strip()
                else:
                    logger.error(f"‚ùå LLM API –æ—à–∏–±–∫–∞: {response.status_code}")
                    return text
            
            # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
            if translated_text and len(translated_text) > 0:
                translated_text = translated_text[0].upper() + translated_text[1:]
            
            logger.info(f"‚úÖ LLM –ø–µ—Ä–µ–≤–æ–¥: '{text}' ‚Üí '{translated_text}'")
            return translated_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            # Fallback: –æ—Ä–∏–≥–∏–Ω–∞–ª
            return text
    
    async def _llm_translate(self, text: str, target_lang: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é LLM"""
        import httpx
        import os
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏
        source_lang = 'ua' if target_lang == 'ru' else 'ru'
        target_lang_name = '—Ä—É—Å—Å–∫–∏–π' if target_lang == 'ru' else '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π'
        
        prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å {source_lang} –Ω–∞ {target_lang_name} —è–∑—ã–∫.

–ù–∞–∑–≤–∞–Ω–∏–µ: {text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
2. –ü–µ—Ä–µ–≤–µ–¥–∏ –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
3. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –±—Ä–µ–Ω–¥—ã –∫–∞–∫ –µ—Å—Ç—å
4. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É {target_lang_name} —è–∑—ã–∫–∞
5. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤

–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"""

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "gpt-4o-mini",
                        "messages": [
                            {"role": "system", "content": f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å {source_lang} –Ω–∞ {target_lang_name} —è–∑—ã–∫."},
                            {"role": "user", "content": prompt}
                        ],
                        "temperature": 0.1,
                        "max_tokens": 100
                    },
                    timeout=10.0
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå LLM API –æ—à–∏–±–∫–∞: {response.status_code}")
                    return text
                
                result = response.json()
                translated = result['choices'][0]['message']['content'].strip()
                
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if translated.startswith('"') and translated.endswith('"'):
                    translated = translated[1:-1]
                
                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
                if translated and len(translated) > 0:
                    if translated[0].islower():
                        translated = translated[0].upper() + translated[1:]
                        logger.info(f"üîß LLM: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: '{translated}'")
                
                logger.info(f"‚úÖ LLM –ø–µ—Ä–µ–≤–æ–¥: {text} ‚Üí {translated}")
                return translated
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text
    
    async def translate_characteristics_batch(
        self,
        characteristics: list,
        target_locale: str
    ) -> list:
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ LLM
        –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–´–• —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        """
        if not characteristics:
            return []
        
        if target_locale == 'ua':
            # UA - –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return characteristics
        
        # –î–ª—è RU –ø–µ—Ä–µ–≤–æ–¥–∏–º –í–°–ï —á–µ—Ä–µ–∑ LLM
        logger.info(f"üîÑ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ {len(characteristics)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ‚Üí {target_locale}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ü–ê–ö–ï–¢–ù–û–ì–û –ø–µ—Ä–µ–≤–æ–¥–∞ (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)
        prompt = self._build_translation_prompt(characteristics, target_locale)
        
        try:
            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'type': 'batch_translation',
                'target_locale': target_locale
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
            system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤."
            full_prompt = f"{system_prompt}\n\n{prompt}"
            
            response_text = await self.llm.generate(
                prompt=full_prompt,
                context=context,
                max_tokens=500,
                temperature=0.3,
                validate_content=False,  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                locale=target_locale  # –¶–µ–ª–µ–≤–∞—è –ª–æ–∫–∞–ª—å
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
            logger.info(f"üîç DEBUG: LLM –æ—Ç–≤–µ—Ç: {response_text}")
            translated = self._parse_translation_response(response_text, characteristics)
            logger.info(f"üîç DEBUG: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {translated}")
            logger.info(f"üîç DEBUG: –¢–∏–ø –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö: {type(translated)}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            for orig, trans in zip(characteristics, translated):
                logger.info(f"‚úÖ {orig['label']}={orig['value']} ‚Üí {trans['label']}={trans['value']}")
            
            return translated
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            return characteristics
    
    def _build_translation_prompt(self, characteristics: list, target_locale: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        chars_text = "\n".join([
            f"{i+1}. {char['label']}: {char['value']}"
            for i, char in enumerate(characteristics)
        ])
        
        locale_name = {
            'ru': '—Ä—É—Å—Å–∫–∏–π',
            'ua': '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π'
        }.get(target_locale, target_locale)
        
        prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ {locale_name} —è–∑—ã–∫.
–ò–°–•–û–î–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
{chars_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ü–µ—Ä–µ–≤–µ–¥–∏ –¢–û–ß–ù–û –∫–∞–∂–¥—É—é –º–µ—Ç–∫—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ —Ü–µ–ª–µ–≤–æ–π –ª–æ–∫–∞–ª–∏
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è
- –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Ä—è–¥–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
[
{{"label": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞_1", "value": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_1"}},
{{"label": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–∞—è_–º–µ—Ç–∫–∞_2", "value": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_2"}},
...
]

–ü–ï–†–ï–í–ï–î–Å–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:"""
        
        return prompt
    
    def _parse_translation_response(self, response: str, original: list) -> list:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM —Å –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        import json
        import re
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\[.*\]', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                translated = json.loads(json_str)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if isinstance(translated, list) and len(translated) == len(original):
                    for item in translated:
                        if not isinstance(item, dict) or 'label' not in item or 'value' not in item:
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                    
                    return translated
            
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
            
            # Fallback: –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            lines = [line.strip() for line in response.split('\n') if line.strip()]
            translated = []
            
            for line in lines:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–º–µ—Ç–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ"
                match = re.match(r'(?:\d+\.\s*)?(.+?):\s*(.+)', line)
                if match:
                    translated.append({
                        'label': match.group(1).strip(),
                        'value': match.group(2).strip()
                    })
            
            if len(translated) == len(original):
                return translated
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è)")
        return original