"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è FragmentRenderer –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""
import json
import logging
from typing import Dict, Any, List
from yattag import Doc

from src.processing.product_image_extractor import ProductImageExtractor
from src.schema.jsonld_faq import FAQJSONLD

logger = logging.getLogger(__name__)

class ProductFragmentRenderer:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ProRazko"""
    
    def __init__(self):
        self.templates = {
            'ru': {
                'faq_title': 'FAQ',
                'advantages_title': '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
                'specs_title': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'
            },
            'ua': {
                'faq_title': 'FAQ',
                'advantages_title': '–ü–µ—Ä–µ–≤–∞–≥–∏', 
                'specs_title': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'
            }
        }
        self.image_extractor = ProductImageExtractor()
    
    def render_product_fragment(self, blocks: Dict[str, Any], locale: str = 'ru') -> str:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –ü–û–õ–ù–£–Æ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ProRazko"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._validate_blocks(blocks, locale)
            
            doc, tag, text, line = Doc().ttl()
            
            with tag('div', klass='ds-desc'):
                # 1. –ó–ê–ì–û–õ–û–í–û–ö —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
                title = self._get_full_title(blocks, locale)
                with tag('h2', klass='prod-title'):
                    text(title)
                
                # 2. –û–ü–ò–°–ê–ù–ò–ï (6-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ 2 –∞–±–∑–∞—Ü–∞—Ö)
                description_html = self._get_full_description(blocks, locale)
                doc.asis(description_html)
                
                # 3. –ö–û–ú–ú–ï–†–ß–ï–°–ö–ê–Ø –§–†–ê–ó–ê —Å –∂–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
                note_buy = self._get_full_note_buy(blocks, locale)
                with tag('p', klass='note-buy'):
                    doc.asis(note_buy)
                
                # 4. –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (5-8 –ø—É–Ω–∫—Ç–æ–≤)
                specs = blocks.get('specs', [])
                logger.info(f"üîç FragmentRenderer {locale}: specs —Ç–∏–ø: {type(specs)}")
                logger.info(f"üîç FragmentRenderer {locale}: specs –¥–ª–∏–Ω–∞: {len(specs) if specs else 0}")
                if specs:
                    logger.info(f"üîç FragmentRenderer {locale}: specs –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {specs[0]}")
                    logger.info(f"‚úÖ FragmentRenderer {locale}: –†–ï–ù–î–ï–†–ò–ú —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                else:
                    logger.warning(f"‚ö†Ô∏è FragmentRenderer {locale}: specs –ü–£–°–¢–û–ô - –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫!")
                
                if specs:
                    logger.info(f"üîß FragmentRenderer {locale}: –ù–ê–ß–ò–ù–ê–ï–ú —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
                    with tag('h2'):
                        text(self.templates[locale]['specs_title'])
                        logger.info(f"üîß FragmentRenderer {locale}: –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'")
                    with tag('ul', klass='specs'):
                        logger.info(f"üîß FragmentRenderer {locale}: –û—Ç–∫—Ä—ã—Ç <ul class='specs'>")
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(specs, dict):
                            # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
                            specs_list = [{'label': key, 'value': value} for key, value in specs.items()]
                            logger.info(f"üîß FragmentRenderer {locale}: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫, –¥–ª–∏–Ω–∞: {len(specs_list)}")
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫
                            specs_list = specs
                            logger.info(f"üîß FragmentRenderer {locale}: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –µ—Å—Ç—å, –¥–ª–∏–Ω–∞: {len(specs_list)}")
                        
                        for i, spec in enumerate(specs_list[:8]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8
                            if isinstance(spec, dict):
                                with tag('li'):
                                    with tag('span', klass='spec-label'):
                                        text(f"{spec.get('label', '')}:")
                                    text(f" {spec.get('value', '')}")
                                logger.info(f"üîß FragmentRenderer {locale}: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ {i+1}: {spec.get('label', '')}: {spec.get('value', '')}")
                            else:
                                logger.warning(f"‚ö†Ô∏è FragmentRenderer {locale}: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ {i+1} –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {spec}")
                        
                        logger.info(f"üîß FragmentRenderer {locale}: –ó–∞–∫—Ä—ã–≤–∞–µ–º </ul>")
                
                # 5. –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê (3-6 –∫–∞—Ä—Ç–æ—á–µ–∫)
                advantages = blocks.get('advantages', [])
                if advantages:
                    with tag('h2'):
                        text(self.templates[locale]['advantages_title'])
                    with tag('div', klass='cards'):
                        for advantage in advantages[:6]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6
                            if isinstance(advantage, str):
                                with tag('div', klass='card'):
                                    with tag('h4'):
                                        text(advantage)
                            elif isinstance(advantage, dict):
                                with tag('div', klass='card'):
                                    with tag('h4'):
                                        text(advantage.get('title', advantage.get('name', '')))
                
                # 6. FAQ (—Å—Ç—Ä–æ–≥–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤)
                faq_data = blocks.get('faq', [])
                if faq_data:
                    with tag('h2'):
                        text(self.templates[locale]['faq_title'])
                    with tag('div', klass='faq-section'):
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º FAQ –¥–∞–Ω–Ω—ã–µ
                        normalized_faq = self._normalize_faq_data(faq_data)
                        for i, item in enumerate(normalized_faq[:6]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6
                            if isinstance(item, dict):
                                question = item.get('question', f'–í–æ–ø—Ä–æ—Å {i+1}')
                                answer = item.get('answer', f'–û—Ç–≤–µ—Ç {i+1}')
                            elif isinstance(item, (list, tuple)) and len(item) >= 2:
                                question = str(item[0])
                                answer = str(item[1])
                            else:
                                continue
                            
                            with tag('div', klass='faq-item'):
                                with tag('div', klass='faq-question'):
                                    text(question)
                                with tag('div', klass='faq-answer'):
                                    text(answer)
                
                # 7. –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï —Ç–æ–≤–∞—Ä–∞ (–≤ –∫–æ–Ω—Ü–µ)
                self._render_product_image(doc, tag, line, blocks, locale)

                # 8. JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self._render_json_ld(doc, blocks, locale)
            
            html_result = doc.getvalue()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ HTML
            self._validate_final_html(html_result, blocks, locale)
            
            return html_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")
            return self._render_fallback_fragment(blocks, locale)
    
    def _render_product_image(self, doc, tag, line, blocks: Dict[str, Any], locale: str):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å URL —Ç–æ–≤–∞—Ä–∞ –∏–∑ blocks –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
            product_url = blocks.get('product_url', '')
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ProductImageExtractor
            image_data = self._get_product_image_data(blocks, product_url, locale)
            
            if image_data and image_data.get('url'):
                blocks['_resolved_image_data'] = image_data
                blocks['_resolved_image_url'] = image_data.get('url')
                blocks['image_url'] = image_data.get('url')
                with tag('div', klass='product-photo'):
                    line('img', '', src=image_data['url'], alt=image_data.get('alt', ''))
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {image_data['url']}")
            else:
                logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            # Fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                if blocks.get('image_url'):
                    image_url = blocks['image_url']
                    alt_text = self._generate_alt_text(blocks.get('title', ''), locale)
                    with tag('div', klass='product-photo'):
                        line('img', '', src=image_url, alt=alt_text)
            except Exception as fallback_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {fallback_error}")
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ fallback —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    def _get_product_image_data(self, blocks: Dict[str, Any], product_url: str, locale: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ProductImageExtractor"""
        try:
            html_content = blocks.get('html_content', '')
            title = blocks.get('title', '')

            if not product_url and not html_content:
                return {}

            image_data = self.image_extractor.get_product_image_data(
                html_content,
                product_url,
                title,
                locale
            )

            if not image_data or not image_data.get('url'):
                fallback_url = self._generate_image_url_from_product_url(product_url)
                if fallback_url:  # –ï—Å–ª–∏ fallback –≤–µ—Ä–Ω—É–ª –Ω–µ None
                    image_data = {
                        'url': fallback_url,
                        'alt': self._generate_alt_text(title, locale)
                    }
                else:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_url}")
                    return {}

            return image_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {}

    def _render_json_ld(self, doc, blocks: Dict[str, Any], locale: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç JSON-LD –±–ª–æ–∫–∏ (—Ç–æ–ª—å–∫–æ FAQ)."""
        try:
            faq_data = self._normalize_faq_data(blocks.get('faq', []))
            faq_jsonld = FAQJSONLD(locale).build(faq_data, blocks.get('title', ''))

            if faq_jsonld:
                json_string = json.dumps(faq_jsonld, ensure_ascii=False)
                doc.asis(f'<script type="application/ld+json">{json_string}</script>')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è JSON-LD: {e}")
    
    def _generate_image_url_from_product_url(self, product_url: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ URL —Ç–æ–≤–∞—Ä–∞"""
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        product_image_map = {
            # –ì–µ–ª–∏ –¥–ª—è –¥—É—à–∞
            'hel-dlia-dushu-epilax-kokos-250-ml': 'https://prorazko.com/content/images/gel-coconut-250ml.webp',
            'hel-dlia-dushu-epilax-vetiver-250-ml': 'https://prorazko.com/content/images/gel-vetiver-250ml.webp',
            'hel-dlia-dushu-epilax-aqua-blue-250-ml': 'https://prorazko.com/content/images/gel-aqua-blue-250ml.webp',
            'hel-dlia-dushu-epilax-bilyi-chai-250-ml': 'https://prorazko.com/content/images/gel-white-tea-250ml.webp',
            'hel-dlia-dushu-epilax-morska-sil-250-ml': 'https://prorazko.com/content/images/gel-sea-salt-250ml.webp',
            
            # –ü—É–¥—Ä—ã
            'pudra-enzymna-epilax-50-hram': 'https://prorazko.com/content/images/powder-enzymatic-50g.webp',
            
            # –§–ª—é–∏–¥—ã
            'fliuid-vid-vrosloho-volossia-epilax-5-ml-tester': 'https://prorazko.com/content/images/fluid-ingrown-hair-5ml.webp',
            
            # –ü–µ–Ω–∫–∏
            'pinka-dlia-intymnoi-hihiieny-epilax-150-ml': 'https://prorazko.com/content/images/foam-intimate-150ml.webp',
            'pinka-dlia-ochyshchennia-sukhoi-ta-normalnoi-shkiry-epilax-150-ml': 'https://prorazko.com/content/images/foam-dry-skin-150ml.webp',
            'pinka-dlia-ochyshchennia-zhyrnoi-ta-kombinovanoi-shchkiry-epilax-150-ml': 'https://prorazko.com/content/images/foam-oily-skin-150ml.webp',
            
            # –ì–µ–ª–∏ –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏
            'hel-do-depiliatsii-epilax-z-okholodzhuiuchym-efektom-250-ml': 'https://prorazko.com/content/images/gel-cooling-effect-250ml.webp'
        }
        
        # –ò–∑–≤–ª–µ—á—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å URL (slug)
        url_slug = product_url.replace('https://prorazko.com/', '').rstrip('/')
        
        # –ù–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if url_slug in product_image_map:
            return product_image_map[url_slug]
        
        # Fallback –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        if 'hel-dlia-dushu' in url_slug:
            return "https://prorazko.com/content/images/gel-for-shower-250ml.webp"
        elif 'pudra' in url_slug:
            return "https://prorazko.com/content/images/powder-50g.webp"
        elif 'fliuid' in url_slug:
            return "https://prorazko.com/content/images/fluid-5ml.webp"
        elif 'pinka' in url_slug:
            return "https://prorazko.com/content/images/foam-150ml.webp"
        elif 'hel-do-depiliatsii' in url_slug:
            return "https://prorazko.com/content/images/gel-pre-depilation-250ml.webp"
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
        logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è URL: {product_url}")
        return None
    
    def _generate_alt_text(self, title: str, locale: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ALT-—Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ ProRazko"""
        if locale == 'ua':
            return f'{title} ‚Äî –∫—É–ø–∏—Ç–∏ –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –ø–æ –£–∫—Ä–∞—ó–Ω—ñ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ ProRazko'
        else:
            return f'{title} ‚Äî –∫—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –£–∫—Ä–∞–∏–Ω–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ProRazko'
    
    def _validate_blocks(self, blocks: Dict[str, Any], locale: str):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö"""
        required_fields = ['title', 'description', 'note_buy']
        for field in required_fields:
            if not blocks.get(field) or len(str(blocks.get(field)).strip()) < 3:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –¥–ª—è {locale}")
    
    def _get_full_title(self, blocks: Dict[str, Any], locale: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
        title = blocks.get('title', '')
        if not title or len(title.strip()) < 3:
            raise ValueError(f"–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è {locale}")
        return title.strip()
    
    def _get_full_description(self, blocks: Dict[str, Any], locale: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        description = blocks.get('description', '')
        if not description:
            raise ValueError(f"–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {locale}")
        
        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤ description
        logger.info(f"üîç FragmentRenderer –ø–æ–ª—É—á–∏–ª description —Ç–∏–ø–∞: {type(description)}")
        logger.info(f"üîç FragmentRenderer description —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(description)[:200]}...")
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç div.description, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if '<div class="description">' in str(description):
            logger.warning(f"‚ö†Ô∏è FragmentRenderer: –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç div.description, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            return str(description).strip()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        if isinstance(description, list):
            logger.info(f"üîß FragmentRenderer: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ {len(description)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–∫ <p>
            paragraphs = []
            for i, paragraph in enumerate(description):
                if paragraph and paragraph.strip():
                    paragraphs.append(f'<p>{paragraph.strip()}</p>')
                    logger.info(f"üîß FragmentRenderer: –ø–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}: {paragraph[:50]}...")
            
            if not paragraphs:
                raise ValueError(f"–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è {locale}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ div.description
            description_html = '\n'.join(paragraphs)
            result = f'<div class="description">\n{description_html}\n</div>'
            logger.info(f"‚úÖ FragmentRenderer: —Å–æ–∑–¥–∞–Ω HTML —Å {len(paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏")
            return result
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(str(description).strip()) < 10:
            raise ValueError(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {locale}")
        
        # –ò–Ω–∞—á–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ div.description
        return f'<div class="description">{str(description).strip()}</div>'
    
    def _get_full_note_buy(self, blocks: Dict[str, Any], locale: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π note-buy"""
        note_buy = blocks.get('note_buy', '')
        if not note_buy or len(note_buy.strip()) < 5:
            raise ValueError(f"–ü—É—Å—Ç–æ–π note_buy –¥–ª—è {locale}")
        return note_buy.strip()
    
    def _normalize_faq_data(self, faq_data: List) -> List[Dict[str, str]]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç FAQ –¥–∞–Ω–Ω—ã–µ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
        normalized = []
        
        for i, item in enumerate(faq_data):
            try:
                if isinstance(item, dict):
                    # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    question = str(item.get('question', '') or item.get('q', ''))
                    answer = str(item.get('answer', '') or item.get('a', ''))
                elif isinstance(item, (list, tuple)) and len(item) >= 2:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏/—Å–ø–∏—Å–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
                    question = str(item[0])
                    answer = str(item[1])
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FAQ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {type(item)}")
                    continue
                
                if question and answer and len(question.strip()) > 2 and len(answer.strip()) > 2:
                    normalized.append({
                        'question': question.strip(),
                        'answer': answer.strip()
                    })
                else:
                    logger.warning(f"‚ö†Ô∏è FAQ —ç–ª–µ–º–µ–Ω—Ç {i} –ø—É—Å—Ç–æ–π: question='{question}', answer='{answer}'")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ FAQ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                continue
        
        return normalized
    
    def _validate_final_html(self, html_result: str, blocks: Dict[str, Any], locale: str):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª—É—à–µ–∫
            if 'error-message' in html_result:
                logger.error(f"‚ùå HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è {locale}")
                raise ValueError(f"HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è {locale}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if 'description' not in html_result.lower():
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {locale}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ –∫–∞—Ä—Ç–æ—á–µ–∫
            faq_cards = html_result.count('<div class="card">')
            if faq_cards < 6:
                logger.warning(f"‚ö†Ô∏è FAQ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ 6 ({faq_cards}) –¥–ª—è {locale}")
            
            logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è HTML –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {locale}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ HTML: {e}")
            raise
    
    def _render_fallback_fragment(self, blocks: Dict[str, Any], locale: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        doc, tag, text, line = Doc().ttl()
        
        with tag('div', klass='ds-desc'):
            if blocks.get('title'):
                line('h2', blocks['title'], klass='prod-title')
            
            if blocks.get('note_buy'):
                with tag('p', klass='note-buy'):
                    doc.asis(blocks['note_buy'])
            
            with tag('p', klass='error-message'):
                text('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        return doc.getvalue()
