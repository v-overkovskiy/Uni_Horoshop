"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
"""
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


class TitleGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logger
    
    def create_title_from_facts(self, product_facts: Dict[str, Any], locale: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            brand = product_facts.get('brand', 'Epilax')
            volume = product_facts.get('volume', '')
            weight = product_facts.get('weight', '')
            product_type = product_facts.get('product_type', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            size_info = volume or weight
            if not size_info:
                size_info = product_facts.get('size', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞–ª–∏
            if locale == 'ua':
                if product_type and size_info:
                    title = f"{product_type} {brand}, {size_info}"
                elif product_type:
                    title = f"{product_type} {brand}"
                else:
                    title = f"{brand}, {size_info}" if size_info else brand
            else:  # ru
                if product_type and size_info:
                    title = f"{product_type} {brand}, {size_info}"
                elif product_type:
                    title = f"{product_type} {brand}"
                else:
                    title = f"{brand}, {size_info}" if size_info else brand
            
            self.logger.info(f"üîß –°–æ–∑–¥–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ñ–∞–∫—Ç–æ–≤: {title}")
            return title
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É
            return f"Epilax, {product_facts.get('volume', '') or product_facts.get('weight', '')}"
    
    def extract_title_from_h2_tag(self, html_content: str, locale: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ H2 —Ç–µ–≥–∞ –≤ HTML"""
        try:
            import re
            
            # –ò—â–µ–º H2 —Ç–µ–≥–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            h2_pattern = r'<h2[^>]*class="prod-title"[^>]*>(.*?)</h2>'
            matches = re.findall(h2_pattern, html_content, re.DOTALL)
            
            if matches:
                title = matches[0].strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
                title = re.sub(r'<[^>]+>', '', title)
                self.logger.info(f"üîß –ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ H2: {title}")
                return title
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ H2: {e}")
            return None
    
    def validate_title(self, title: str, locale: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
        if not title or len(title.strip()) < 5:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        has_brand = 'epilax' in title.lower()
        has_size = any(unit in title.lower() for unit in ['–º–ª', '–≥', 'ml', 'g'])
        
        return has_brand and has_size
