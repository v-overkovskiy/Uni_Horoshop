"""
–û—Ö—Ä–∞–Ω–Ω–∏–∫ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ - –æ—Ç–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –ø–æ–ª—å–∑—É –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
"""
import logging
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class ConsistencyGuard:
    """–û—Ö—Ä–∞–Ω–Ω–∏–∫ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
    
    def __init__(self):
        self.blocking_disabled = True  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    def check_volume_consistency(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—ä—ë–º–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        if not self.blocking_disabled:
            return self._legacy_volume_check(content, locale)
        
        # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º
        issues = []
        fixes = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self._has_controversial_volume_data(content):
            issues.append('controversial_volume_data')
            fixes.append('controversial_data_removed')
            logger.info("üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—ë–º–∞ - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        return {
            'consistent': True,  # –í—Å–µ–≥–¥–∞ True –≤ safe-—Ä–µ–∂–∏–º–µ
            'issues': issues,
            'fixes': fixes,
            'blocked': False  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        }
    
    def check_mass_consistency(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–∞—Å—Å—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        if not self.blocking_disabled:
            return self._legacy_mass_check(content, locale)
        
        # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º
        issues = []
        fixes = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self._has_controversial_mass_data(content):
            issues.append('controversial_mass_data')
            fixes.append('controversial_data_removed')
            logger.info("üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Å—ã - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        return {
            'consistent': True,  # –í—Å–µ–≥–¥–∞ True –≤ safe-—Ä–µ–∂–∏–º–µ
            'issues': issues,
            'fixes': fixes,
            'blocked': False  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        }
    
    def _has_controversial_volume_data(self, content: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—ë–º–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = content.get('description', '')
        if self._contains_controversial_volume(description):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        advantages = content.get('advantages', [])
        for advantage in advantages:
            if isinstance(advantage, str) and self._contains_controversial_volume(advantage):
                return True
        
        return False
    
    def _has_controversial_mass_data(self, content: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Å—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = content.get('description', '')
        if self._contains_controversial_mass(description):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        advantages = content.get('advantages', [])
        for advantage in advantages:
            if isinstance(advantage, str) and self._contains_controversial_mass(advantage):
                return True
        
        return False
    
    def _contains_controversial_volume(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—ë–º–∞"""
        import re
        # –ò—â–µ–º "42 –º–ª", "38-40 –º–ª" –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
        patterns = [
            r'\b\d+[\s\u00A0]*(–º–ª|ml)\b(?!\s*(–≤\s+—É–ø–∞–∫–æ–≤–∫–µ|–≤\s+–ø–∞–∫–µ—Ç–µ|–Ω–∞\s+–ø–æ—Ä—Ü–∏—é|–Ω–∞\s+–ø—Ä–æ—Ü–µ–¥—É—Ä—É))',
            r'\d+\s*[‚Äì-]\s*\d+\s*(–º–ª|ml)',
        ]
        
        for pattern in patterns:
            if re.search(pattern, text, flags=re.I):
                return True
        
        return False
    
    def _contains_controversial_mass(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Å—ã"""
        import re
        # –ò—â–µ–º "42 –≥", "38-40 –≥" –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
        patterns = [
            r'\b\d+[\s\u00A0]*(–≥|–≥—Ä|–≥—Ä–∞–º|–≥—Ä–∞–º–º)\b(?!\s*(–≤\s+—É–ø–∞–∫–æ–≤–∫–µ|–≤\s+–ø–∞–∫–µ—Ç–µ|–Ω–∞\s+–ø–æ—Ä—Ü–∏—é|–Ω–∞\s+–ø—Ä–æ—Ü–µ–¥—É—Ä—É))',
            r'\d+\s*[‚Äì-]\s*\d+\s*(–≥|–≥—Ä|–≥—Ä–∞–º|–≥—Ä–∞–º–º)',
        ]
        
        for pattern in patterns:
            if re.search(pattern, text, flags=re.I):
                return True
        
        return False
    
    def _legacy_volume_check(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—ë–º–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        return {
            'consistent': True,
            'issues': [],
            'fixes': [],
            'blocked': False
        }
    
    def _legacy_mass_check(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
        return {
            'consistent': True,
            'issues': [],
            'fixes': [],
            'blocked': False
        }
    
    def should_block_export(self, content: Dict[str, Any], issues: List[str]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç (–≤—Å–µ–≥–¥–∞ False –≤ safe-—Ä–µ–∂–∏–º–µ)"""
        if not self.blocking_disabled:
            return self._legacy_block_check(content, issues)
        
        # –í safe-—Ä–µ–∂–∏–º–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        logger.info("üõ°Ô∏è Safe-—Ä–µ–∂–∏–º: —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
        return False
    
    def _legacy_block_check(self, content: Dict[str, Any], issues: List[str]) -> bool:
        """–°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        return False

