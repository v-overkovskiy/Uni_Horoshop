"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω
"""
import logging
from typing import Dict, List, Any, Optional
from .enhanced_faq_generator import EnhancedFAQGenerator
from .enhanced_note_buy_generator import EnhancedNoteBuyGenerator
from .final_quality_guards import FinalQualityGuards
from .content_critic import ContentCritic

logger = logging.getLogger(__name__)

class ContentEnhancer:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ –∏ note_buy –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω"""
    
    def __init__(self):
        self.faq_generator = EnhancedFAQGenerator()
        self.note_buy_generator = EnhancedNoteBuyGenerator()
        self.quality_guards = FinalQualityGuards()
        self.content_critic = ContentCritic()

    def enhance_content(self, blocks: Dict[str, Any], locale: str, 
                       facts: Dict[str, Any] = None, specs: List[Dict[str, str]] = None) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–ª–æ–∫–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ "10 ‚Üí 6" –¥–ª—è FAQ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–∫–ª–æ–Ω–µ–Ω–∏—é –¥–ª—è note_buy
        """
        logger.info(f"üîß –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {locale}")
        logger.info(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏: {list(blocks.keys())}")
        
        enhanced_blocks = blocks.copy()
        diagnostic_info = {}
        
        # –£–ª—É—á—à–∞–µ–º FAQ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –Ω—É–ª—è
        if 'faq' in blocks:
            faq_result = self._enhance_faq(blocks['faq'], locale, facts, specs)
            if faq_result:
                enhanced_blocks['faq'] = faq_result['content']
                diagnostic_info.update(faq_result['diagnostic'])
                logger.info(f"üîß FAQ —É–ª—É—á—à–µ–Ω: {len(faq_result['content'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                logger.info(f"üîß FAQ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –¥–ª—è {locale}")
        else:
            logger.info(f"üîß FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫–∞—Ö: {list(blocks.keys())}")
        
        # –£–ª—É—á—à–∞–µ–º note_buy –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'note_buy' in blocks and blocks['note_buy']:
            logger.info(f"üîß –ù–∞–π–¥–µ–Ω note_buy –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {blocks['note_buy'][:50]}...")
            note_buy_result = self._enhance_note_buy(blocks['note_buy'], locale, blocks.get('title', ''))
            if note_buy_result:
                enhanced_blocks['note_buy'] = note_buy_result['content']
                diagnostic_info.update(note_buy_result['diagnostic'])
                logger.info(f"üîß Note_buy —É–ª—É—á—à–µ–Ω: {note_buy_result['content'][:50]}...")
        else:
            logger.info(f"üîß Note_buy –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫–∞—Ö: {list(blocks.keys())}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        enhanced_blocks['_enhancement_diagnostic'] = diagnostic_info
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É–ª—É—á—à–µ–Ω –¥–ª—è {locale}")
        return enhanced_blocks

    def enhance_product_with_critic(self, product_data: Dict[str, Any], locale: str, 
                                  facts: Dict[str, Any] = None, specs: List[Dict[str, str]] = None) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ContentCritic
        
        Args:
            product_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
            locale: –õ–æ–∫–∞–ª—å
            facts: –§–∞–∫—Ç—ã –æ —Ç–æ–≤–∞—Ä–µ
            specs: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        logger.info(f"üîç ContentEnhancer: –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ContentCritic –¥–ª—è {locale}")
        
        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—ã—Ä–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            draft_content = self._generate_draft_content(product_data, locale, facts, specs)
            logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {list(draft_content.keys())}")
            
            # 2. –í—ã–∑—ã–≤–∞–µ–º ContentCritic –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            review_result = self.content_critic.review(draft_content, facts or {}, locale)
            logger.info(f"üîç ContentCritic –≤–µ—Ä–¥–∏–∫—Ç: {review_result.get('overall_status', 'UNKNOWN')}")
            
            # 3. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–¥–∏–∫—Ç–∞
            if review_result.get('overall_status') == 'VALID':
                logger.info("‚úÖ ContentCritic: –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
                final_content = review_result.get('revised_content', {})
            else:
                logger.warning("‚ö†Ô∏è ContentCritic: –ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                final_content = review_result.get('revised_content', {})
            
            # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ FAQ –¥–æ 6 —à—Ç—É–∫
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ 'faq', —Ç–∞–∫ –∏ 'faq_candidates' –∏–∑ ContentCritic
            faq_data = final_content.get('faq') or final_content.get('faq_candidates', [])
            if faq_data:
                final_faqs = self._ensure_six_faqs(faq_data, facts, specs, locale)
                final_content['faq'] = final_faqs
                logger.info(f"üîß –î–æ–≤–µ–¥–µ–Ω–æ –¥–æ 6 FAQ: {len(final_faqs)}")
            else:
                logger.warning("‚ö†Ô∏è ContentCritic –Ω–µ –≤–µ—Ä–Ω—É–ª FAQ –¥–∞–Ω–Ω—ã–µ")
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_metrics = self.content_critic.get_quality_metrics(review_result)
            final_content['_quality_metrics'] = quality_metrics
            
            logger.info(f"‚úÖ ContentEnhancer: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ: {quality_metrics.get('quality_score', 0):.2f}")
            return final_content
            
        except Exception as e:
            logger.error(f"‚ùå ContentEnhancer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —É–ª—É—á—à–µ–Ω–∏—é
            return self.enhance_content(product_data, locale, facts, specs)

    def _generate_draft_content(self, product_data: Dict[str, Any], locale: str, 
                               facts: Dict[str, Any], specs: List[Dict[str, str]]) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ContentCritic
        
        Args:
            product_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
            locale: –õ–æ–∫–∞–ª—å
            facts: –§–∞–∫—Ç—ã –æ —Ç–æ–≤–∞—Ä–µ
            specs: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        draft_content = {
            'description': product_data.get('description', ''),
            'advantages': product_data.get('advantages', []),
            'specs': specs or [],
            'note_buy': product_data.get('note_buy', ''),
            'faq_candidates': []
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ FAQ (10-12 —à—Ç—É–∫)
        if 'faq' in product_data:
            draft_content['faq_candidates'] = product_data['faq']
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            try:
                candidates = self.faq_generator.generate_enhanced_faq(facts or {}, specs or [], locale)
                if candidates and hasattr(candidates, 'candidates'):
                    draft_content['faq_candidates'] = [
                        {'question': c.question, 'answer': c.answer} 
                        for c in candidates.candidates[:12]
                    ]
                else:
                    draft_content['faq_candidates'] = []
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ FAQ: {e}")
                draft_content['faq_candidates'] = []
        
        return draft_content

    def _ensure_six_faqs(self, faq_list: List[Dict[str, str]], facts: Dict[str, Any], 
                        specs: List[Dict[str, str]], locale: str) -> List[Dict[str, str]]:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–æ–≤–Ω–æ 6 FAQ
        
        Args:
            faq_list: –°–ø–∏—Å–æ–∫ FAQ
            facts: –§–∞–∫—Ç—ã –æ —Ç–æ–≤–∞—Ä–µ
            specs: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            locale: –õ–æ–∫–∞–ª—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑ 6 FAQ
        """
        if len(faq_list) >= 6:
            return faq_list[:6]
        
        # –î–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ FAQ
        missing_count = 6 - len(faq_list)
        logger.info(f"üîß –î–æ–∑–∞–ø–æ–ª–Ω—è–µ–º {missing_count} FAQ")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ FAQ
            additional_candidates = self.faq_generator.generate_enhanced_faq(facts, specs, locale)
            if additional_candidates and hasattr(additional_candidates, 'candidates'):
                additional_faqs = [
                    {'question': c.question, 'answer': c.answer} 
                    for c in additional_candidates.candidates[:missing_count]
                ]
                faq_list.extend(additional_faqs)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(additional_faqs)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö FAQ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ FAQ: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ FAQ
        while len(faq_list) < 6:
            simple_faq = self._create_simple_faq(len(faq_list) + 1, locale)
            faq_list.append(simple_faq)
        
        return faq_list[:6]

    def _create_simple_faq(self, index: int, locale: str) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π FAQ –∫–∞–∫ fallback"""
        if locale == 'ru':
            questions = [
                "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?",
                "–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏?",
                "–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç?",
                "–ë–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç?",
                "–ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞?",
                "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?"
            ]
            answers = [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.",
                "–î–∞, –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏.",
                "–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ.",
                "–î–∞, –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.",
                "–û–±—ä—ë–º —É–∫–∞–∑–∞–Ω –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
            ]
        else:
            questions = [
                "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?",
                "–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏?",
                "–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?",
                "–ß–∏ –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?",
                "–Ø–∫–∏–π –æ–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É?",
                "–ß–∏ —î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è?"
            ]
            answers = [
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.",
                "–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏.",
                "–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ —Å—É—Ö–æ–º—É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ.",
                "–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ.",
                "–û–±'—î–º –≤–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ –ø—Ä–æ–¥—É–∫—Ç—É.",
                "–ü—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è –≤–∫–∞–∑–∞–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó."
            ]
        
        question = questions[index - 1] if index <= len(questions) else questions[0]
        answer = answers[index - 1] if index <= len(answers) else answers[0]
        
        return {'question': question, 'answer': answer}

    def _enhance_faq(self, current_faq: List[Dict[str, str]], locale: str, 
                    facts: Dict[str, Any] = None, specs: List[Dict[str, str]] = None) -> Optional[Dict[str, Any]]:
        """–£–ª—É—á—à–∞–µ—Ç FAQ –ø–æ —Å—Ö–µ–º–µ 10 ‚Üí 6 —Å –∂–µ—Å—Ç–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not facts:
                facts = self._extract_facts_from_blocks(current_faq, locale)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º specs –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not specs:
                specs = self._extract_specs_from_blocks(current_faq, locale)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
            candidates = self.faq_generator._generate_10_candidates(
                facts, specs, locale, facts.get('title', '')
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            original_count = len(candidates)
            candidates = [c for c in candidates if not self._is_placeholder_candidate(c)]
            placeholders_blocked = original_count - len(candidates)
            
            # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–µ–Ω—å—à–µ 10, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ LLM
            if len(candidates) < 10:
                missing_count = 10 - len(candidates)
                additional_candidates = self._generate_additional_candidates(
                    facts, specs, locale, missing_count
                )
                candidates.extend(additional_candidates)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidates = candidates[:10]
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            validated_candidates = self.faq_generator._validate_and_normalize_candidates(candidates, locale)
            
            # –û—Ç–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ 6
            selected_faq = self.faq_generator._select_best_6(validated_candidates, locale)
            
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —Ä–æ–≤–Ω–æ 6 FAQ - —Ü–∏–∫–ª –¥–æ-–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            llm_refill_rounds = 0
            max_llm_attempts = 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
            while len(selected_faq) < 6 and llm_refill_rounds < max_llm_attempts:
                missing_count = 6 - len(selected_faq)
                missing_topics = self._get_missing_topics(selected_faq, locale)
                
                logger.info(f"üîß –î–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ FAQ: –Ω—É–∂–Ω–æ {missing_count}, –ø–æ–ø—ã—Ç–∫–∞ {llm_refill_rounds + 1}/{max_llm_attempts}")
                
                additional_candidates = self._generate_missing_candidates(
                    facts, specs, locale, missing_count, missing_topics
                )
                
                if additional_candidates:
                    validated_additional = self.faq_generator._validate_and_normalize_candidates(additional_candidates, locale)
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                    valid_additional = [c for c in validated_additional if c.is_valid]
                    selected_faq.extend(valid_additional[:missing_count])
                    logger.info(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {len(valid_additional[:missing_count])} –≤–∞–ª–∏–¥–Ω—ã—Ö FAQ")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ FAQ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {llm_refill_rounds + 1}")
                
                llm_refill_rounds += 1
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ 6, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ FAQ –∏–∑ specs
            rule_based_backfill = 0
            if len(selected_faq) < 6:
                missing_count = 6 - len(selected_faq)
                logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ LLM –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ –µ—â–µ {len(selected_faq)} FAQ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º {missing_count} –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
                rule_based_faq = self._generate_rule_based_faq(facts, specs, locale, missing_count)
                selected_faq.extend(rule_based_faq)
                rule_based_backfill = len(rule_based_faq)
                logger.info(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {rule_based_backfill} –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö FAQ")
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ 6, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ FAQ
            if len(selected_faq) < 6:
                missing_count = 6 - len(selected_faq)
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –≤—Å–µ –µ—â–µ {len(selected_faq)} FAQ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º {missing_count} –ø—Ä–æ—Å—Ç—ã—Ö")
                simple_faq = self._generate_simple_faq(facts, specs, locale, missing_count)
                selected_faq.extend(simple_faq)
                logger.info(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {len(simple_faq)} –ø—Ä–æ—Å—Ç—ã—Ö FAQ")
            
            # –ñ–ï–°–¢–ö–û –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –¥–æ 6 FAQ
            selected_faq = selected_faq[:6]
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê - –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä—å–µ—Ä
            logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö Quality Guards –∫ {len(selected_faq)} FAQ")
            quality_faq, quality_success = self.quality_guards.enforce_quality_standards(
                selected_faq, locale, specs
            )
            
            if quality_success:
                selected_faq = quality_faq
                logger.info(f"‚úÖ Quality Guards –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(selected_faq)} FAQ")
            else:
                logger.warning(f"‚ö†Ô∏è Quality Guards –Ω–µ —Å–º–æ–≥–ª–∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ FAQ")
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê
            if len(selected_faq) != 6:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ = {len(selected_faq)}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6!")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π FAQ
                while len(selected_faq) < 6:
                    if selected_faq:
                        last_faq = selected_faq[-1]
                        selected_faq.append(last_faq)
                    else:
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π FAQ
                        fallback_faq = self._create_fallback_faq(locale)
                        selected_faq.append(fallback_faq)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            enhanced_faq = []
            for candidate in selected_faq:
                if hasattr(candidate, 'question') and hasattr(candidate, 'answer'):
                    # –≠—Ç–æ FAQCandidate –æ–±—ä–µ–∫—Ç
                    enhanced_faq.append({
                        'question': candidate.question,
                        'answer': candidate.answer
                    })
                elif isinstance(candidate, dict):
                    # –≠—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å
                    enhanced_faq.append(candidate)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø FAQ —ç–ª–µ–º–µ–Ω—Ç–∞: {type(candidate)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            diagnostic = self.faq_generator.get_diagnostic_info(candidates, selected_faq)
            diagnostic.update({
                'faq_llm_refill_rounds': llm_refill_rounds,
                'faq_rule_based_backfill': rule_based_backfill,
                'faq_placeholders_blocked': placeholders_blocked
            })
            
            logger.info(f"‚úÖ FAQ —Å—Ö–µ–º–∞ 10‚Üí6: {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Üí {len(enhanced_faq)} FAQ (LLM –¥–æ–∑–∞–ø—Ä–æ—Å–æ–≤: {llm_refill_rounds}, –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {rule_based_backfill}, –∑–∞–≥–ª—É—à–µ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {placeholders_blocked}) –¥–ª—è {locale}")
            
            return {
                'content': enhanced_faq,
                'diagnostic': diagnostic
            }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è FAQ –¥–ª—è {locale}: {e}")
        
        return None
    
    def _is_placeholder_candidate(self, candidate) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –∑–∞–≥–ª—É—à–∫–æ–π"""
        if not hasattr(candidate, 'question') or not hasattr(candidate, 'answer'):
            return True
        
        question = candidate.question.lower()
        answer = candidate.answer.lower()
        
        placeholder_patterns = [
            '–∑–∞–ø–∞—Å–Ω–æ–π –≤–æ–ø—Ä–æ—Å', '–∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç', 'placeholder', 'stub',
            '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'
        ]
        
        for pattern in placeholder_patterns:
            if pattern in question or pattern in answer:
                return True
        
        return False
    
    def _generate_additional_candidates(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                                      locale: str, count: int) -> List:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —á–µ—Ä–µ–∑ LLM"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            additional_candidates = self.faq_generator._generate_10_candidates(
                facts, specs, locale, facts.get('title', '')
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            additional_candidates = [c for c in additional_candidates if not self._is_placeholder_candidate(c)]
            
            return additional_candidates[:count]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            return []
    
    def _get_missing_topics(self, selected_faq: List, locale: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ–º—ã –¥–ª—è FAQ"""
        existing_topics = set()
        for faq in selected_faq:
            if hasattr(faq, 'topic'):
                existing_topics.add(faq.topic)
        
        all_topics = ['—Å–æ—Å—Ç–∞–≤', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '—Å–≤–æ–π—Å—Ç–≤–∞', '–æ–±—ä—ë–º', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ']
        missing_topics = [topic for topic in all_topics if topic not in existing_topics]
        
        return missing_topics[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 3 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–µ–º
    
    def _generate_missing_candidates(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                                   locale: str, count: int, missing_topics: List[str]) -> List:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–µ–º
            missing_candidates = []
            
            for topic in missing_topics[:count]:
                question, answer = self.faq_generator._generate_qa_for_topic(
                    topic, facts, self.faq_generator._extract_spec_info(specs, locale), locale, facts.get('title', '')
                )
                
                if question and answer and not self._is_placeholder_candidate(type('obj', (), {'question': question, 'answer': answer})()):
                    from src.processing.enhanced_faq_generator import FAQCandidate
                    unit_type = self.faq_generator._detect_unit_type(answer, locale)
                    candidate = FAQCandidate(
                        question=question,
                        answer=answer,
                        topic=topic,
                        unit_type=unit_type
                    )
                    missing_candidates.append(candidate)
            
            return missing_candidates
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            return []
    
    def _generate_rule_based_faq(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                               locale: str, count: int) -> List:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ FAQ –∏–∑ specs"""
        try:
            rule_based_faq = []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ specs
            spec_info = self.faq_generator._extract_spec_info(specs, locale)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º FAQ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
            if spec_info.get('volume') and len(rule_based_faq) < count:
                question = "–ö–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞?" if locale == 'ru' else "–Ø–∫–∏–π –æ–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É?"
                answer = f"–û–±—ä—ë–º –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {spec_info['volume']}" if locale == 'ru' else f"–û–±'—î–º –ø—Ä–æ–¥—É–∫—Ç—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {spec_info['volume']}"
                
                from src.processing.enhanced_faq_generator import FAQCandidate
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic="–æ–±—ä—ë–º",
                    unit_type="volume"
                )
                rule_based_faq.append(candidate)
            
            if spec_info.get('weight') and len(rule_based_faq) < count:
                question = "–ö–∞–∫–æ–π –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞?" if locale == 'ru' else "–Ø–∫–∞ –≤–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É?"
                answer = f"–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {spec_info['weight']}" if locale == 'ru' else f"–í–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {spec_info['weight']}"
                
                from src.processing.enhanced_faq_generator import FAQCandidate
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic="–≤–µ—Å",
                    unit_type="weight"
                )
                rule_based_faq.append(candidate)
            
            if spec_info.get('material') and len(rule_based_faq) < count:
                question = "–ò–∑ –∫–∞–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç?" if locale == 'ru' else "–ó —è–∫–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?"
                answer = f"–ü—Ä–æ–¥—É–∫—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ {spec_info['material']}" if locale == 'ru' else f"–ü—Ä–æ–¥—É–∫—Ç –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –∑ {spec_info['material']}"
                
                from src.processing.enhanced_faq_generator import FAQCandidate
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic="–º–∞—Ç–µ—Ä–∏–∞–ª",
                    unit_type="other"
                )
                rule_based_faq.append(candidate)
            
            return rule_based_faq[:count]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö FAQ: {e}")
            return []

    def _generate_simple_faq(self, facts: Dict[str, Any], specs: List[Dict[str, str]], 
                            locale: str, count: int) -> List:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ FAQ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback"""
        try:
            simple_faq = []
            
            # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
            simple_templates = {
                'ru': [
                    ("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ"),
                    ("–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏?", "–î–∞, –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏"),
                    ("–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç?", "–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ"),
                    ("–ë–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–î–∞, –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"),
                    ("–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞—Ç—å?", "–ü—Ä–æ–¥—É–∫—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"),
                    ("–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?", "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
                ],
                'ua': [
                    ("–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ"),
                    ("–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏?", "–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏"),
                    ("–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?", "–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ —Å—É—Ö–æ–º—É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ"),
                    ("–ß–∏ –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç?", "–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ"),
                    ("–Ø–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á—ñ–∫—É–≤–∞—Ç–∏?", "–ü—Ä–æ–¥—É–∫—Ç –∑–∞–±–µ–∑–ø–µ—á—É—î –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"),
                    ("–ß–∏ —î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è?", "–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º")
                ]
            }
            
            templates = simple_templates.get(locale, simple_templates['ru'])
            
            for i in range(min(count, len(templates))):
                question, answer = templates[i]
                
                from src.processing.enhanced_faq_generator import FAQCandidate
                candidate = FAQCandidate(
                    question=question,
                    answer=answer,
                    topic="general",
                    unit_type="other"
                )
                simple_faq.append(candidate)
            
            return simple_faq[:count]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö FAQ: {e}")
            return []

    def _create_fallback_faq(self, locale: str):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback FAQ"""
        try:
            if locale == 'ru':
                question = "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç?"
                answer = "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ"
            else:
                question = "–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç?"
                answer = "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ"
            
            from src.processing.enhanced_faq_generator import FAQCandidate
            return FAQCandidate(
                question=question,
                answer=answer,
                topic="fallback",
                unit_type="other"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback FAQ: {e}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ
            return None

    def _enhance_note_buy(self, current_note_buy: str, locale: str, title: str) -> Optional[Dict[str, Any]]:
        """–£–ª—É—á—à–∞–µ—Ç note_buy —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π note_buy
            result = self.note_buy_generator.generate_enhanced_note_buy(title, locale)
            
            if result['content']:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                diagnostic = self.note_buy_generator.get_diagnostic_info(result)
                diagnostic['note_buy_before'] = current_note_buy
                
                return {
                    'content': result['content'],
                    'diagnostic': diagnostic
                }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è note_buy –¥–ª—è {locale}: {e}")
        
        return None

    def _extract_facts_from_blocks(self, faq: List[Dict[str, str]], locale: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö FAQ"""
        facts = {
            'title': '',
            'brand': '',
            'material': '',
            'volume': '',
            'weight': '',
            'color': '',
            'purpose': ''
        }
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ FAQ
        for item in faq:
            question = item.get('q', '').lower()
            answer = item.get('a', '')
            
            if any(word in question for word in ['–±—Ä–µ–Ω–¥', 'brand', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–≤–∏—Ä–æ–±–Ω–∏–∫']):
                facts['brand'] = answer
            elif any(word in question for word in ['–º–∞—Ç–µ—Ä–∏–∞–ª', '–º–∞—Ç–µ—Ä—ñ–∞–ª', 'material']):
                facts['material'] = answer
            elif any(word in question for word in ['–æ–±—ä—ë–º', '–æ–±\'—î–º', 'volume']):
                facts['volume'] = answer
            elif any(word in question for word in ['–≤–µ—Å', '–≤–∞–≥–∞', 'weight']):
                facts['weight'] = answer
            elif any(word in question for word in ['—Ü–≤–µ—Ç', '–∫–æ–ª—ñ—Ä', 'color']):
                facts['color'] = answer
            elif any(word in question for word in ['–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è', 'purpose']):
                facts['purpose'] = answer
        
        return facts

    def _extract_specs_from_blocks(self, faq: List[Dict[str, str]], locale: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö FAQ"""
        specs = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ FAQ
        for item in faq:
            question = item.get('q', '')
            answer = item.get('a', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            spec_name = self._extract_spec_name_from_question(question, locale)
            if spec_name:
                specs.append({
                    'name': spec_name,
                    'value': answer
                })
        
        return specs

    def _extract_spec_name_from_question(self, question: str, locale: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞"""
        question_lower = question.lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        question_mapping = {
            'ru': {
                '–∫–∞–∫–æ–π –æ–±—ä—ë–º': '–û–±—ä—ë–º',
                '—Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤': '–û–±—ä—ë–º',
                '–∫–∞–∫–æ–π –≤–µ—Å': '–í–µ—Å',
                '—Å–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç': '–í–µ—Å',
                '–∏–∑ –∫–∞–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
                '–∫–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
                '–∫–∞–∫–æ–π –±—Ä–µ–Ω–¥': '–ë—Ä–µ–Ω–¥',
                '–∫–∞–∫–æ–π —Ü–≤–µ—Ç': '–¶–≤–µ—Ç',
                '–¥–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω': '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
                '–∫–∞–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ': '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
            },
            'ua': {
                '—è–∫–∏–π –æ–±\'—î–º': '–û–±\'—î–º',
                '—Å–∫—ñ–ª—å–∫–∏ –º—ñ–ª—ñ–ª—ñ—Ç—Ä—ñ–≤': '–û–±\'—î–º',
                '—è–∫–∞ –≤–∞–≥–∞': '–í–∞–≥–∞',
                '—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–∏—Ç—å': '–í–∞–≥–∞',
                '–∑ —è–∫–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É': '–ú–∞—Ç–µ—Ä—ñ–∞–ª',
                '—è–∫–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª': '–ú–∞—Ç–µ—Ä—ñ–∞–ª',
                '—è–∫–∏–π –±—Ä–µ–Ω–¥': '–ë—Ä–µ–Ω–¥',
                '—è–∫–∏–π –∫–æ–ª—ñ—Ä': '–ö–æ–ª—ñ—Ä',
                '–¥–ª—è —á–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π': '–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è',
                '—è–∫–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è': '–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è'
            }
        }
        
        mapping = question_mapping.get(locale, {})
        
        for pattern, spec_name in mapping.items():
            if pattern in question_lower:
                return spec_name
        
        return None

    def get_enhancement_diagnostic(self, blocks: Dict[str, Any]) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö"""
        return blocks.get('_enhancement_diagnostic', {})
