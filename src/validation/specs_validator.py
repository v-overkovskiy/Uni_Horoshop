"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from typing import List, Dict, Any, Tuple

logger = logging.getLogger(__name__)

def validate_specs_integrity(final_specs: List[Dict[str, str]], source_facts: List[Tuple[str, str]]) -> Tuple[List[Dict[str, str]], str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–º.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NEEDS_REVISIONS –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç.
    
    Args:
        final_specs: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"name": "–¢–∏–ø", "value": "–í–æ—Å–∫–æ–ø–ª–∞–≤"}]
        source_facts: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ HTML –≤ —Ñ–æ—Ä–º–∞—Ç–µ [("–¢–∏–ø", "–í–æ—Å–∫–æ–ø–ª–∞–≤"), ...]
    
    Returns:
        Tuple[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ç–∞—Ç—É—Å]
    """
    if not source_facts:
        logger.warning("–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return [], "VALID"
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    from src.parsing.specs_extractor import strict_filter_fake_characteristics
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
    filtered_specs = strict_filter_fake_characteristics(final_specs, source_facts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–¥–∞–ª–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if len(filtered_specs) != len(final_specs):
        removed_count = len(final_specs) - len(filtered_specs)
        logger.warning(f"–ö—Ä–∏—Ç–∏–∫ –¥–æ–±–∞–≤–∏–ª {removed_count} –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è–µ–º!")
        return filtered_specs, "NEEDS_REVISIONS: Fake specs added"
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–π–¥–µ–Ω–∞: {len(filtered_specs)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫—É")
    return final_specs, "VALID"

def validate_and_filter_specs(final_specs: List[Dict[str, str]], source_facts: List[Tuple[str, str]]) -> List[Dict[str, str]]:
    """
    –ñ—ë—Å—Ç–∫–æ —É–¥–∞–ª—è–µ—Ç –≤—Å—ë, —á—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å source_facts –ø–æ –∫–ª—é—á—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é.
    
    Args:
        final_specs: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        source_facts: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ HTML
    
    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    """
    if not source_facts:
        logger.warning("–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è)
    valid_pairs = set()
    for key, value in source_facts:
        normalized_key = key.strip().lower()
        normalized_value = value.strip().lower()
        valid_pairs.add((normalized_key, normalized_value))
    
    filtered_specs = []
    removed_count = 0
    
    for spec in final_specs:
        spec_key = spec.get('name', '').strip().lower()
        spec_value = spec.get('value', '').strip().lower()
        
        if (spec_key, spec_value) in valid_pairs:
            filtered_specs.append(spec)
        else:
            removed_count += 1
            logger.warning(f"üö´ –£–¥–∞–ª—è–µ–º –≤—ã–¥—É–º–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ ContentCritic: {spec.get('name', '')}: {spec.get('value', '')}")
    
    if removed_count > 0:
        logger.info(f"üîí –ü–æ—Å—Ç-–≤–∞–ª–∏–¥–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–æ {removed_count} –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    
    return filtered_specs

def validate_specs_against_source(final_specs: List[Dict[str, str]], source_html: str, locale: str = 'ru') -> Tuple[List[Dict[str, str]], str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ HTML
    
    Args:
        final_specs: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        source_html: –ò—Å—Ö–æ–¥–Ω—ã–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        locale: –õ–æ–∫–∞–ª—å
    
    Returns:
        Tuple[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ç–∞—Ç—É—Å]
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ HTML
        from src.parsing.specs_extractor import extract_specs
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ HTML
        source_specs = extract_specs(source_html, locale)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        source_facts = [(spec.get('name', ''), spec.get('value', '')) for spec in source_specs]
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        return validate_specs_integrity(final_specs, source_facts)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
        return final_specs, "ERROR"

def log_specs_changes(original_specs: List[Dict[str, str]], final_specs: List[Dict[str, str]]) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
    
    Args:
        original_specs: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        final_specs: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    """
    original_count = len(original_specs)
    final_count = len(final_specs)
    
    if original_count != final_count:
        logger.warning(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {original_count} ‚Üí {final_count}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        original_keys = {spec.get('name', '').lower() for spec in original_specs}
        final_keys = {spec.get('name', '').lower() for spec in final_specs}
        
        added_keys = final_keys - original_keys
        removed_keys = original_keys - final_keys
        
        if added_keys:
            logger.warning(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {list(added_keys)}")
        
        if removed_keys:
            logger.warning(f"‚ûñ –£–¥–∞–ª–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {list(removed_keys)}")
    else:
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {final_count}")
