"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –æ–¥–∏–Ω LLM –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ—Ö
"""
import json
import logging
import httpx
import os
from typing import Dict, Any
from dotenv import load_dotenv
from src.validation.content_validator import ContentValidator
from src.validation.language_validator import LanguageValidator
from src.llm.smart_llm_client import SmartLLMClient
from src.llm.structured_prompts import STRUCTURED_SYSTEM_PROMPT

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

class UnifiedContentGenerator:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–ï–°–¨ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –æ–¥–∏–Ω LLM –≤—ã–∑–æ–≤"""
    
    def __init__(self):
        self.validator = ContentValidator()
        self.language_validator = LanguageValidator()
        self.llm = SmartLLMClient()
        # LSI Enhancer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è lazy (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        self._lsi_enhancer = None
        self.use_lsi = False  # ‚ö†Ô∏è –í–´–ö–õ–Æ–ß–ï–ù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ (4x –¥–æ–ª—å—à–µ)
        self.unified_prompt = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –í–ï–°–¨ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: {product_title}
–û–±—ä—ë–º: {volume}
–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_type}
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {purpose}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {characteristics}
–õ–æ–∫–∞–ª—å: {locale}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ù–ê–†–£–®–ï–ù–ò–ï –í–õ–ï–ß–ï–¢ –û–®–ò–ë–ö–£:
- –°–æ–∑–¥–∞–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ
- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã: "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä", "–∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—É–¥–æ–±–Ω–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏", "—è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "—á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä", "—ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", "—á—É–¥–æ–≤–∞ —è–∫—ñ—Å—Ç—å", "–≤–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
- –ó–ê–ü–†–ï–©–ï–ù–û –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
- –ó–ê–ü–†–ï–©–ï–ù–û —É–ø–æ–º–∏–Ω–∞—Ç—å: —Ü–µ–Ω—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å, UAH, –≥—Ä–Ω, –¥–æ—Å—Ç–∞–≤–∫—É, –º–∞–≥–∞–∑–∏–Ω, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
- –û–ø–∏—Å–∞–Ω–∏–µ –î–û–õ–ñ–ù–û —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
- –û–ø–∏—Å—ã–≤–∞–π —Ç–æ–≤–∞—Ä –∏—Å—Ö–æ–¥—è –∏–∑ –µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
- –ü–ò–®–ò –ö–û–ù–ö–†–ï–¢–ù–û: –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏/–≤–æ–ª–æ—Å, –∫–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç

–ö–†–ò–¢–ò–ß–ù–û - –Ø–ó–´–ö:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û {language_instruction}
- –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –Ω–µ—Ç –±—É–∫–≤: {forbidden_letters}
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: {recommended_words}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¢–ï–ù–¢–£:

1. –û–ü–ò–°–ê–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞ —Å HTML —Ç–µ–≥–∞–º–∏, 6-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ 2 –∞–±–∑–∞—Ü–∞—Ö):
   - –ê–±–∑–∞—Ü 1 (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç, –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
   - –ê–±–∑–∞—Ü 2 (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
   - üîç SEO: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (LSI-–∫–ª—é—á–∏)
   - –ü—Ä–∏–º–µ—Ä: "–∫–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏" ‚Üí –π–æ–≥–∞-–º–∞—Ç, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –∫–æ–≤—Ä–∏–∫, –∞—Å–∞–Ω—ã, –ø–∏–ª–∞—Ç–µ—Å
   - –ù–ï –ø–µ—Ä–µ—á–∏—Å–ª—è–π! –í–ø–ª–µ—Ç–∞–π –û–†–ì–ê–ù–ò–ß–ù–û –≤ —Ç–µ–∫—Å—Ç
   - –ë–µ–∑ –≤–æ–¥—ã ‚Äî –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å—ë—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <p>...</p> –¥–ª—è –∞–±–∑–∞—Ü–µ–≤

2. –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê (3-6 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫):
   - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π generic-—Ñ—Ä–∞–∑—ã: "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
   - –ö–∞–∂–¥–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
   - –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö —Ç–æ–≤–∞—Ä–∞

3. FAQ (—Ä–æ–≤–Ω–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤):
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–µ
   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ generic-—Ñ—Ä–∞–∑
   - –ü–æ–∫—Ä—ã–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

4. –ö–û–ú–ú–ï–†–ß–ï–°–ö–ê–Ø –§–†–ê–ó–ê —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞–¥–µ–∂–æ–º –∏ –∂–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º:
   - RU: "–í –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ <strong>–∫—É–ø–∏—Ç—å [—Ç–æ–≤–∞—Ä –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ]</strong> —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –£–∫—Ä–∞–∏–Ω–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"
   - UA: "–£ –Ω–∞—à–æ–º—É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ –º–æ–∂–Ω–∞ <strong>–∫—É–ø–∏—Ç–∏ [—Ç–æ–≤–∞—Ä –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É]</strong> –∑ —à–≤–∏–¥–∫–æ—é –¥–æ—Å—Ç–∞–≤–∫–æ—é –ø–æ –£–∫—Ä–∞—ó–Ω—ñ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é —è–∫–æ—Å—Ç—ñ"

–ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–†–ò–ú–ï–† –û–ü–ò–°–ê–ù–ò–Ø:
"<p>–í–æ—Å–∫ –≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏ Simple USE, Ocean Blue (–ê–∑—É–ª–µ–Ω) –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ª–æ—Å –Ω–∞ –Ω–æ–≥–∞—Ö, —Ä—É–∫–∞—Ö, —Å–ø–∏–Ω–µ –∏ —Ç–µ–ª–µ. –û–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏, –≤–∫–ª—é—á–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é, –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–Ω–∫–∏—Ö –≤–æ–ª–æ—Å –¥–ª–∏–Ω–æ–π –æ—Ç 2 –º–º. –§–æ—Ä–º—É–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∑—É–ª–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –∫–æ–∂—É –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.</p><p>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –≤–æ—Å–∫–∞ –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è –≤ –µ–≥–æ –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ –∏ —É–¥–æ–±–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 –≥—Ä–∞–¥—É—Å–æ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –Ω–∞–Ω–æ—Å–∏—Ç—å –≤–æ—Å–∫ –±–µ–∑ —Ä–∏—Å–∫–∞ –æ–∂–æ–≥–æ–≤. –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞.</p>"

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ (–ù–ï –ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨):
‚ùå "–í–æ—Å–∫ –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏ - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
‚ùå "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
‚ùå –û–¥–∏–Ω –∞–±–∑–∞—Ü –±–µ–∑ —Ç–µ–≥–æ–≤ <p>
‚ùå –ú–µ–Ω–µ–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
  "description": "<p>–ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Å 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏</p><p>–≤—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏</p>",
  "advantages": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3"],
  "faq": [
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 1?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 1"}},
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 2?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 2"}},
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 3?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 3"}},
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 4?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 4"}},
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 5?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 5"}},
    {{"question": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 6?", "answer": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç 6"}}
  ],
  "note_buy": "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞–¥–µ–∂–æ–º"
}}

–ö–†–ò–¢–ò–ß–ù–û: –ì–ï–ù–ï–†–ò–†–£–ô –¢–û–õ–¨–ö–û –í–ê–õ–ò–î–ù–´–ô JSON –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –ò –ú–ê–†–ö–î–ê–£–ù –ë–õ–û–ö–û–í.

–í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ - –ª—É—á—à–µ –≤–µ—Ä–Ω–∏ –æ—à–∏–±–∫—É, —á–µ–º –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ü–†–ò–ú–ï–† –í–ê–õ–ò–î–ù–û–ì–û –û–¢–í–ï–¢–ê:
{{
  "description": "<p>–í–æ—Å–∫ –≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ Simple USE –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ–ø–∏–ª—è—Ü–∏–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ª–æ—Å –Ω–∞ –Ω–æ–≥–∞—Ö, —Ä—É–∫–∞—Ö, —Å–ø–∏–Ω–µ –∏ —Ç–µ–ª–µ. –§–æ—Ä–º—É–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–æ–∫–æ–ª–∞–¥–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –∫–æ–∂—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è 40 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –Ω–∞–Ω–æ—Å–∏—Ç—å –≤–æ—Å–∫ –±–µ–∑ —Ä–∏—Å–∫–∞ –æ–∂–æ–≥–æ–≤.</p><p>–í–æ—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤–æ–ª–æ—Å—ã –¥–ª–∏–Ω–æ–π –æ—Ç 2 –º–º –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏, –≤–∫–ª—é—á–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é. –ì–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è, –∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫ –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, —Ç–∞–∫ –∏ –≤ —Å–∞–ª–æ–Ω–∞—Ö –∫—Ä–∞—Å–æ—Ç—ã.</p>",
  "advantages": [
    "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏",
    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã",
    "–ü—Ä–∏—è—Ç–Ω—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –∞—Ä–æ–º–∞—Ç",
    "–£–¥–æ–±–Ω–∞—è –∫–∞—Ä—Ç—Ä–∏–¥–∂–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞",
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
  ],
  "faq": [
    {{"question": "–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –≤–æ—Å–∫?", "answer": "–í–æ—Å–∫ Simple USE –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏, –≤–∫–ª—é—á–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é, –±–ª–∞–≥–æ–¥–∞—Ä—è –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ."}},
    {{"question": "–ö–∞–∫–æ–≤–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–æ—Å –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏?", "answer": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ª–æ—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–µ–ø–∏–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 –º–º."}},
    {{"question": "–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–∫–∞?", "answer": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 –≥—Ä–∞–¥—É—Å–æ–≤, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ."}},
    {{"question": "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ—Å–∫ –¥–æ–º–∞?", "answer": "–î–∞, –≤–æ—Å–∫ –≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ —É–¥–æ–±–µ–Ω –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."}},
    {{"question": "–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–æ—Å–∫ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã?", "answer": "–í–æ—Å–∫ –∏–º–µ–µ—Ç –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏."}},
    {{"question": "–ù–∞ –∫–∞–∫–∏—Ö —É—á–∞—Å—Ç–∫–∞—Ö —Ç–µ–ª–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ—Å–∫?", "answer": "–í–æ—Å–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏ –Ω–æ–≥, —Ä—É–∫, —Å–ø–∏–Ω—ã –∏ —Ç–µ–ª–∞."}}
  ],
  "note_buy": "–í –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ <strong>–∫—É–ø–∏—Ç—å –≤–æ—Å–∫ –≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏ Simple USE</strong> —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –£–∫—Ä–∞–∏–Ω–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"
}}
"""
    
    @property
    def lsi_enhancer(self):
        """Lazy initialization LSI Enhancer"""
        if self._lsi_enhancer is None:
            from src.processing.lsi_enhancer import LSIEnhancer
            self._lsi_enhancer = LSIEnhancer()
        return self._lsi_enhancer
    
    async def generate_unified_content(self, product_facts: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–ï–°–¨ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –æ–¥–∏–Ω LLM –≤—ã–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not product_facts or not product_facts.get('title'):
            raise ValueError("‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        title = product_facts.get('title', '').strip()
        if len(title) < 5:
            raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: '{title}'")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—Å–º—è–≥—á–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) - –∏—â–µ–º –≤ specs!
        characteristics = product_facts.get('specs', {})  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ specs!
        if not characteristics:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            characteristics = {}
        
        logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö: '{title}', —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(characteristics)}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            language_instructions = self._get_language_instructions(locale)
            prompt_data = {
                'product_title': title,
                'volume': product_facts.get('volume', ''),
                'product_type': product_facts.get('product_type', ''),
                'purpose': await self._extract_purpose(product_facts),
                'characteristics': self._format_characteristics(characteristics),
                'locale': locale,
                'language_instruction': language_instructions['instruction'],
                'forbidden_letters': language_instructions['forbidden_letters'],
                'recommended_words': language_instructions['recommended_words']
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            formatted_prompt = self.unified_prompt.format(**prompt_data)
            
            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'title': title,
                'locale': locale,
                'type': 'unified_content'
            }
            
            # –û–¥–∏–Ω LLM –≤—ã–∑–æ–≤ —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            content = await self.llm.generate(
                prompt=formatted_prompt,
                context=context,
                max_tokens=2000,
                temperature=0.7,
                validate_content=True,  # ‚úÖ –í–ö–õ–Æ–ß–ò–¢–¨ –í–ê–õ–ò–î–ê–¶–ò–Æ
                locale=locale  # ‚úÖ –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            )
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                result = json.loads(content)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}")
                logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:500]}...")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–π JSON
                try:
                    # –ï—Å–ª–∏ JSON –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Å—Ç–∏
                    if content.strip().endswith('"description"') or content.strip().endswith('"description":'):
                        logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–π JSON...")
                        fixed_content = content + '": "<p>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.</p><p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö.</p>", "advantages": ["–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–£–¥–æ–±—Å—Ç–≤–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"], "faq": [{"question": "–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç?", "answer": "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏."}], "note_buy": "–í –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ <strong>–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä</strong> —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –£–∫—Ä–∞–∏–Ω–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"}'
                        result = json.loads(fixed_content)
                        logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        raise ValueError(f"LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")
                except (json.JSONDecodeError, ValueError) as fix_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON: {fix_error}")
                    raise ValueError(f"LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")
            
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            content = content.strip()
            
            try:
                parsed_content = json.loads(content)
                
                # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ß—Ç–æ –≤–µ—Ä–Ω—É–ª LLM
                logger.info(f"üîç LLM –≤–µ—Ä–Ω—É–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞: {type(parsed_content.get('description', '–ù–ï–¢'))}")
                if 'description' in parsed_content:
                    desc = parsed_content['description']
                    logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏—è: {str(desc)[:100]}...")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è
                if 'description' in parsed_content:
                    description = parsed_content['description']
                    if isinstance(description, list):
                        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ - —Å–ø–∏—Å–æ–∫, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å HTML —Ç–µ–≥–∞–º–∏
                        if len(description) >= 2:
                            parsed_content['description'] = f"<p>{description[0]}</p><p>{description[1]}</p>"
                        else:
                            # Fallback –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                            parsed_content['description'] = f"<p>{description[0] if description else ''}</p><p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ.</p>"
                        logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è: —Å–ø–∏—Å–æ–∫ ‚Üí HTML —Å—Ç—Ä–æ–∫–∞")
                    elif isinstance(description, str):
                        logger.info(f"üîß –û–ø–∏—Å–∞–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ç–µ–≥–∏")
                        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ HTML —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                        if not description.startswith('<p>'):
                            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç–µ–≥–∏
                            paragraphs = [p.strip() for p in description.split('\n\n') if p.strip()]
                            if len(paragraphs) >= 2:
                                parsed_content['description'] = f"<p>{paragraphs[0]}</p><p>{paragraphs[1]}</p>"
                            else:
                                # Fallback: —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                                sentences = [s.strip() + '.' for s in description.split('.') if s.strip()]
                                if len(sentences) >= 4:
                                    mid = len(sentences) // 2
                                    parsed_content['description'] = f"<p>{' '.join(sentences[:mid])}</p><p>{' '.join(sentences[mid:])}</p>"
                                else:
                                    parsed_content['description'] = f"<p>{description}</p><p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ.</p>"
                            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è: —Å—Ç—Ä–æ–∫–∞ ‚Üí HTML —Ç–µ–≥–∏")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–∏—Å–∞–Ω–∏—è: {type(description)}")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –Ø–∑—ã–∫–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                is_valid_lang, lang_error = self.language_validator.validate_content_language(parsed_content, locale)
                if not is_valid_lang:
                    logger.error(f"‚ùå –Ø–∑—ã–∫–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {lang_error}")
                    # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                    parsed_content = await self._retry_with_strict_language(product_facts, locale, lang_error)
                
                    # –ö–†–ò–¢–ò–ß–ù–û: –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if not self.validator.validate_all_content(parsed_content, locale):
                        raise ValueError("‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                
                # üîç LSI Enhancement: –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç LSI-–∫–ª—é—á–∞–º–∏
                if self.use_lsi:
                    try:
                        logger.info("üîç –ó–∞–ø—É—Å–∫–∞–µ–º LSI Enhancement...")
                        parsed_content = await self.lsi_enhancer.enhance_with_lsi(
                            content=parsed_content,
                            product_facts=product_facts,
                            locale=locale
                        )
                        logger.info("‚úÖ LSI Enhancement –∑–∞–≤–µ—Ä—à–µ–Ω")
                    except Exception as lsi_error:
                        logger.warning(f"‚ö†Ô∏è LSI Enhancement –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ: {lsi_error}")
                        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ LSI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                
                logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {locale}: {len(parsed_content)} –±–ª–æ–∫–æ–≤")
                return parsed_content
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
                logger.error(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {content}")
                raise e
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –ª—É—á—à–µ –æ—à–∏–±–∫–∞ —á–µ–º –∑–∞–≥–ª—É—à–∫–∞
            raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {title}: {e}")

    async def generate_unified_content_structured(self, product_facts: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–ï–°–¨ –∫–æ–Ω—Ç–µ–Ω—Ç —Å Structured Output –∏ —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not product_facts or not product_facts.get('title'):
            raise ValueError("‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        title = product_facts.get('title', '').strip()
        if len(title) < 5:
            raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: '{title}'")
        
        logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: '{title}' ({locale})")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å Structured Output
            structured_content = await self.llm.generate_content_with_structured_output(
                parsed_data=product_facts,
                locale=locale,
                system_prompt=STRUCTURED_SYSTEM_PROMPT,
                max_retries=3
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            converted_content = self._convert_structured_to_legacy(structured_content, locale)
            
            logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {title} ({locale})")
            return converted_content
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {title}: {e}")

    def _convert_structured_to_legacy(self, structured_content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        description_obj = structured_content.get('description', {})
        paragraph_1 = description_obj.get('paragraph_1', '')
        paragraph_2 = description_obj.get('paragraph_2', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –æ–ø–∏—Å–∞–Ω–∏–µ
        description_html = f"<p>{paragraph_1}</p><p>{paragraph_2}</p>"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        benefits_list = []
        for benefit in structured_content.get('benefits', []):
            title = benefit.get('title', '')
            description = benefit.get('description', '')
            benefits_list.append(f"{title}: {description}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FAQ
        faq_list = []
        for faq_item in structured_content.get('faq', []):
            faq_list.append({
                'question': faq_item.get('question', ''),
                'answer': faq_item.get('answer', '')
            })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return {
            'description': description_html,
            'advantages': benefits_list,
            'faq': faq_list,
            'note_buy': structured_content.get('note_buy', ''),
            'characteristics': structured_content.get('characteristics', [])
        }
    
    async def _extract_purpose(self, product_facts: Dict[str, Any]) -> str:
        """‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–´–• —Ç–æ–≤–∞—Ä–æ–≤"""
        title = product_facts.get('title', '')
        characteristics = product_facts.get('specs', [])
        
        # ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ LLM —Å fallback
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            specs_text = ""
            if isinstance(characteristics, list):
                specs_text = "\n".join([f"- {spec.get('label', '')}: {spec.get('value', '')}" for spec in characteristics[:5]])
            elif isinstance(characteristics, dict):
                specs_text = "\n".join([f"- {k}: {v}" for k, v in list(characteristics.items())[:5]])
            
            prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:

–ù–∞–∑–≤–∞–Ω–∏–µ: {title}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
{specs_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–ø—Ä–µ–¥–µ–ª–∏ –¢–û–ß–ù–û–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "—É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π"
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º
- –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç):
[–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞]"""

            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'title': title,
                'type': 'purpose_extraction'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
            purpose = await self.llm.generate(
                prompt=prompt,
                context=context,
                max_tokens=100,
                temperature=0.3,
                validate_content=False,  # Purpose extraction –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                locale='ru'  # Purpose –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            )
            
            logger.info(f"‚úÖ LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: '{title}' ‚Üí '{purpose}'")
            return purpose.strip()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
            return "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback
    
    
    def _format_characteristics(self, characteristics) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Å–ø–∏—Å–æ–∫ –∏ —Å–ª–æ–≤–∞—Ä—å)"""
        if not characteristics:
            return "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        formatted = []
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if isinstance(characteristics, list):
            for item in characteristics:
                if isinstance(item, dict) and 'label' in item and 'value' in item:
                    formatted.append(f"- {item['label']}: {item['value']}")
                elif isinstance(item, tuple) and len(item) == 2:
                    formatted.append(f"- {item[0]}: {item[1]}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        elif isinstance(characteristics, dict):
            for key, value in characteristics.items():
                formatted.append(f"- {key}: {value}")
        
        return "\n".join(formatted) if formatted else "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    
    def _get_language_instructions(self, locale: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if locale == 'ru':
            return {
                'instruction': '–°–¢–†–û–ì–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',
                'forbidden_letters': '“ë —î —ñ —ó',
                'recommended_words': '—ç—Ç–æ, –∫–æ—Ç–æ—Ä—ã–π, –±—É–¥–µ—Ç, –º–æ–∂–Ω–æ'
            }
        else:  # ua
            return {
                'instruction': '–°–¢–†–û–ì–û —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É',
                'forbidden_letters': '—ã —ç —ä —ë',
                'recommended_words': '—Ü–µ, —è–∫–∏–π, –±—É–¥–µ, –º–æ–∂–Ω–∞'
            }
    
    async def _retry_with_strict_language(self, product_facts: dict, locale: str, error: str) -> dict:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
        logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Å—Ç—Ä–æ–≥–∏–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏: {error}")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        language_instructions = self._get_language_instructions(locale)
        strict_prompt = f"""
–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —è–∑—ã–∫–æ–≤—ã–µ –æ—à–∏–±–∫–∏: {error}

–ò—Å–ø—Ä–∞–≤—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ, —Å–æ–±–ª—é–¥–∞—è –°–¢–†–û–ì–û {language_instructions['instruction']}.

–î–ê–ù–ù–´–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: {product_facts.get('title', '')}
–û–±—ä—ë–º: {product_facts.get('volume', '')}
–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_facts.get('product_type', '')}
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {self._format_characteristics(product_facts.get('specs', {}))}

–ö–†–ò–¢–ò–ß–ù–û - –Ø–ó–´–ö:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û {language_instructions['instruction']}
- –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –Ω–µ—Ç –±—É–∫–≤: {language_instructions['forbidden_letters']}
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: {language_instructions['recommended_words']}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –û–ü–ò–°–ê–ù–ò–ï (—Å–ø–∏—Å–æ–∫ –∞–±–∑–∞—Ü–µ–≤): 2 –∞–±–∑–∞—Ü–∞, 6-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
2. –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê (—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫): 3-6 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤  
3. FAQ (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤): 6 –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤ —Å –∫–ª—é—á–∞–º–∏ question, answer
4. NOTE_BUY (—Å—Ç—Ä–æ–∫–∞): –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞

–§–û–†–ú–ê–¢ JSON:
{{
  "description": ["–ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –æ–ø–∏—Å–∞–Ω–∏—è", "–≤—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü –æ–ø–∏—Å–∞–Ω–∏—è"],
  "advantages": ["–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3"],
  "faq": [
    {{"question": "–≤–æ–ø—Ä–æ—Å 1", "answer": "–æ—Ç–≤–µ—Ç 1"}},
    {{"question": "–≤–æ–ø—Ä–æ—Å 2", "answer": "–æ—Ç–≤–µ—Ç 2"}}
  ],
  "note_buy": "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
}}
"""
        
        try:
            # ‚úÖ Smart Routing: –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context = {
                'title': product_facts.get('title', ''),
                'locale': locale,
                'type': 'retry_generation'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            content = await self.llm.generate(
                prompt=strict_prompt,
                context=context,
                max_tokens=2000,
                temperature=0.3,
                validate_content=True,  # ‚úÖ –í–ö–õ–Æ–ß–ò–¢–¨ –í–ê–õ–ò–î–ê–¶–ò–Æ
                locale=locale  # ‚úÖ –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            )
            
            # –ü–∞—Ä—Å–∏–º JSON
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            content = content.strip()
            
            parsed_content = json.loads(content)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            if 'description' in parsed_content:
                description = parsed_content['description']
                if isinstance(description, str):
                    # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                    paragraphs = [p.strip() for p in description.split('\n\n') if p.strip()]
                    if len(paragraphs) < 2:
                        # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –º–∞–ª–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                        sentences = [s.strip() + '.' for s in description.split('.') if s.strip()]
                        if len(sentences) >= 4:
                            mid = len(sentences) // 2
                            paragraphs = [
                                ' '.join(sentences[:mid]),
                                ' '.join(sentences[mid:])
                            ]
                    parsed_content['description'] = paragraphs
                    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤ retry: {len(paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –µ—â–µ —Ä–∞–∑
            is_valid_lang, lang_error = self.language_validator.validate_content_language(parsed_content, locale)
            if not is_valid_lang:
                raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: LLM –Ω–µ –º–æ–∂–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ: {lang_error}")
            
            logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {locale}")
            return parsed_content
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            raise ValueError(f"‚ùå –ó–ê–ü–†–ï–©–ï–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ: {e}")
    
