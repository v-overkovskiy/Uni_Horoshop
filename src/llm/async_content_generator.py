"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π LLM –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import os
import json
import logging
from typing import Dict, List, Any, Optional
import httpx

logger = logging.getLogger(__name__)

class AsyncLLMContentGenerator:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OpenAI API key not provided")
        
        self.model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
        self.base_url = "https://api.openai.com/v1/chat/completions"
    
    async def generate_content(self, product_data: Dict[str, Any], locale: str, client: httpx.AsyncClient) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            facts = self._prepare_facts(product_data, locale)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = await self._call_llm(facts, locale, client)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            validated_content = self._validate_content(content, locale)
            
            return validated_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {locale}: {e}")
            raise e
    
    async def call_api(self, prompt: str, client: httpx.AsyncClient, max_tokens: int = 1000, temperature: float = 0.3) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM API.
        """
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": self.model,
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": max_tokens,
                "temperature": temperature
            }
            
            response = await client.post(
                self.base_url,
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result
            else:
                logger.error(f"LLM API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                raise Exception(f"LLM API error: {response.status_code}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM API: {e}")
            raise e
    
    def _format_specs_for_prompt(self, specs):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not specs:
            return "–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
        
        if isinstance(specs, list):
            # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            formatted = []
            for spec in specs:
                if isinstance(spec, dict):
                    formatted.append(f"{spec.get('label', '')}: {spec.get('value', '')}")
                else:
                    formatted.append(str(spec))
            return "\n".join(formatted)
        elif isinstance(specs, dict):
            # –°–ª–æ–≤–∞—Ä—å
            formatted = []
            for key, value in specs.items():
                formatted.append(f"{key}: {value}")
            return "\n".join(formatted)
        else:
            return str(specs)
    
    def _prepare_facts(self, product_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        facts = {
            'title': product_data.get('title', ''),
            'description': product_data.get('description', ''),
            'specs': product_data.get('specs', []),
            'locale': locale
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ
        if locale == 'ua':
            facts['language'] = '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
            facts['currency'] = '–≥—Ä–Ω'
        else:
            facts['language'] = '—Ä—É—Å—Å–∫–∏–π'
            facts['currency'] = '—Ä—É–±'
        
        return facts
    
    async def _call_llm(self, facts: Dict[str, Any], locale: str, client: httpx.AsyncClient) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤
            prompt = self._create_prompt(facts, locale)
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": self.model,
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 2000,
                "temperature": 0.3
            }
            
            response = await client.post(
                self.base_url,
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å)
                try:
                    # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
                    if content.startswith('```json'):
                        content = content[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                    if content.endswith('```'):
                        content = content[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                    content = content.strip()
                    
                    parsed_content = json.loads(content)
                    logger.info(f"üîç LLM –æ—Ç–≤–µ—Ç –¥–ª—è {locale}: {parsed_content}")
                    return parsed_content
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
                    logger.error(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {content}")
                    raise e
            else:
                logger.error(f"LLM API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                raise Exception(f"LLM API error: {response.status_code}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM: {e}")
            raise e
    
    def _create_prompt(self, facts: Dict[str, Any], locale: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM"""
        if locale == 'ua':
            return f"""
            –°—Ç–≤–æ—Ä–∏ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤:
            –ù–∞–∑–≤–∞: {facts['title']}
            –û–ø–∏—Å: {facts['description']}
            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {self._format_specs_for_prompt(facts['specs'])}
            
            –ü–æ–≤–µ—Ä–Ω–∏ JSON –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–ª—è–º–∏:
            - description: –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É (4-6 —Ä–µ—á–µ–Ω—å)
            - advantages: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∞–≥ (3-4 –ø—É–Ω–∫—Ç–∏)
            - specs: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—É
            - faq: —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (6 –ø—É–Ω–∫—Ç—ñ–≤)
            - note_buy: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
            """
        else:
            return f"""
            –°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ–≤:
            –ù–∞–∑–≤–∞–Ω–∏–µ: {facts['title']}
            –û–ø–∏—Å–∞–Ω–∏–µ: {facts['description']}
            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {self._format_specs_for_prompt(facts['specs'])}
            
            –í–µ—Ä–Ω–∏ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
            - description: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
            - advantages: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (3-4 –ø—É–Ω–∫—Ç–∞)
            - specs: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            - faq: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (6 –ø—É–Ω–∫—Ç–æ–≤)
            - note_buy: –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –æ –ø–æ–∫—É–ø–∫–µ
            """
    
    def _validate_content(self, content: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        required_fields = ['description', 'advantages', 'specs', 'faq', 'note_buy']
        
        for field in required_fields:
            if field not in content:
                content[field] = []
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –æ—Ç–≤–µ—Ç–µ LLM")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è FAQ
        if isinstance(content.get('faq'), list) and len(content['faq']) < 6:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FAQ: {len(content['faq'])}/6")
            # –î–æ–ø–æ–ª–Ω—è–µ–º FAQ –¥–æ 6 –ø—É–Ω–∫—Ç–æ–≤
            while len(content['faq']) < 6:
                content['faq'].append({
                    'question': f'–í–æ–ø—Ä–æ—Å {len(content["faq"]) + 1}',
                    'answer': '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å'
                })
        
        return content
