"""
LLM –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import os
import json
import logging
from typing import Dict, List, Any, Optional
from openai import OpenAI

logger = logging.getLogger(__name__)

class LLMContentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OpenAI API key not provided")
        
        self.client = OpenAI(api_key=self.api_key)
        self.model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
    
    def generate_content(self, product_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            facts = self._prepare_facts(product_data, locale)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = self._call_llm(facts, locale)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            validated_content = self._validate_content(content, locale)
            
            return validated_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {locale}: {e}")
            raise e  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    
    def call_api(self, prompt: str, max_tokens: int = 1000, temperature: float = 0.3) -> str:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM API.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SanityFixer –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.
        """
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            content = response.choices[0].message.content
            if not content or content.strip() == "":
                logger.error("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return ""
            
            return content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM API: {e}")
            return ""

    def call_api_with_json_mode(self, prompt: str, max_tokens: int = 1000, temperature: float = 0.1) -> str:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM API —Å JSON-—Å—Ç—Ä–æ–≥–∏–º —Ä–µ–∂–∏–º–æ–º.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SanityFixer –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º JSON.
        """
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=temperature,
                max_tokens=max_tokens,
                response_format={"type": "json_object"}  # –°—Ç—Ä–æ–≥–∏–π JSON —Ä–µ–∂–∏–º
            )
            
            content = response.choices[0].message.content
            if not content or content.strip() == "":
                logger.error("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ JSON —Ä–µ–∂–∏–º–µ")
                return ""
            
            return content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM API –≤ JSON —Ä–µ–∂–∏–º–µ: {e}")
            return ""

    def repair_description(self, product_data: Dict[str, Any], locale: str) -> str:
        """–†–µ–º–æ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è - –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ LLM –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            facts = self._prepare_facts(product_data, locale)
            content = self._call_llm(facts, locale, is_repair=True)
            
            if 'description' in content and content['description']:
                return content['description']
            else:
                raise ValueError("LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–µ–º–æ–Ω—Ç–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {locale}: {e}")
            raise e
    
    def _prepare_facts(self, product_data: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        return {
            "title": product_data.get("title", ""),
            "description": product_data.get("description", ""),
            "brand": product_data.get("brand", ""),
            "product_type": product_data.get("product_type", ""),
            "volume": product_data.get("volume", ""),
            "specs": product_data.get("specs", []),
            "locale": locale
        }
    
    def _call_llm(self, facts: Dict[str, Any], locale: str, is_repair: bool = False) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        prompt = self._build_prompt(facts, locale, is_repair)
        
        # –°—Ç—Ä–æ–≥–∞—è JSON —Å—Ö–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏–π
        json_schema = {
            "type": "object",
            "properties": {
                "description": {"type": "string", "maxLength": 600},
                "specs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string"},
                            "value": {"type": "string"}
                        },
                        "required": ["name", "value"]
                    },
                    "maxItems": 8
                },
                "advantages": {
                    "type": "array",
                    "items": {"type": "string"},
                    "maxItems": 4
                },
                "faq": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "question": {"type": "string"},
                            "answer": {"type": "string"}
                        },
                        "required": ["question", "answer"]
                    },
                    "minItems": 6,
                    "maxItems": 6
                }
            },
            "required": ["description", "specs", "advantages", "faq"]
        }
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self._get_system_prompt(locale)},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=1000,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏–π
            response_format={"type": "json_object"}  # –°—Ç—Ä–æ–≥–∏–π JSON —Ä–µ–∂–∏–º
        )
        
        content = response.choices[0].message.content
        logger.info(f"üîç LLM –æ—Ç–≤–µ—Ç –¥–ª—è {locale}: {content[:200]}...")
        
        if not content or content.strip() == "":
            logger.error(f"LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {locale}")
            raise ValueError(f"LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {locale}")
        
        try:
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            content = content.strip()
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é { –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é }
            start_idx = content.find('{')
            end_idx = content.rfind('}')
            
            if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
                content = content[start_idx:end_idx + 1]
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ JSON
            import re
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            content = re.sub(r'[\x00-\x1f\x7f-\x9f]', ' ', content)
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            content = re.sub(r'\s+', ' ', content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –Ω–µ –æ–±—Ä–µ–∑–∞–Ω (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏)
            open_braces = content.count('{')
            close_braces = content.count('}')
            open_brackets = content.count('[')
            close_brackets = content.count(']')
            
            if open_braces != close_braces or open_brackets != close_brackets:
                logger.error(f"JSON –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è {locale}: –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö {{ {open_braces}, –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö }} {close_braces}")
                logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: {content}")
                raise ValueError(f"LLM –≤–µ—Ä–Ω—É–ª –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON –¥–ª—è {locale}")
            
            return json.loads(content)
        except json.JSONDecodeError as e:
            logger.error(f"LLM –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –¥–ª—è {locale}: {e}")
            logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: {content}")
            raise ValueError(f"LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è {locale}")
    
    def _build_prompt(self, facts: Dict[str, Any], locale: str, is_repair: bool = False) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        if locale == 'ru':
            repair_text = "–†–ï–ú–û–ù–¢: " if is_repair else ""
            return f"""
{repair_text}–°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ: {facts['title']}
–ë—Ä–µ–Ω–¥: {facts['brand']}
–¢–∏–ø: {facts['product_type']}
–û–±—ä–µ–º: {facts['volume']}

–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {facts['description']}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- description: –î–∞–π —Ä–æ–≤–Ω–æ 6 –∫—Ä–∞—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–∑–±–∏—Ç—ã—Ö –Ω–∞ 2 –∞–±–∑–∞—Ü–∞ –ø–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º
- –û–±—â–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: 200-300 —Å–∏–º–≤–æ–ª–æ–≤

–°–¢–†–û–ì–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º!

–°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏:
- description: 2 –∞–±–∑–∞—Ü–∞ –ø–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–π (–≤—Å–µ–≥–æ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
- specs: –º–∞—Å—Å–∏–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–º–∏–Ω–∏–º—É–º 8, –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–∞–π—Ç–∞)
- advantages: –º–∞—Å—Å–∏–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 4)
- faq: –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤ (—Ä–æ–≤–Ω–æ 6)

–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Å–∞–π—Ç–∞: {self._format_specs_for_prompt(facts['specs'])}

–í—Å–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö —Å–ª–æ–≤.

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
{{
  "description": "–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü—è—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –®–µ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
  "specs": [{{"name": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", "value": "–ó–Ω–∞—á–µ–Ω–∏–µ"}}],
  "advantages": ["–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2"],
  "faq": [{{"question": "–í–æ–ø—Ä–æ—Å?", "answer": "–û—Ç–≤–µ—Ç"}}]
}}
"""
        else:  # ua
            repair_text = "–†–ï–ú–û–ù–¢: " if is_repair else ""
            return f"""
{repair_text}–°—Ç–≤–æ—Ä–∏ —è–∫—ñ—Å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

–ù–∞–∑–≤–∞: {facts['title']}
–ë—Ä–µ–Ω–¥: {facts['brand']}
–¢–∏–ø: {facts['product_type']}
–û–±'—î–º: {facts['volume']}

–Ü—Å–Ω—É—é—á–∏–π –æ–ø–∏—Å: {facts['description']}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û:
- description: –î–∞–π —Ä—ñ–≤–Ω–æ 6 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–µ—á–µ–Ω—å, —Ä–æ–∑–±–∏—Ç–∏—Ö –Ω–∞ 2 –∞–±–∑–∞—Ü–∏ –ø–æ 3 —Ä–µ—á–µ–Ω–Ω—è
- –ö–æ–∂–Ω–µ —Ä–µ—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º —Ç–∞ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–º
- –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –æ–ø–∏—Å—É: 200-300 —Å–∏–º–≤–æ–ª—ñ–≤

–°–¢–†–û–ì–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–º JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ –ø–æ—è—Å–Ω–µ–Ω—å!
JSON –º–∞—î –±—É—Ç–∏ –ø–æ–≤–Ω–∏–º —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º!

–°—Ç–≤–æ—Ä–∏ JSON –∑ –ø–æ–ª—è–º–∏:
- description: 2 –∞–±–∑–∞—Ü–∏ –ø–æ 3 —Ä–µ—á–µ–Ω–Ω—è –∫–æ–∂–µ–Ω (–≤—Å—å–æ–≥–æ 6 —Ä–µ—á–µ–Ω—å)
- specs: –º–∞—Å–∏–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–º—ñ–Ω—ñ–º—É–º 8, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ —Å–∞–π—Ç—É)
- advantages: –º–∞—Å–∏–≤ –ø–µ—Ä–µ–≤–∞–≥ (–º—ñ–Ω—ñ–º—É–º 4)
- faq: –º–∞—Å–∏–≤ –ø–∏—Ç–∞–Ω—å-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (—Ä—ñ–≤–Ω–æ 6)

–ü–µ—Ä–µ–¥–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ —Å–∞–π—Ç—É: {self._format_specs_for_prompt(facts['specs'])}

–í—Å–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –±–µ–∑ —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.

–ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É:
{{
  "description": "–ü–µ—Ä—à–µ —Ä–µ—á–µ–Ω–Ω—è. –î—Ä—É–≥–µ —Ä–µ—á–µ–Ω–Ω—è. –¢—Ä–µ—Ç—î —Ä–µ—á–µ–Ω–Ω—è.\n\n–ß–µ—Ç–≤–µ—Ä—Ç–µ —Ä–µ—á–µ–Ω–Ω—è. –ü'—è—Ç–µ —Ä–µ—á–µ–Ω–Ω—è. –®–æ—Å—Ç–µ —Ä–µ—á–µ–Ω–Ω—è.",
  "specs": [{{"name": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", "value": "–ó–Ω–∞—á–µ–Ω–Ω—è"}}],
  "advantages": ["–ü–µ—Ä–µ–≤–∞–≥–∞ 1", "–ü–µ—Ä–µ–≤–∞–≥–∞ 2"],
  "faq": [{{"question": "–ü–∏—Ç–∞–Ω–Ω—è?", "answer": "–í—ñ–¥–ø–æ–≤—ñ–¥—å"}}]
}}
"""
    
    def _get_system_prompt(self, locale: str) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        if locale == 'ru':
            return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.
–°–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –æ–±—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""
        else:  # ua
            return """
–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—ñ—Å–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É.
–°—Ç–≤–æ—Ä—é–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
–£–Ω–∏–∫–∞–π —à–∞–±–ª–æ–Ω–Ω–∏—Ö —Ñ—Ä–∞–∑ —ñ –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω—å.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ —Ñ–∞–∫—Ç–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
"""
    
    def _format_specs_for_prompt(self, specs):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not specs:
            return "–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
        
        if isinstance(specs, list):
            # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            formatted = []
            for spec in specs:
                if isinstance(spec, dict):
                    formatted.append(f"{spec.get('label', '')}: {spec.get('value', '')}")
                else:
                    formatted.append(str(spec))
            return "\n".join(formatted)
        elif isinstance(specs, dict):
            # –°–ª–æ–≤–∞—Ä—å
            formatted = []
            for key, value in specs.items():
                formatted.append(f"{key}: {value}")
            return "\n".join(formatted)
        else:
            return str(specs)
    
    

