"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import asyncio
import logging
from typing import Dict, Any, List
import pandas as pd
from datetime import datetime

logger = logging.getLogger(__name__)

class AsyncExporter:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, output_file: str = "descriptions.xlsx"):
        self.output_file = output_file
        self.results: List[Dict[str, Any]] = []
        self.write_lock = asyncio.Lock()
    
    async def add_result(self, result: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        async with self.write_lock:
            self.results.append(result)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {result.get('url', 'unknown')}")
    
    async def save_product(self, result: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∞–ª–∏–∞—Å –¥–ª—è add_result)"""
        await self.add_result(result)
    
    async def export_all(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel"""
        async with self.write_lock:
            try:
                if not self.results:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    return {'success': False, 'message': 'No results to export'}
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
                excel_data = []
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ input_index –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑ urls.txt
                sorted_results = sorted(self.results, key=lambda x: x.get('input_index', 0))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                max_index = max([result.get('input_index', 0) for result in self.results])
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                results_by_index = {result.get('input_index', 0): result for result in self.results}
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
                all_results = []
                for i in range(1, max_index + 1):
                    if i in results_by_index:
                        all_results.append(results_by_index[i])
                    else:
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        empty_result = {
                            'input_index': i,
                            'url': f'missing_position_{i}',
                            'status': 'missing',
                            'ru_html': '',
                            'ua_html': '',
                            'ru_title': '',
                            'ua_title': '',
                            'ru_hero_image': '',
                            'ua_hero_image': '',
                            'processing_time': 0.0,
                            'error': f'Position {i} was not processed',
                            'budget_stats': '',
                            'hero_quality': 0.0,
                            'calls_per_locale': 0,
                            'canonical_slug': '',
                            'ru_valid': False,
                            'ua_valid': False
                        }
                        all_results.append(empty_result)
                        logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {i}")
                
                # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ) –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                for result in all_results:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    ru_html = result.get('ru_html', '')
                    ua_html = result.get('ua_html', '')
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ HTML
                    ru_title = result.get('ru_title', '')
                    logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: result['ru_title'] = '{ru_title}'")
                    
                    if not ru_title:
                        ru_title = self._extract_title_from_html(ru_html)
                        logger.warning(f"‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä: ru_title –ø—É—Å—Ç–æ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ HTML: '{ru_title}'")
                    
                    ua_title = result.get('ua_title', '')
                    logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: result['ua_title'] = '{ua_title}'")
                    
                    if not ua_title:
                        ua_title = self._extract_title_from_html(ua_html)
                        logger.warning(f"‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä: ua_title –ø—É—Å—Ç–æ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ HTML: '{ua_title}'")
                    
                    # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
                    if ru_title and len(ru_title) > 0:
                        if ru_title[0].islower():
                            ru_title = ru_title[0].upper() + ru_title[1:]
                            logger.info(f"üîß –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è RU –Ω–∞–∑–≤–∞–Ω–∏—è: '{ru_title}'")
                    
                    if ua_title and len(ua_title) > 0:
                        if ua_title[0].islower():
                            ua_title = ua_title[0].upper() + ua_title[1:]
                            logger.info(f"üîß –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è UA –Ω–∞–∑–≤–∞–Ω–∏—è: '{ua_title}'")
                    
                    # üìù –§–ò–ù–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
                    logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: –§–∏–Ω–∞–ª—å–Ω—ã–π ru_title = '{ru_title}'")
                    logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: –§–∏–Ω–∞–ª—å–Ω—ã–π ua_title = '{ua_title}'")
                    if ru_title:
                        logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ RU = '{ru_title[0]}' - {'‚úÖ –ë–û–õ–¨–®–ê–Ø' if ru_title[0].isupper() else '‚ùå –º–∞–ª–µ–Ω—å–∫–∞—è'}")
                    if ua_title:
                        logger.info(f"üìù –≠–ö–°–ü–û–†–¢–ï–†: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ UA = '{ua_title[0]}' - {'‚úÖ –ë–û–õ–¨–®–ê–Ø' if ua_title[0].isupper() else '‚ùå –º–∞–ª–µ–Ω—å–∫–∞—è'}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    ru_hero_image = self._extract_hero_image_from_html(ru_html) or result.get('ru_hero_image', '')
                    ua_hero_image = self._extract_hero_image_from_html(ua_html) or result.get('ua_hero_image', '')
                    
                    # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    processing_time = result.get('processing_time', 0.0)
                    
                    # –û—à–∏–±–∫–∏
                    errors = result.get('error', '') or result.get('errors', '')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞
                    budget_stats = result.get('budget_stats', '')
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è HTML
                    ru_valid = self._validate_html_content(ru_html)
                    ua_valid = self._validate_html_content(ua_html)

                    row = {
                        'Input_Index': result.get('input_index', 0),
                        'Status': result.get('status', 'unknown'),
                        'URL': result.get('url', ''),
                        'RU_Title': ru_title,
                        'UA_Title': ua_title,
                        'RU_HTML': ru_html,
                        'UA_HTML': ua_html,
                        'RU_Hero_Image': ru_hero_image,
                        'UA_Hero_Image': ua_hero_image,
                        'Processing_Time': processing_time,
                        'Errors': errors,
                        'Budget_Stats': budget_stats,
                        'Adapter_Version': '2.0',
                        'Hero_Quality': result.get('hero_quality', 0.0),
                        'Calls_Per_Locale': result.get('calls_per_locale', 0),
                        'Canonical_Slug': result.get('canonical_slug', ''),
                        'RU_Valid': '–ò–°–¢–ò–ù–ê' if ru_valid else '–õ–û–ñ–¨',
                        'UA_Valid': '–ò–°–¢–ò–ù–ê' if ua_valid else '–õ–û–ñ–¨',
                        'Timestamp': datetime.now().isoformat()
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
                    if 'error' in result:
                        row['Error'] = result['error']
                    
                    excel_data.append(row)
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                df = pd.DataFrame(excel_data)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    df.to_excel(self.output_file, index=False)
                    logger.info(f"‚úÖ –§–∞–π–ª {self.output_file} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω")
                except PermissionError:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å timestamp
                    import time
                    timestamp = int(time.time())
                    fallback_file = f"descriptions_{timestamp}.xlsx"
                    df.to_excel(fallback_file, index=False)
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.output_file} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {fallback_file}")
                    self.output_file = fallback_file
                
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {self.output_file}")
                logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(excel_data)}")
                
                return {
                    'success': True,
                    'file': self.output_file,
                    'rows': len(excel_data),
                    'message': f'Exported {len(excel_data)} results to {self.output_file}'
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                return {'success': False, 'error': str(e)}
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.results:
            return {'total': 0, 'successful': 0, 'failed': 0}
        
        total = len(self.results)
        successful = sum(1 for r in self.results if r.get('status') == 'success')
        failed = total - successful
        
        return {
            'total': total,
            'successful': successful,
            'failed': failed,
            'success_rate': successful / total if total > 0 else 0.0
        }
    
    def _extract_title_from_html(self, html: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ HTML —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        import re
        try:
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ h2 —Å –∫–ª–∞—Å—Å–æ–º prod-title
            title_match = re.search(r'<h2[^>]*class="prod-title"[^>]*>(.*?)</h2>', html, re.DOTALL)
            if title_match:
                title = title_match.group(1).strip()
                
                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º
                if title and len(title) > 0:
                    if title[0].islower():
                        logger.warning(f"‚ö†Ô∏è _extract_title_from_html: –º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞ '{title}'")
                        title = title[0].upper() + title[1:]
                        logger.info(f"‚úÖ _extract_title_from_html: –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ '{title}'")
                        
                return title
            
            # Fallback: –∏—â–µ–º –ª—é–±–æ–π h2
            h2_match = re.search(r'<h2[^>]*>(.*?)</h2>', html, re.DOTALL)
            if h2_match:
                title = h2_match.group(1).strip()
                
                # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º
                if title and len(title) > 0:
                    if title[0].islower():
                        logger.warning(f"‚ö†Ô∏è _extract_title_from_html (fallback): –º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤–∞ '{title}'")
                        title = title[0].upper() + title[1:]
                        logger.info(f"‚úÖ _extract_title_from_html (fallback): –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ '{title}'")
                        
                return title
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML: {e}")
        
        return ""
    
    def _extract_hero_image_from_html(self, html: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ HTML"""
        import re
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ div.product-photo
        img_match = re.search(r'<div[^>]*class="product-photo"[^>]*>.*?<img[^>]*src="([^"]*)"', html, re.DOTALL)
        if img_match:
            return img_match.group(1)
        return ""
    
    def _validate_html_content(self, html: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É"""
        if not html or len(html.strip()) < 100:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
        if 'error-message' in html:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = ['<h2>', '<div class="ds-desc">']
        for section in required_sections:
            if section not in html:
                return False
        
        return True
