"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import asyncio
import logging
import re
from typing import Dict, Any, Optional, List
import httpx
from concurrent.futures import ThreadPoolExecutor

# ===== –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø ROUND 3 =====
# –ó–∞–º–µ–Ω—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –¥–ª—è —É–ø—Ä—è–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
UA_TO_RU_MAP = str.maketrans({
    '—ñ': '–∏', '–Ü': '–ò',
    '—ó': '–∏', '–á': '–ò',
    '—î': '–µ', '–Ñ': '–ï',
    '“ë': '–≥', '“ê': '–ì',
})

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ labels —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
SPEC_LABEL_TRANSLATIONS = {
    'ru': {
        '–∫—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫': '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å',
        '–∫—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞': '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è',
        '–∫—Ä–∞—ó–Ω–∞': '–°—Ç—Ä–∞–Ω–∞',
        '—Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç': '–¶–∏—Ñ–µ—Ä–±–ª–∞—Ç',
        '–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ': '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
        '–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–∏': '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
    },
    'ua': {
        '—Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': '–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫',
        '—Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': '–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞',
        '—Å—Ç—Ä–∞–Ω–∞': '–ö—Ä–∞—ó–Ω–∞',
        '—Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç': '–¶–∏—Ñ–µ—Ä–±–ª–∞—Ç',
        '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': '–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ',
    }
}

def normalize_ru_specs_round3(specs: List[Dict]) -> List[Dict]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è Round 3 - –∑–∞–º–µ–Ω—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º labels"""
    if not specs:
        return specs
    
    normalized = []
    for spec in specs:
        label = str(spec.get('label', ''))
        value = str(spec.get('value', ''))
        
        # –®–∞–≥ 1: –ó–∞–º–µ–Ω—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
        label = label.translate(UA_TO_RU_MAP)
        value = value.translate(UA_TO_RU_MAP)
        
        # –®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ–¥–∏–º label –µ—Å–ª–∏ –æ–Ω –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
        label_lower = label.lower()
        if label_lower in SPEC_LABEL_TRANSLATIONS['ru']:
            label = SPEC_LABEL_TRANSLATIONS['ru'][label_lower]
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ label: '{spec.get('label', '')}' ‚Üí '{label}'")
        
        normalized.append({'label': label, 'value': value})
    
    return normalized

from src.fetcher.fallback_fetcher import FallbackFetcher
from src.llm.async_content_generator import AsyncLLMContentGenerator
from src.processing.async_content_critic import AsyncContentCritic
from src.processing.fragment_renderer import ProductFragmentRenderer
from src.processing.enhanced_note_buy_generator import EnhancedNoteBuyGenerator
from src.processing.description_generator import DescriptionGenerator
from src.processing.note_buy_generator import NoteBuyGenerator
from src.processing.specs_generator import SpecsGenerator
from src.processing.advantages_generator import AdvantagesGenerator
# from src.validation.guards import validate_content  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
from src.processing.real_facts_extractor import RealFactsExtractor
from src.parsing.bundle_extractor import extract_bundle_components
from src.validation.specs_validator import validate_specs_integrity, log_specs_changes, validate_and_filter_specs
from src.processing.unified_parser import UnifiedParser
from src.processing.faq_generator import FaqGenerator
from src.processing.universal_translator import UniversalTranslator
from src.utils.resilient_fetcher import ResilientFetcher
from src.recovery.llm_recovery import LLMRecovery

logger = logging.getLogger(__name__)

class AsyncProductProcessor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    
    def __init__(self):
        self.llm_generator = AsyncLLMContentGenerator()
        self.content_critic = AsyncContentCritic()
        self.fragment_renderer = ProductFragmentRenderer()
        self.note_buy_generator = EnhancedNoteBuyGenerator()
        self.description_generator = DescriptionGenerator()
        self.note_buy_generator_new = NoteBuyGenerator()
        self.specs_generator = SpecsGenerator()
        self.advantages_generator = AdvantagesGenerator()
        self.real_extractor = RealFactsExtractor()
        self.unified_parser = UnifiedParser()
        self.faq_generator = FaqGenerator()
        self.translator = UniversalTranslator()
        
        # üõ°Ô∏è Resilient –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è 100% –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.resilient_fetcher = ResilientFetcher(timeout=30, max_retries=3)
        self.llm_recovery = LLMRecovery()
        
        # –†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ relaxed –¥–ª—è Round 3)
        self.relaxed_validation = False
        
        self.executor = ThreadPoolExecutor(max_workers=4)
    
    async def process_product_with_validation(self, product_url: str, client: httpx.AsyncClient, 
                            llm_semaphore: asyncio.Semaphore, write_lock: asyncio.Lock) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            result = await self.process_product(product_url, client, llm_semaphore, write_lock)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {product_url}: {e}")
            result = {
                'url': product_url,
                'status': 'failed',
                'error': str(e),
                'ru_html': '',
                'ua_html': ''
            }
            return result

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å —É—á–µ—Ç–æ–º relaxed_mode –¥–ª—è Round 3)
        is_valid, issues = self._validate_content_quality(result, relaxed_mode=self.relaxed_validation)

        if is_valid:
            result['status'] = 'success'
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {product_url}")
        else:
            result['status'] = 'failed'
            result['error'] = '; '.join(issues)
            logger.error(f"‚ùå –¢–æ–≤–∞—Ä –ù–ï –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {product_url}")
            logger.error(f"   –ü—Ä–æ–±–ª–µ–º—ã: {issues}")

        return result

    async def process_product(self, product_url: str, client: httpx.AsyncClient, 
                            llm_semaphore: asyncio.Semaphore, write_lock: asyncio.Lock) -> Dict[str, Any]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–æ–±–µ –ª–æ–∫–∞–ª–∏)
        
        –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:
        1. –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT-4o-mini (–±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ)
        2. Fallback —á–µ—Ä–µ–∑ Claude (–µ—Å–ª–∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å)
        
        Args:
            product_url: URL —Ç–æ–≤–∞—Ä–∞
            client: HTTP –∫–ª–∏–µ–Ω—Ç
            llm_semaphore: –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è LLM –∑–∞–ø—Ä–æ—Å–æ–≤
            write_lock: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª—ã
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞: {product_url}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –æ–±–µ–∏—Ö –ª–æ–∫–∞–ª–µ–π
            ua_url, ru_url = self._get_locale_urls(product_url)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedParser –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ HTML
            ua_html, ru_html = await self.unified_parser.fetch_html(ua_url)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º RU —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ru_result = await self._process_locale(ru_html, ru_url, 'ru', client, llm_semaphore)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è UA —Ñ–æ–ª–±—ç–∫–∞
            ru_bundle_components = ru_result.get('bundle_components', [])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UA —Å –ø–µ—Ä–µ–¥–∞—á–µ–π RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ua_result = await self._process_locale(ua_html, ua_url, 'ua', client, llm_semaphore, ru_bundle_components)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result = {
                'url': product_url,
                'ua_html': ua_result.get('html', ''),
                'ru_html': ru_result.get('html', ''),
                'ua_title': ua_result.get('title', ''),
                'ru_title': ru_result.get('title', ''),
                'ua_metadata': ua_result.get('metadata', {}),
                'ru_metadata': ru_result.get('metadata', {}),
                'success': ua_result.get('success', False) and ru_result.get('success', False)
            }
            
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if not self._validate_processing_result(final_result):
                logger.error(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ù–µ–ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {product_url}")
                raise ValueError(f"–ù–µ–ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {product_url}")
            
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {product_url}")
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_url}: {e}")
            
            # üõ°Ô∏è RESILIENT RECOVERY: –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Claude
            try:
                logger.info(f"üõ°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º resilient recovery (Claude fallback) –¥–ª—è {product_url}")
                recovery_result = await self._process_product_resilient(product_url, client, llm_semaphore)
                
                # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç recovery –ü–ï–†–ï–î –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                if recovery_result.get('success', False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å —É—á–µ—Ç–æ–º relaxed_mode –¥–ª—è Round 3)
                    is_valid, issues = self._validate_content_quality(recovery_result, relaxed_mode=self.relaxed_validation)
                    
                    if is_valid:
                        logger.info(f"‚úÖ Resilient recovery —É—Å–ø–µ—à–µ–Ω –∏ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {product_url}")
                        return recovery_result
                    else:
                        logger.error(f"‚ùå Resilient recovery –ù–ï –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {product_url}")
                        logger.error(f"   –ü—Ä–æ–±–ª–µ–º—ã: {issues}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É fallback
                else:
                    logger.error(f"‚ùå Resilient recovery –Ω–µ —É–¥–∞–ª—Å—è: {product_url}")
                    
            except Exception as recovery_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ resilient recovery: {recovery_error}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä {product_url}: {e}")
    
    def _validate_processing_result(self, result: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['url', 'ua_html', 'ru_html', 'ua_title', 'ru_title']
            
            for field in required_fields:
                if not result.get(field):
                    logger.warning(f"‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTML –Ω–µ –ø—É—Å—Ç–æ–π
            if len(result.get('ua_html', '').strip()) < 100:
                logger.warning(f"‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: UA HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
                
            if len(result.get('ru_html', '').strip()) < 100:
                logger.warning(f"‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: RU HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
            if len(result.get('ua_title', '').strip()) < 3:
                logger.warning(f"‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: UA –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                return False
                
            if len(result.get('ru_title', '').strip()) < 3:
                logger.warning(f"‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: RU –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                return False
            
            logger.info(f"‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def _validate_content_quality(self, result: Dict[str, Any], relaxed_mode: bool = False) -> tuple[bool, list[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            relaxed_mode: –ï—Å–ª–∏ True, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–º—è–≥—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–¥–ª—è Round 3 —Å GPT-4o)
        """
        issues = []
        
        ru_html = result.get('ru_html', '')
        ua_html = result.get('ua_html', '')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        min_faq = 2 if relaxed_mode else 4
        min_benefits = 2 if relaxed_mode else 3
        min_html_size = 800 if relaxed_mode else 1500
        
        # 1. FAQ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ
        ru_faq = ru_html.count('<div class="faq-item">')
        ua_faq = ua_html.count('<div class="faq-item">')
        
        if ru_faq < min_faq:
            issues.append(f"RU FAQ: {ru_faq} (–Ω—É–∂–Ω–æ ‚â•{min_faq})")
        if ua_faq < min_faq:
            issues.append(f"UA FAQ: {ua_faq} (–Ω—É–∂–Ω–æ ‚â•{min_faq})")
        
        # 2. –û–ø–∏—Å–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 <p>)
        if ru_html.count('</p>') < 2:
            issues.append("RU –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–µ")
        if ua_html.count('</p>') < 2:
            issues.append("UA –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–µ")
        
        # 3. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        ru_benefits = ru_html.count('<div class="card"><h4>')
        ua_benefits = ua_html.count('<div class="card"><h4>')
        
        if ru_benefits < min_benefits:
            issues.append(f"RU –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {ru_benefits} (–Ω—É–∂–Ω–æ ‚â•{min_benefits})")
        if ua_benefits < min_benefits:
            issues.append(f"UA –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {ua_benefits} (–Ω—É–∂–Ω–æ ‚â•{min_benefits})")
        
        # 4. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if len(ru_html) < min_html_size:
            issues.append(f"RU HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(ru_html)} –±–∞–π—Ç (–º–∏–Ω–∏–º—É–º {min_html_size})")
        if len(ua_html) < min_html_size:
            issues.append(f"UA HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(ua_html)} –±–∞–π—Ç (–º–∏–Ω–∏–º—É–º {min_html_size})")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞–≥–ª—É—à–µ–∫
        if 'error-message' in ru_html or 'error-message' in ua_html:
            issues.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–ª—É—à–∫–∏ –≤ HTML")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤
        if 'FAQ</h2>' in ru_html and ru_faq == 0:
            issues.append("RU FAQ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å—Ç—å, –Ω–æ FAQ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        if 'FAQ</h2>' in ua_html and ua_faq == 0:
            issues.append("UA FAQ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å—Ç—å, –Ω–æ FAQ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # ============ –°–¢–†–û–ì–ò–ï –ü–†–û–í–ï–†–ö–ò (—Ä–∞–±–æ—Ç–∞—é—Ç –í–°–ï–ì–î–ê) ============
        # –≠—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –ù–ï –î–û–ü–£–°–ö–ê–Æ–¢–°–Ø –¥–∞–∂–µ –≤ relaxed_mode
        
        strict_issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        generic_phrases = [
            '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
            '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ',
            '—è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç',
            '–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –∑–∞—Å—ñ–±'
        ]
        
        for phrase in generic_phrases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º RU –æ–ø–∏—Å–∞–Ω–∏–µ
            ru_desc_match = re.search(r'<div class="description">(.*?)</div>', ru_html, re.DOTALL)
            if ru_desc_match:
                desc_text = ru_desc_match.group(1).strip()
                # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ (<150 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É - —ç—Ç–æ –ø–ª–æ—Ö–æ
                if phrase in desc_text.lower() and len(desc_text) < 200:
                    strict_issues.append(f"RU –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É '{phrase}' –ø—Ä–∏ –º–∞–ª–æ–º –æ–±—ä–µ–º–µ —Ç–µ–∫—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UA –æ–ø–∏—Å–∞–Ω–∏–µ
            ua_desc_match = re.search(r'<div class="description">(.*?)</div>', ua_html, re.DOTALL)
            if ua_desc_match:
                desc_text = ua_desc_match.group(1).strip()
                if phrase in desc_text.lower() and len(desc_text) < 200:
                    strict_issues.append(f"UA –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É '{phrase}' –ø—Ä–∏ –º–∞–ª–æ–º –æ–±—ä–µ–º–µ —Ç–µ–∫—Å—Ç–∞")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (—Å –∫–∞–≤—ã—á–∫–∞–º–∏/JSON)
        ru_title = result.get('ru_title', '')
        ua_title = result.get('ua_title', '')
        
        if ru_title.startswith('"') or ru_title.startswith('{'):
            strict_issues.append("RU –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ –æ—Ç JSON —Å–∏–º–≤–æ–ª–æ–≤")
        if ua_title.startswith('"') or ua_title.startswith('{'):
            strict_issues.append("UA –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ –æ—Ç JSON —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ" (–∑–∞–≥–ª—É—à–∫–∞)
        if ru_benefits == 1 and '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</h4>' in ru_html:
            strict_issues.append("RU –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞ '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'")
        if ua_benefits == 1 and ('–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å</h4>' in ua_html or '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</h4>' in ua_html):
            strict_issues.append("UA –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞ '–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å'")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –í–°–ï–ì–î–ê –æ—Ç–∫–ª–æ–Ω—è–µ–º (–¥–∞–∂–µ –≤ relaxed_mode)
        if strict_issues:
            logger.error(f"‚ùå –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–ª—É—à–∫–∏/–Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏ - –û–¢–ö–õ–û–ù–Ø–ï–ú")
            logger.error(f"   –ü—Ä–æ–±–ª–µ–º—ã: {strict_issues}")
            return (False, strict_issues + issues)
        
        # ============ –ì–ò–ë–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è relaxed_mode) ============
        
        if relaxed_mode and issues:
            # –í relaxed_mode –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä —Å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (–º–µ–Ω—å—à–µ FAQ, etc)
            # –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ –∑–∞–≥–ª—É—à–µ–∫ (—ç—Ç–æ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ)
            logger.info(f"üîµ –°–ú–Ø–ì–ß–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (Round 3): {len(issues)} –ø—Ä–æ–±–ª–µ–º, –Ω–æ –ë–ï–ó –∑–∞–≥–ª—É—à–µ–∫ - –ü–†–ò–ù–ò–ú–ê–ï–ú")
            logger.info(f"   –ü—Ä–æ–±–ª–µ–º—ã: {issues[:3]}..." if len(issues) > 3 else f"   –ü—Ä–æ–±–ª–µ–º—ã: {issues}")
            return (True, issues)
        
        return (len(issues) == 0, issues)
    
    async def _process_locale(self, html: str, url: str, locale: str,
                            client: httpx.AsyncClient, llm_semaphore: asyncio.Semaphore, 
                            ru_bundle_components: List[str] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ª–æ–∫–∞–ª–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–±–æ—Ä–∞"""
        try:
            if not html:
                return {'html': '', 'success': False, 'error': 'Empty HTML'}
            
            # CPU-bound –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–æ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            facts_task = loop.run_in_executor(
                self.executor, 
                self._extract_facts_from_html, 
                html, url, locale
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedParser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Å–æ—Å—Ç–∞–≤–∞ –Ω–∞–±–æ—Ä–∞
            # –ü–æ–ª—É—á–∞–µ–º HTML –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            ua_url, ru_url = self._get_locale_urls(url)
            ua_html_for_parsing, ru_html_for_parsing = await self.unified_parser.fetch_html(ua_url)
            
            # –ü–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é UnifiedParser
            specs_task = self.unified_parser.parse_characteristics(
                ua_html_for_parsing, ru_html_for_parsing
            )
            bundle_task = loop.run_in_executor(
                self.executor,
                self.unified_parser.parse_bundle,
                ua_html_for_parsing, ru_html_for_parsing
            )
            
            facts, specs, bundle_components = await asyncio.gather(facts_task, specs_task, bundle_task)
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞–ª–∏
            original_title = facts.get('title', '')
            if original_title:
                try:
                    translated_title = await self.unified_parser.get_translated_title(
                        ua_html_for_parsing, ru_html_for_parsing, locale
                    )
                    facts['title'] = translated_title
                    logger.info(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {locale}: {translated_title}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ UnifiedParser –≤ —Ñ–∞–∫—Ç—ã (—Ç–µ–ø–µ—Ä—å specs —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂)
            if specs:
                ru_specs, ua_specs = specs
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞–ª–∏
                if locale == 'ru':
                    # ‚úÖ –í–°–ï–ì–î–ê –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ RU —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–§–ª—ñ–∑–µ–ª—ñ–Ω ‚Üí –§–ª–∏–∑–µ–ª–∏–Ω)
                    # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —è–∑—ã–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    selected_specs = normalize_ru_specs_round3(ru_specs)
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º RU —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(ru_specs)} (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LLM)")
                    logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ RU —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–§–ª—ñ–∑–µ–ª—ñ–Ω ‚Üí –§–ª–∏–∑–µ–ª–∏–Ω)")
                else:  # ua
                    selected_specs = ua_specs
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º UA —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(ua_specs)} (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LLM)")
                
                # selected_specs —É–∂–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
                logger.info(f"üîç DEBUG: selected_specs —Ç–∏–ø: {type(selected_specs)}")
                logger.info(f"üîç DEBUG: selected_specs —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {selected_specs}")
                facts['specs'] = selected_specs
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(selected_specs)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ UnifiedParser –¥–ª—è {locale}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–æ—Ä–∞ –≤ —Ñ–∞–∫—Ç—ã
            facts['bundle_components'] = bundle_components
            if bundle_components:
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(bundle_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–±–æ—Ä–∞ –¥–ª—è {locale}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è UA —Ñ–æ–ª–±—ç–∫–∞
                if locale == 'ru':
                    facts['ru_bundle_components'] = bundle_components[:]
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è UA —Ñ–æ–ª–±—ç–∫–∞: {len(bundle_components)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–æ—Ä–∞ –≤ —Ñ–∞–∫—Ç—ã
            facts['bundle_components'] = bundle_components
            if bundle_components:
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(bundle_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–±–æ—Ä–∞ –¥–ª—è {locale}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è UA —Ñ–æ–ª–±—ç–∫–∞
                if locale == 'ru':
                    facts['ru_bundle_components'] = bundle_components[:]
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è UA —Ñ–æ–ª–±—ç–∫–∞: {len(bundle_components)}")
            
            # –î–ª—è UA: –ø–µ—Ä–µ–¥–∞–µ–º RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞
            if locale == 'ua' and ru_bundle_components:
                facts['ru_bundle_components'] = ru_bundle_components
                logger.info(f"üîÑ UA: –ü–µ—Ä–µ–¥–∞–Ω—ã RU –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞: {len(ru_bundle_components)}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–ª–±—ç–∫ –µ—Å–ª–∏ UA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ
                if not bundle_components or len(bundle_components) < len(ru_bundle_components):
                    logger.warning(f"üîÑ UA: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ - –∑–∞–º–µ–Ω—è–µ–º {len(bundle_components) if bundle_components else 0} –Ω–∞ {len(ru_bundle_components)}")
                    bundle_components = ru_bundle_components[:]
                    facts['bundle_components'] = bundle_components
                    logger.info(f"‚úÖ UA: –§–æ–ª–±—ç–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω - —Ç–µ–ø–µ—Ä—å {len(bundle_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
                else:
                    logger.info(f"‚úÖ UA: –ü–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–∞–π–¥–µ–Ω ({len(bundle_components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º LLM
            async with llm_semaphore:
                content = await self._generate_content(facts, locale, client)
            
            # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML
            html_result = await loop.run_in_executor(
                self.executor,
                self._render_html,
                content, locale, url, html
            )
            
            return {
                'html': html_result,
                'title': facts.get('title', ''),
                'success': True,
                'bundle_components': bundle_components,
                'metadata': {
                    'facts_count': len(facts.get('specs', [])),
                    'content_quality': content.get('quality_score', 0.0),
                    'bundle_components_count': len(bundle_components)
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª–∏ {locale}: {e}")
            return {'html': '', 'success': False, 'error': str(e)}
    
    def _extract_facts_from_html(self, html: str, url: str, locale: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–∫—Ç—ã –∏–∑ HTML"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å —Ñ–∞–∫—Ç–æ–≤
            facts = self.real_extractor.extract_product_facts(html, url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å
            facts['locale'] = locale
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not facts.get('title') or len(facts.get('title', '').strip()) < 3:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ {url}")
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ñ–∞–∫—Ç—ã –¥–ª—è {locale}: {facts.get('title', 'N/A')}")
            return facts
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è {url}: {e}")
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ generic –∫–æ–Ω—Ç–µ–Ω—Ç—É
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã –∏–∑ {url}: {e}")
    
    def _extract_title_from_html(self, html: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ HTML"""
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            h1_tag = soup.find('h1')
            return h1_tag.get_text().strip() if h1_tag else ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return ""
    
    def _extract_h1(self, html: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ H1 –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            h1_tag = soup.find('h1')
            return h1_tag.get_text().strip() if h1_tag else ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è H1: {e}")
            return ""
    
    def _extract_specs(self, html: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            
            specs = []
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            tables = soup.find_all('table')
            for table in tables:
                rows = table.find_all('tr')
                for row in rows:
                    cells = row.find_all(['td', 'th'])
                    if len(cells) >= 2:
                        key = cells[0].get_text().strip()
                        value = cells[1].get_text().strip()
                        if key and value:
                            specs.append({'key': key, 'value': value})
            
            return specs[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            return []
    
    async def _generate_content(self, facts: Dict[str, Any], locale: str, 
                              client: httpx.AsyncClient) -> Dict[str, Any]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∂—ë—Å—Ç–∫–∏–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–æ—Å—Ç–∞–≤–∞ –Ω–∞–±–æ—Ä–∞"""
        try:
            from src.llm.unified_content_generator import UnifiedContentGenerator
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            unified_generator = UnifiedContentGenerator()
            
            # –û–î–ò–ù LLM –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ—Ö (25 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 80 —Å–µ–∫)
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Structured Output –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API
            unified_content = await unified_generator.generate_unified_content(facts, locale)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ unified_content_generator, –ù–ï –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω!
            description = unified_content.get('description', [])
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Å—Ç—Ä–æ–∫—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è FragmentRenderer!
            
            # –î–ª—è FaqGenerator –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            description_for_faq = description
            if isinstance(description, list):
                description_for_faq = ' '.join(description)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è FaqGenerator
            product_data = {
                'title': facts.get('title', ''),
                'description': description_for_faq,
                'specs': facts.get('specs', []),
                'bundle': [],  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: bundle_components –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                'volume': facts.get('volume', ''),
                'purpose': facts.get('purpose', '')
            }
            
            # –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SmartLLMClient –¥–ª—è FaqGenerator –∏ Translator
            from src.llm.smart_llm_client import SmartLLMClient
            smart_llm_client = SmartLLMClient()
            self.faq_generator.llm = smart_llm_client
            self.translator.llm_client = smart_llm_client
            
            # 1. –í–°–ï–ì–î–ê –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            # üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ FaqGenerator
            logger.info(f"üîç DEBUG: type(product_data) = {type(product_data)}")
            logger.info(f"üîç DEBUG: product_data keys = {list(product_data.keys()) if isinstance(product_data, dict) else '–ù–ï –°–õ–û–í–ê–†–¨'}")
            if isinstance(product_data, dict) and 'specs' in product_data:
                specs = product_data['specs']
                logger.info(f"üîç DEBUG: product_data['specs'] —Ç–∏–ø = {type(specs)}")
                logger.info(f"üîç DEBUG: product_data['specs'] –¥–ª–∏–Ω–∞ = {len(specs) if specs else 0}")
                if specs and len(specs) > 0:
                    logger.info(f"üîç DEBUG: product_data['specs'][0] = {specs[0]}")
            
            ru_faq_list = await self.faq_generator.generate(product_data, 'ru', num_questions=6)
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(ru_faq_list)} FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
            
            # 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if locale == 'ua':
                faq_list = await self.translator.translate_faq_list(ru_faq_list, 'uk')
                logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(faq_list)} FAQ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π")
            else:
                faq_list = ru_faq_list
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(faq_list)} FAQ –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ UnifiedParser (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
            original_specs = facts.get('specs', [])
            logger.info(f"üîç {locale.upper()}: facts.get('specs') —Ç–∏–ø: {type(original_specs)}")
            logger.info(f"üîç {locale.upper()}: facts.get('specs') –¥–ª–∏–Ω–∞: {len(original_specs) if original_specs else 0}")
            if original_specs:
                logger.info(f"üîç {locale.upper()}: facts.get('specs') –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {original_specs[0]}")
            else:
                logger.warning(f"‚ö†Ô∏è {locale.upper()}: facts.get('specs') –ü–£–°–¢–û–ô!")
            
            if original_specs:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ UnifiedParser
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(original_specs)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ UnifiedParser –¥–ª—è {locale}")
                final_specs = original_specs
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)
                generated_specs = self.specs_generator.generate_specs_from_facts(facts, locale)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç-–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if generated_specs:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    source_facts = [(spec.get('name', ''), spec.get('value', '')) for spec in generated_specs]
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
                    validated_specs, validation_status = validate_specs_integrity(generated_specs, source_facts)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç-–≤–∞–ª–∏–¥–∞—Ü–∏—è
                    final_specs = validate_and_filter_specs(validated_specs, source_facts)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    log_specs_changes(generated_specs, final_specs)
                    
                    if validation_status != "VALID":
                        logger.warning(f"‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_status}")
                else:
                    final_specs = generated_specs
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            content = {
                'title': facts.get('title', ''),
                'image_url': facts.get('image_url', ''),
                'description': description,
                'advantages': unified_content.get('advantages', []),
                'faq': faq_list,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FAQ –∏–∑ FaqGenerator
                'note_buy': unified_content.get('note_buy', ''),
                'specs': final_specs,
                'bundle_components': [],  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: bundle_components –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                'quality_score': 0.9,  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ FAQ
                'critic_status': 'UNIFIED_GENERATION_WITH_ENHANCED_FAQ' if faq_list else 'UNIFIED_GENERATION'
            }
            
            logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {locale}: {len(content)} –±–ª–æ–∫–æ–≤")
            
            # üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º content
            specs_in_return = content.get('specs', [])
            logger.info(f"üîç {locale.upper()}: content['specs'] –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–∏–ø: {type(specs_in_return)}")
            logger.info(f"üîç {locale.upper()}: content['specs'] –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª–∏–Ω–∞: {len(specs_in_return) if specs_in_return else 0}")
            if specs_in_return:
                logger.info(f"üîç {locale.upper()}: content['specs'] –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {specs_in_return[0]}")
            else:
                logger.warning(f"‚ö†Ô∏è {locale.upper()}: content['specs'] –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –ü–£–°–¢–û–ô!")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É bundle_components —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            return content
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ generic –∫–æ–Ω—Ç–µ–Ω—Ç—É
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {locale}: {e}")
    
    def _render_html(self, content: Dict[str, Any], locale: str, product_url: str, html_content: str) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML (CPU-bound –æ–ø–µ—Ä–∞—Ü–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not content or not any(content.values()):
                raise ValueError(f"–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ {locale}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['title', 'description', 'note_buy']
            for field in required_fields:
                if not content.get(field) or len(str(content.get(field)).strip()) < 3:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –¥–ª—è {locale}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º FAQ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            faq_data = content.get('faq', [])
            if isinstance(faq_data, list) and faq_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                first_item = faq_data[0]
                if isinstance(first_item, dict):
                    # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    faq_formatted = faq_data
                elif isinstance(first_item, tuple):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
                    faq_formatted = [{'question': q, 'answer': a} for q, a in faq_data]
                elif isinstance(first_item, list):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                    faq_formatted = [{'question': item[0], 'answer': item[1]} for item in faq_data]
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FAQ: {type(first_item)}")
                    faq_formatted = []
            else:
                faq_formatted = []
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ content
            logger.info(f"üîç content.description —Ç–∏–ø: {type(content.get('description', '–ù–ï–¢'))}")
            if 'description' in content:
                desc = content['description']
                logger.info(f"üîç content.description —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(desc)[:100]}...")
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ß—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ blocks
            description_for_blocks = content.get('description', '')
            logger.info(f"üîç –ü–µ—Ä–µ–¥–∞–µ–º –≤ blocks.description —Ç–∏–ø: {type(description_for_blocks)}")
            
            # üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º specs –≤ content
            specs_in_content = content.get('specs', [])
            logger.info(f"üîç {locale.upper()}: content['specs'] —Ç–∏–ø: {type(specs_in_content)}")
            logger.info(f"üîç {locale.upper()}: content['specs'] –¥–ª–∏–Ω–∞: {len(specs_in_content)}")
            if specs_in_content:
                logger.info(f"üîç {locale.upper()}: content['specs'] –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {specs_in_content[0]}")
            else:
                logger.warning(f"‚ö†Ô∏è {locale.upper()}: content['specs'] –ü–£–°–¢–û–ô!")
            
            blocks = {
                'title': content.get('title', ''),
                'description': description_for_blocks,
                'advantages': content.get('advantages', []),
                'specs': content.get('specs', []),
                'faq': faq_formatted,
                'note_buy': content.get('note_buy', ''),
                'image_url': content.get('image_url', ''),
                'image_data': content.get('image_data', {}),
                'product_url': product_url,  # –î–æ–±–∞–≤–ª—è–µ–º URL —Ç–æ–≤–∞—Ä–∞ –¥–ª—è ProductImageExtractor
                'html_content': html_content,  # –î–æ–±–∞–≤–ª—è–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                'bundle_components': content.get('bundle_components', [])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–æ—Ä–∞
            }
            
            # –†–µ–Ω–¥–µ—Ä–∏–º HTML
            html_result = self.fragment_renderer.render_product_fragment(blocks, locale)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
            if 'error-message' in html_result:
                logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ {locale} - FALLBACK –û–¢–ö–õ–Æ–ß–ï–ù")
                raise ValueError(f"HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è {locale} - fallback –æ—Ç–∫–ª—é—á–µ–Ω")
            
            return html_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML –¥–ª—è {locale} - fallback –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def _create_fallback_html(self, locale: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback HTML –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        try:
            if locale == 'ua':
                return '''<div class="ds-desc">
                    <h2>–¢–æ–≤–∞—Ä Epilax</h2>
                    <h2>–û–ø–∏—Å</h2>
                    <p>–Ø–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</p>
                    <p class="note-buy">–ó–∞–º–æ–≤—Ç–µ —Ç–æ–≤–∞—Ä –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è —è–∫—ñ—Å–Ω–∏–º –¥–æ–≥–ª—è–¥–æ–º!</p>
                    <h2>–ü–µ—Ä–µ–≤–∞–≥–∏</h2>
                    <ul><li>–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å</li><li>–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</li><li>–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li></ul>
                    <h2>FAQ</h2>
                    <div class="faq-section">
                        <div class="faq-item">
                            <div class="faq-question">–î–ª—è —á–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–π –ø—Ä–æ–¥—É–∫—Ç?</div>
                            <div class="faq-answer">–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?</div>
                            <div class="faq-answer">–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —á—É—Ç–ª–∏–≤–æ—ó —à–∫—ñ—Ä–∏?</div>
                            <div class="faq-answer">–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–Ø–∫–∏–π –æ–±'—î–º —É–ø–∞–∫–æ–≤–∫–∏?</div>
                            <div class="faq-answer">–û–±'—î–º –≤–∫–∞–∑–∞–Ω–æ –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ß–∏ —î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è?</div>
                            <div class="faq-answer">–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑ –ª—ñ–∫–∞—Ä–µ–º.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏?</div>
                            <div class="faq-answer">–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ —Å—É—Ö–æ–º—É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ.</div>
                        </div>
                    </div>
                </div>'''
            else:
                return '''<div class="ds-desc">
                    <h2>–¢–æ–≤–∞—Ä Epilax</h2>
                    <h2>–û–ø–∏—Å–∞–Ω–∏–µ</h2>
                    <p>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</p>
                    <p class="note-buy">–ó–∞–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —É—Ö–æ–¥–æ–º!</p>
                    <h2>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h2>
                    <ul><li>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</li><li>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li><li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li></ul>
                    <h2>FAQ</h2>
                    <div class="faq-section">
                        <div class="faq-item">
                            <div class="faq-question">–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?</div>
                            <div class="faq-answer">–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</div>
                            <div class="faq-answer">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–∏?</div>
                            <div class="faq-answer">–î–∞, –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ö–∞–∫–æ–π –æ–±—ä—ë–º —É–ø–∞–∫–æ–≤–∫–∏?</div>
                            <div class="faq-answer">–û–±—ä—ë–º —É–∫–∞–∑–∞–Ω –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?</div>
                            <div class="faq-answer">–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.</div>
                        </div>
                        <div class="faq-item">
                            <div class="faq-question">–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å?</div>
                            <div class="faq-answer">–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ.</div>
                        </div>
                    </div>
                </div>'''
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback HTML: {e}")
            return f'<div class="ds-desc"><p class="error-message">–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞</p></div>'
    
    def _get_locale_urls(self, product_url: str) -> tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–±–µ–∏—Ö –ª–æ–∫–∞–ª–µ–π - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û"""
        from src.utils.domain_detector import UniversalDomainDetector
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã –ª–æ–∫–∞–ª–µ–π
        ua_url, ru_url = UniversalDomainDetector.get_locale_pair(product_url)
        
        return ua_url, ru_url
    
    def _create_fallback_content(self, facts: Dict[str, Any], locale: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        try:
            title = facts.get('title', '–¢–æ–≤–∞—Ä Epilax')
            
            if locale == 'ua':
                return {
                    'title': title,
                    'description': f'{title} - —Ü–µ —è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é. –í—ñ–Ω –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                    'advantages': [
                        '–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å',
                        '–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
                        '–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                    ],
                    'specs': facts.get('specs', []),
                    'faq': [
                        {'question': '–î–ª—è —á–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–π –ø—Ä–æ–¥—É–∫—Ç?', 'answer': '–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é.'},
                        {'question': '–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?', 'answer': '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.'},
                        {'question': '–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —á—É—Ç–ª–∏–≤–æ—ó —à–∫—ñ—Ä–∏?', 'answer': '–¢–∞–∫, –ø—Ä–æ–¥—É–∫—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —à–∫—ñ—Ä–∏.'},
                        {'question': '–Ø–∫–∏–π –æ–±\'—î–º —É–ø–∞–∫–æ–≤–∫–∏?', 'answer': '–û–±\'—î–º –≤–∫–∞–∑–∞–Ω–æ –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.'},
                        {'question': '–ß–∏ —î –ø—Ä–æ—Ç–∏–ø–æ–∫–∞–∑–∞–Ω–Ω—è?', 'answer': '–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑ –ª—ñ–∫–∞—Ä–µ–º.'},
                        {'question': '–Ø–∫ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏?', 'answer': '–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –≤ —Å—É—Ö–æ–º—É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ.'}
                    ],
                    'note_buy': f'–ó–∞–º–æ–≤—Ç–µ {title.lower()} –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è —è–∫—ñ—Å–Ω–∏–º –¥–æ–≥–ª—è–¥–æ–º!',
                    'quality_score': 0.3,
                    'critic_status': 'FALLBACK'
                }
            else:
                return {
                    'title': title,
                    'description': f'{title} - —ç—Ç–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π. –û–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                    'advantages': [
                        '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
                        '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
                        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                    ],
                    'specs': facts.get('specs', []),
                    'faq': [
                        {'question': '–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?', 'answer': '–ü—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π.'},
                        {'question': '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', 'answer': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.'},
                        {'question': '–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–∏?', 'answer': '–î–∞, –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏.'},
                        {'question': '–ö–∞–∫–æ–π –æ–±—ä—ë–º —É–ø–∞–∫–æ–≤–∫–∏?', 'answer': '–û–±—ä—ë–º —É–∫–∞–∑–∞–Ω –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.'},
                        {'question': '–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?', 'answer': '–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.'},
                        {'question': '–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å?', 'answer': '–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ.'}
                    ],
                    'note_buy': f'–ó–∞–∫–∞–∂–∏—Ç–µ {title.lower()} —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —É—Ö–æ–¥–æ–º!',
                    'quality_score': 0.3,
                    'critic_status': 'FALLBACK'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
            return {
                'title': '–¢–æ–≤–∞—Ä Epilax',
                'description': '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π.',
                'advantages': ['–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
                'specs': [],
                'faq': [{'question': '–í–æ–ø—Ä–æ—Å', 'answer': '–û—Ç–≤–µ—Ç'}],
                'note_buy': '–ó–∞–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!',
                'quality_score': 0.1,
                'critic_status': 'EMERGENCY_FALLBACK'
            }
    
    async def _process_product_resilient(
        self, 
        product_url: str, 
        client: httpx.AsyncClient, 
        llm_semaphore: asyncio.Semaphore
    ) -> Dict[str, Any]:
        """üõ°Ô∏è Resilient –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π 100% —É—Å–ø–µ—Ö–∞"""
        
        try:
            logger.info(f"üõ°Ô∏è Resilient processing: {product_url}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude –¥–ª—è recovery (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å)
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude Haiku –¥–ª—è resilient recovery (—ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π fallback)
            from anthropic import Anthropic
            import os
            claude_client = Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
            self.llm_recovery.llm = claude_client
            self.llm_recovery.model = "claude-3-haiku-20240307"  # Claude Haiku - –±—ã—Å—Ç—Ä—ã–π fallback
            logger.info(f"üü£ Resilient recovery –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Claude Haiku –¥–ª—è fallback")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º URLs –¥–ª—è –æ–±–µ–∏—Ö –ª–æ–∫–∞–ª–µ–π
            ua_url, ru_url = self.resilient_fetcher.get_fallback_urls(product_url)
            
            # 2. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å fallback
            try:
                ua_content, ru_content, status = await self.resilient_fetcher.fetch_product_with_locales(product_url)
                logger.info(f"‚úÖ Resilient fetch: {status}")
            except Exception as e:
                logger.error(f"‚ùå Resilient fetch failed: {e}")
                raise
            
            # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ LLM
            ua_product_name = await self.llm_recovery.extract_title_from_raw_html(ua_content)
            ru_product_name = await self.llm_recovery.extract_title_from_raw_html(ru_content)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not ua_product_name and not ru_product_name:
                base_name = f"–¢–æ–≤–∞—Ä –∏–∑ {product_url}"
                ua_product_name = base_name
                ru_product_name = base_name
            elif not ua_product_name:
                ua_product_name = ru_product_name
            elif not ru_product_name:
                ru_product_name = ua_product_name
            
            logger.info(f"‚úÖ Resilient: UA –Ω–∞–∑–≤–∞–Ω–∏–µ = '{ua_product_name}'")
            logger.info(f"‚úÖ Resilient: RU –Ω–∞–∑–≤–∞–Ω–∏–µ = '{ru_product_name}'")
            
            # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ LLM
            characteristics = []
            if ua_content:
                characteristics = await self.llm_recovery.extract_characteristics_from_raw_html(
                    ua_content, ua_product_name
                )
            
            if not characteristics and ru_content:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ RU –≤–µ—Ä—Å–∏–∏")
                characteristics = await self.llm_recovery.extract_characteristics_from_raw_html(
                    ru_content, ru_product_name
                )
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if characteristics:
                # –î–ª—è RU –≤–µ—Ä—Å–∏–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —è–∑—ã–∫
                ru_characteristics = await self.llm_recovery.fix_language_issues(
                    characteristics, target_locale='ru'
                )
                logger.info(f"‚úÖ Resilient: {len(ru_characteristics)} RU —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            else:
                ru_characteristics = []
                logger.warning(f"‚ö†Ô∏è Resilient: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
            async with llm_semaphore:
                ru_content_dict = await self.llm_recovery.generate_fallback_content(
                    ru_product_name, ru_characteristics, 'ru'
                )
                
                ua_content_dict = await self.llm_recovery.generate_fallback_content(
                    ua_product_name, characteristics, 'ua'
                )
            
            # 7. –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ru_image = await self.llm_recovery.find_image_from_raw_html(ru_content, ru_product_name)
            ua_image = await self.llm_recovery.find_image_from_raw_html(ua_content, ua_product_name)
            
            # 8. –†–µ–Ω–¥–µ—Ä–∏–º HTML
            loop = asyncio.get_running_loop()
            
            # RU HTML
            ru_blocks = {
                'title': ru_product_name,
                'description': ru_content_dict.get('description', f'{ru_product_name} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'),
                'advantages': ru_content_dict.get('advantages', ['–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ']),
                'specs': ru_characteristics,
                'faq': ru_content_dict.get('faq', []),
                'note_buy': f'–ó–∞–∫–∞–∂–∏—Ç–µ {ru_product_name.lower()} —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!',
                'image_url': ru_image or '',
                'product_url': product_url,
                'html_content': ru_content or '',
                'bundle_components': []
            }
            
            ru_html = await loop.run_in_executor(
                self.executor,
                self._render_html,
                ru_blocks, 'ru', product_url, ru_content or ''
            )
            
            # UA HTML
            ua_blocks = {
                'title': ua_product_name,
                'description': ua_content_dict.get('description', f'{ua_product_name} - —è–∫—ñ—Å–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç'),
                'advantages': ua_content_dict.get('advantages', ['–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å']),
                'specs': characteristics,
                'faq': ua_content_dict.get('faq', []),
                'note_buy': f'–ó–∞–º–æ–≤—Ç–µ {ua_product_name.lower()} –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ!',
                'image_url': ua_image or '',
                'product_url': product_url,
                'html_content': ua_content or '',
                'bundle_components': []
            }
            
            ua_html = await loop.run_in_executor(
                self.executor,
                self._render_html,
                ua_blocks, 'ua', product_url, ua_content or ''
            )
            
            # 9. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'url': product_url,
                'ua_html': ua_html,
                'ru_html': ru_html,
                'ua_title': ua_product_name,
                'ru_title': ru_product_name,
                'ua_metadata': {'recovery_status': 'resilient_ua'},
                'ru_metadata': {'recovery_status': 'resilient_ru'},
                'success': True
            }
            
            logger.info(f"‚úÖ Resilient processing —É—Å–ø–µ—à–µ–Ω: {product_url}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Resilient processing failed: {e}")
            return {
                'url': product_url,
                'ua_html': '',
                'ru_html': '',
                'ua_title': '',
                'ru_title': '',
                'ua_metadata': {},
                'ru_metadata': {},
                'success': False,
                'error': f'Resilient processing failed: {e}'
            }
